{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/RVO/kdtree.ts"],"names":["FloatPair","AgentTreeNode","ObstacleTreeNode","KdTree","RVOMath","Obstacle","Simulator","constructor","a","b","lessThan","rhs","lessEqualThan","bigThan","bigEqualThan","begin","end","left","right","maxX","maxY","minX","minY","obstacle","MAX_LEAF_SIZE","agents","agentTree","obstacleTree","buildAgentTree","agentNum","length","Array","i","instance","getAgent","buildAgentTreeRecursive","buildObstacleTree","obstacles","buildObstacleTreeRecursive","computeAgentNeighbors","agent","rangeSq","queryAgentTreeRecursive","computeObstacleNeighbors","queryObstacleTreeRecursive","queryVisibility","q1","q2","radius","queryVisibilityRecursive","node","position_","x","y","Math","max","min","isVertical","splitValue","tmp","leftSize","optimalSplit","minLeft","minRight","rightSize","obstacleI1","obstacleI2","next","j","obstacleJ1","obstacleJ2","j1LeftOfI","leftOf","point","j2LeftOfI","RVO_EPSILON","fp1","fp2","leftObstacles","n","push","rightObstacles","leftCounter","rightCounter","t","det","minus","splitpoint","plus","scale","newObstacle","previous","convex","direction","id","insertAgentNeighbor","distSqLeft","sqr","distSqRight","obstacle1","obstacle2","agentLeftOfLine","distSqLine","absSq","insertObstacleNeighbor","q1LeftOfI","q2LeftOfI","invLengthI","point1LeftOfQ","point2LeftOfQ","invLengthQ"],"mappings":"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","sourcesContent":["import { RVOMath, Obstacle, Vector2 } from \"./Common\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport { Agent } from \"./Agent\";\r\n\r\nclass FloatPair {\r\n    a: number;\r\n    b: number;\r\n    constructor(a: number, b: number) {\r\n        this.a = a;\r\n\t\tthis.b = b;\r\n    }\r\n\r\n    lessThan(rhs: FloatPair) {\r\n        return this.a < rhs.a || !(rhs.a < this.a) && this.b < rhs.b;\r\n    }\r\n\r\n    lessEqualThan(rhs: FloatPair) {\r\n        return (this.a == rhs.a && this.b == rhs.b) || this.lessThan(rhs);\r\n    }\r\n\r\n    bigThan(rhs: FloatPair) {\r\n        return !this.lessEqualThan(rhs);\r\n    }\r\n\r\n    bigEqualThan(rhs: FloatPair) {\r\n        return !this.lessThan(rhs);\r\n    }\r\n}\r\n\r\nclass AgentTreeNode {\r\n    begin: number;\r\n    end: number;\r\n    left: number;\r\n    right: number;\r\n    maxX: number;\r\n    maxY: number;\r\n    minX: number;\r\n    minY: number;\r\n}\r\n\r\nclass ObstacleTreeNode {\r\n    obstacle: Obstacle;\r\n    left: ObstacleTreeNode;\r\n    right: ObstacleTreeNode;\r\n}\r\n\r\nexport class KdTree {\r\n    /**\r\n     * The maximum size of an agent k-D tree leaf.\r\n     */\r\n    MAX_LEAF_SIZE = 10;\r\n    agents: Agent[] = null;\r\n\tagentTree: AgentTreeNode[] = [];\r\n\tobstacleTree: ObstacleTreeNode = null;\r\n\t\r\n\t\r\n\tbuildAgentTree(agentNum: number) {\r\n\t\tif (!this.agents || this.agents.length != agentNum) {\r\n            this.agents = new Array<Agent>(agentNum);\r\n            for(let i = 0; i < this.agents.length; i++) {\r\n                this.agents[i] = Simulator.instance.getAgent(i);\r\n            }\r\n            \r\n            this.agentTree = new Array<AgentTreeNode>(2 * this.agents.length);\r\n\t\t\tfor (let i = 0; i < this.agentTree.length; i++) {\r\n\t\t\t\tthis.agentTree[i] = new AgentTreeNode();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (this.agents.length != 0) {\r\n\t\t\tthis.buildAgentTreeRecursive(0, this.agents.length, 0);\r\n\t\t}\r\n    }\r\n    \r\n    buildObstacleTree() {\r\n        this.obstacleTree = new ObstacleTreeNode();\r\n        let obstacles = new Array<Obstacle>(Simulator.instance.obstacles.length);\r\n        for(let i = 0; i < obstacles.length; i++) {\r\n            obstacles[i] = Simulator.instance.obstacles[i];\r\n        }\r\n\t\tthis.obstacleTree = this.buildObstacleTreeRecursive(obstacles);\r\n    }\r\n    \r\n    computeAgentNeighbors(agent: Agent, rangeSq: number) {\r\n\t\treturn this.queryAgentTreeRecursive(agent, rangeSq, 0);\r\n    }\r\n    \r\n    computeObstacleNeighbors(agent: Agent, rangeSq: number) {\r\n\t\tthis.queryObstacleTreeRecursive(agent, rangeSq, this.obstacleTree);\r\n    }\r\n    \r\n    queryVisibility (q1: Vector2, q2: Vector2, radius: number) {\r\n        return this.queryVisibilityRecursive(q1, q2, radius, this.obstacleTree);\r\n    }\r\n    \r\n\tbuildAgentTreeRecursive(begin: number, end: number, node: number) {\r\n\t\tthis.agentTree[node].begin = begin;\r\n\t\tthis.agentTree[node].end = end;\r\n\t\tthis.agentTree[node].minX = this.agentTree[node].maxX = this.agents[begin].position_.x;\r\n\t\tthis.agentTree[node].minY = this.agentTree[node].maxY = this.agents[begin].position_.y;\r\n\t\t\r\n\t\tfor (let i = begin + 1; i < end; ++i) {\r\n\t\t\tthis.agentTree[node].maxX = Math.max(this.agentTree[node].maxX, this.agents[i].position_.x);\r\n\t\t\tthis.agentTree[node].minX = Math.min(this.agentTree[node].minX, this.agents[i].position_.x);\r\n\t\t\tthis.agentTree[node].maxY = Math.max(this.agentTree[node].maxY, this.agents[i].position_.y);\r\n\t\t\tthis.agentTree[node].minY = Math.min(this.agentTree[node].minY, this.agents[i].position_.y);\r\n\t\t}\r\n\t\t\r\n\t\tif (end - begin > this.MAX_LEAF_SIZE) {\r\n\t\t\t// no leaf node\r\n\t\t\tlet isVertical = (this.agentTree[node].maxX - this.agentTree[node].minX) > (this.agentTree[node].maxY - this.agentTree[node].minY);\r\n\t\t\tlet splitValue = 0.5 * (isVertical ? this.agentTree[node].maxX + this.agentTree[node].minX : this.agentTree[node].maxY + this.agentTree[node].minY);\r\n\t\t\t\r\n\t\t\tlet left = begin;\r\n\t\t\tlet right = end;\r\n\t\t\t\r\n\t\t\twhile (left < right) {\r\n\t\t\t\twhile (left < right && (isVertical ? this.agents[left].position_.x : this.agents[left].position_.y) < splitValue) {\r\n                    ++left;\r\n                }\r\n\r\n                while (right > left && (isVertical ? this.agents[right - 1].position_.x : this.agents[right - 1].position_.y) >= splitValue) {\r\n                    --right;\r\n                }\r\n\r\n                if (left < right) {\r\n                    let tmp = this.agents[left];\r\n                    this.agents[left] = this.agents[right - 1];\r\n                    this.agents[right - 1] = tmp;\r\n                    ++left;\r\n                    --right;\r\n                }\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet leftSize = left - begin;\r\n\t\t\tif (leftSize == 0) {\r\n\t\t\t\t++leftSize;\r\n\t\t\t\t++left;\r\n\t\t\t\t++right;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.agentTree[node].left = node + 1;\r\n            this.agentTree[node].right = node + 2 * leftSize;\r\n\r\n            this.buildAgentTreeRecursive(begin, left, this.agentTree[node].left);\r\n            this.buildAgentTreeRecursive(left, end, this.agentTree[node].right);\r\n\t\t}\r\n    }\r\n    \r\n\r\n\tbuildObstacleTreeRecursive(obstacles: Obstacle[]) {\r\n\t\tif (obstacles.length == 0) {\r\n\t\t\treturn null;\r\n        } \r\n        else {\r\n\t\t\tlet node = new ObstacleTreeNode();\r\n\t\t\tlet optimalSplit = 0;\r\n            let minLeft = obstacles.length;\r\n            let minRight = minLeft;\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < obstacles.length; ++i) {\r\n\t\t\t\tlet leftSize = 0;\r\n\t\t\t\tlet rightSize = 0;\r\n\t\t\t\t\r\n\t\t\t\tlet obstacleI1 = obstacles[i];\r\n\t\t\t\tlet obstacleI2 = obstacleI1.next;\r\n\t\t\t\t\r\n\t\t\t\tfor (let j = 0; j < obstacles.length; j++) {\r\n\t\t\t\t\tif (i == j) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet obstacleJ1 = obstacles[j];\r\n\t\t\t\t\tlet obstacleJ2 = obstacleJ1.next;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet j1LeftOfI = RVOMath.leftOf(obstacleI1.point, obstacleI2.point, obstacleJ1.point);\r\n                    let j2LeftOfI = RVOMath.leftOf(obstacleI1.point, obstacleI2.point, obstacleJ2.point);\r\n\t\t\t\t\t\r\n                    if (j1LeftOfI >= -RVOMath.RVO_EPSILON && j2LeftOfI >= -RVOMath.RVO_EPSILON) {\r\n                        ++leftSize;\r\n                    }\r\n                    else if (j1LeftOfI <= RVOMath.RVO_EPSILON && j2LeftOfI <= RVOMath.RVO_EPSILON) {\r\n                        ++rightSize;\r\n                    }\r\n                    else {\r\n                        ++leftSize;\r\n                        ++rightSize;\r\n                    }\r\n                    \r\n                    let fp1 = new FloatPair(Math.max(leftSize, rightSize), Math.min(leftSize, rightSize));\r\n                    let fp2 = new FloatPair(Math.max(minLeft, minRight), Math.min(minLeft, minRight));\r\n                    \r\n                    if (fp1.bigEqualThan(fp2)) {\r\n                    \tbreak;\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet fp1 = new FloatPair(Math.max(leftSize, rightSize), Math.min(leftSize, rightSize));\r\n\t\t\t\tlet fp2 = new FloatPair(Math.max(minLeft, minRight), Math.min(minLeft, minRight));\r\n\t\t\t\t\r\n\t\t\t\tif (fp1.lessThan(fp2)) {\r\n\t\t\t\t\tminLeft = leftSize;\r\n\t\t\t\t\tminRight = rightSize;\r\n\t\t\t\t\toptimalSplit = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t{\r\n                /* Build split node. */\r\n\t\t\t\tlet leftObstacles: Obstacle[] = [];\r\n                for (let n = 0; n < minLeft; ++n) leftObstacles.push(null);\r\n                \r\n                let rightObstacles: Obstacle[] = [];\r\n                for (let n = 0; n < minRight; ++n) rightObstacles.push(null);\r\n\r\n                let leftCounter = 0;\r\n                let rightCounter = 0;\r\n                let i = optimalSplit;\r\n\r\n                let obstacleI1 = obstacles[i];\r\n                let obstacleI2 = obstacleI1.next;\r\n\r\n                for (let j = 0; j < obstacles.length; ++j) {\r\n                    if (i == j) {\r\n                        continue;\r\n                    }\r\n\r\n                    let obstacleJ1 = obstacles[j];\r\n                    let obstacleJ2 = obstacleJ1.next;\r\n\r\n                    let j1LeftOfI = RVOMath.leftOf(obstacleI1.point, obstacleI2.point, obstacleJ1.point);\r\n                    let j2LeftOfI = RVOMath.leftOf(obstacleI1.point, obstacleI2.point, obstacleJ2.point);\r\n\r\n                    if (j1LeftOfI >= -RVOMath.RVO_EPSILON && j2LeftOfI >= -RVOMath.RVO_EPSILON) {\r\n                        leftObstacles[leftCounter++] = obstacles[j];\r\n                    }\r\n                    else if (j1LeftOfI <= RVOMath.RVO_EPSILON && j2LeftOfI <= RVOMath.RVO_EPSILON) {\r\n                        rightObstacles[rightCounter++] = obstacles[j];\r\n                    }\r\n                    else {\r\n                        /* Split obstacle j. */\r\n                        let t = RVOMath.det(obstacleI2.point.minus(obstacleI1.point), obstacleJ1.point.minus(obstacleI1.point)) / \r\n                        \tRVOMath.det(obstacleI2.point.minus(obstacleI1.point), obstacleJ1.point.minus(obstacleJ2.point));\r\n\r\n                        let splitpoint = obstacleJ1.point.plus( (obstacleJ2.point.minus(obstacleJ1.point)).scale(t) );\r\n\r\n                        let newObstacle = new Obstacle();\r\n                        newObstacle.point = splitpoint;\r\n                        newObstacle.previous = obstacleJ1;\r\n                        newObstacle.next = obstacleJ2;\r\n                        newObstacle.convex = true;\r\n                        newObstacle.direction = obstacleJ1.direction;\r\n\r\n                        newObstacle.id = Simulator.instance.obstacles.length;\r\n\r\n                        Simulator.instance.obstacles.push(newObstacle);\r\n\r\n                        obstacleJ1.next = newObstacle;\r\n                        obstacleJ2.previous = newObstacle;\r\n\r\n                        if (j1LeftOfI > 0.0) {\r\n                            leftObstacles[leftCounter++] = obstacleJ1;\r\n                            rightObstacles[rightCounter++] = newObstacle;\r\n                        }\r\n                        else {\r\n                            rightObstacles[rightCounter++] = obstacleJ1;\r\n                            leftObstacles[leftCounter++] = newObstacle;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                node.obstacle = obstacleI1;\r\n                node.left = this.buildObstacleTreeRecursive(leftObstacles);\r\n                node.right = this.buildObstacleTreeRecursive(rightObstacles);\r\n                return node;\r\n            }\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tqueryAgentTreeRecursive(agent: Agent, rangeSq: number, node: number) {\r\n\t\tif (this.agentTree[node].end - this.agentTree[node].begin <= this.MAX_LEAF_SIZE) {\r\n            for (let i = this.agentTree[node].begin; i < this.agentTree[node].end; ++i) {\r\n                rangeSq = agent.insertAgentNeighbor(this.agents[i], rangeSq);\r\n            }\r\n        }\r\n        else {\r\n            let distSqLeft = RVOMath.sqr(Math.max(0, this.agentTree[this.agentTree[node].left].minX - agent.position_.x)) + \r\n\t            RVOMath.sqr(Math.max(0, agent.position_.x - this.agentTree[this.agentTree[node].left].maxX)) + \r\n\t            RVOMath.sqr(Math.max(0, this.agentTree[this.agentTree[node].left].minY - agent.position_.y)) + \r\n\t            RVOMath.sqr(Math.max(0, agent.position_.y - this.agentTree[this.agentTree[node].left].maxY));\r\n\r\n            let distSqRight = RVOMath.sqr(Math.max(0, this.agentTree[this.agentTree[node].right].minX - agent.position_.x)) +\r\n\t            RVOMath.sqr(Math.max(0, agent.position_.x - this.agentTree[this.agentTree[node].right].maxX)) +\r\n\t            RVOMath.sqr(Math.max(0, this.agentTree[this.agentTree[node].right].minY - agent.position_.y)) +\r\n\t            RVOMath.sqr(Math.max(0, agent.position_.y - this.agentTree[this.agentTree[node].right].maxY));\r\n\r\n            if (distSqLeft < distSqRight) {\r\n                if (distSqLeft < rangeSq) {\r\n                    rangeSq = this.queryAgentTreeRecursive(agent, rangeSq, this.agentTree[node].left);\r\n\r\n                    if (distSqRight < rangeSq) {\r\n                        rangeSq = this.queryAgentTreeRecursive(agent, rangeSq, this.agentTree[node].right);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (distSqRight < rangeSq) {\r\n                    rangeSq = this.queryAgentTreeRecursive(agent, rangeSq, this.agentTree[node].right);\r\n\r\n                    if (distSqLeft < rangeSq) {\r\n                        rangeSq = this.queryAgentTreeRecursive(agent, rangeSq, this.agentTree[node].left);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return rangeSq;\r\n\t}\r\n\t\r\n\t// pass ref range\r\n\tqueryObstacleTreeRecursive(agent: Agent, rangeSq: number, node: ObstacleTreeNode) {\r\n        if (node == null) {\r\n            return rangeSq;\r\n        }\r\n        else {\r\n            let obstacle1 = node.obstacle;\r\n            let obstacle2 = obstacle1.next;\r\n\r\n            let agentLeftOfLine = RVOMath.leftOf(obstacle1.point, obstacle2.point, agent.position_);\r\n\r\n            rangeSq = this.queryObstacleTreeRecursive(agent, rangeSq, (agentLeftOfLine >= 0 ? node.left : node.right));\r\n\r\n            let distSqLine = RVOMath.sqr(agentLeftOfLine) / RVOMath.absSq(obstacle2.point.minus(obstacle1.point));\r\n\r\n            if (distSqLine < rangeSq)\r\n            {\r\n                if (agentLeftOfLine < 0)\r\n                {\r\n                    /*\r\n                     * Try obstacle at this node only if is on right side of\r\n                     * obstacle (and can see obstacle).\r\n                     */\r\n                    agent.insertObstacleNeighbor(node.obstacle, rangeSq);\r\n                }\r\n\r\n                /* Try other side of line. */\r\n                this.queryObstacleTreeRecursive(agent, rangeSq, (agentLeftOfLine >= 0 ? node.right : node.left));\r\n            }\r\n            return rangeSq;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    queryVisibilityRecursive(q1: Vector2, q2: Vector2, radius: number, node: ObstacleTreeNode) {\r\n        if (node == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            let obstacle1 = node.obstacle;\r\n            let obstacle2 = obstacle1.next;\r\n\r\n            let q1LeftOfI = RVOMath.leftOf(obstacle1.point, obstacle2.point, q1);\r\n            let q2LeftOfI = RVOMath.leftOf(obstacle1.point, obstacle2.point, q2);\r\n            let invLengthI = 1.0 / RVOMath.absSq(obstacle2.point.minus(obstacle1.point));\r\n\r\n            if (q1LeftOfI >= 0 && q2LeftOfI >= 0)\r\n            {\r\n                return this.queryVisibilityRecursive(q1, q2, radius, node.left) && ((RVOMath.sqr(q1LeftOfI) * invLengthI >= RVOMath.sqr(radius) && RVOMath.sqr(q2LeftOfI) * invLengthI >= RVOMath.sqr(radius)) || this.queryVisibilityRecursive(q1, q2, radius, node.right));\r\n            }\r\n            else if (q1LeftOfI <= 0 && q2LeftOfI <= 0)\r\n            {\r\n                return this.queryVisibilityRecursive(q1, q2, radius, node.right) && ((RVOMath.sqr(q1LeftOfI) * invLengthI >= RVOMath.sqr(radius) && RVOMath.sqr(q2LeftOfI) * invLengthI >= RVOMath.sqr(radius)) || this.queryVisibilityRecursive(q1, q2, radius, node.left));\r\n            }\r\n            else if (q1LeftOfI >= 0 && q2LeftOfI <= 0)\r\n            {\r\n                /* One can see through obstacle from left to right. */\r\n                return this.queryVisibilityRecursive(q1, q2, radius, node.left) && this.queryVisibilityRecursive(q1, q2, radius, node.right);\r\n            }\r\n            else\r\n            {\r\n                let point1LeftOfQ = RVOMath.leftOf(q1, q2, obstacle1.point);\r\n                let point2LeftOfQ = RVOMath.leftOf(q1, q2, obstacle2.point);\r\n                let invLengthQ = 1.0 / RVOMath.absSq(q2.minus(q1));\r\n\r\n                return (point1LeftOfQ * point2LeftOfQ >= 0 && RVOMath.sqr(point1LeftOfQ) * invLengthQ > RVOMath.sqr(radius) && RVOMath.sqr(point2LeftOfQ) * invLengthQ > RVOMath.sqr(radius) && this.queryVisibilityRecursive(q1, q2, radius, node.left) && this.queryVisibilityRecursive(q1, q2, radius, node.right));\r\n            }\r\n        }\r\n    }\r\n}        "]}