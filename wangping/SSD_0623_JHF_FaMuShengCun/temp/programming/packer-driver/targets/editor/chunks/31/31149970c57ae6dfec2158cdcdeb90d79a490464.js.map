{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/RVO/Agent.ts"],"names":["Agent","KeyValuePair","Line","RVOMath","Vector2","agentNeighbors_","obstaclNeighbors_","orcaLines_","position_","prefVelocity_","velocity_","id","maxNeighbors_","maxSpeed_","_neighborDist","radius_","timeHorizon","timeHorizonObst","newVelocity_","mass","neighborDist","value","computeNeighbors","sim","length","rangeSq","kdTree","computeObstacleNeighbors","computeAgentNeighbors","computeNewVelocity","dt","orcaLines","invTimeHorizonObst","i","obstacle1","obstacle2","next","relativePosition1","point","minus","relativePosition2","alreadyCovered","j","det","scale","direction","RVO_EPSILON","distSq1","absSq","distSq2","radiusSq","sqr","obstacleVector","s","multiply","distSqLine","line","convex","normalize","y","x","push","leftLegDirection","rightLegDirection","leg1","Math","sqrt","leg2","leftNeighbor","previous","isLeftLegForeign","isRightLegForeign","leftCutoff","rightCutoff","cutoffVec","t","tLeft","tRight","unitW","plus","distSqCutoff","Infinity","distSqLeft","distSqRight","aux","numObstLines","invTimeHorizon","other","relativePosition","massRatio","neighborMassRatio","velocityOpt","neighborVelocityOpt","relativeVelocity","distSq","combinedRadius","combinedRadiusSq","u","w","wLengthSq","dotProduct1","wLength","leg","dotProduct2","invTimeStep","abs","lineFail","linearProgram2","linearProgram3","insertAgentNeighbor","agent","key","insertObstacleNeighbor","obstacle","nextObstacle","distSqPointLineSegment","update","copy","linearProgram1","lines","lineNo","radius","optVelocity","directionOpt","result","dotProduct","discriminant","sqrtDiscriminant","denominator","numerator","min","max","tempResult","clone","beginLine","distance","projLines","ii","determinant"],"mappings":"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","sourcesContent":["import { KeyValuePair, Line, Obstacle, RVOMath, Vector2 } from \"./Common\";\r\nimport { Simulator } from \"./Simulator\";\r\n\r\n\r\nexport class Agent {\r\n    agentNeighbors_: KeyValuePair<number, Agent>[] = [];\r\n    obstaclNeighbors_: KeyValuePair<number, Obstacle>[] = [];\r\n    orcaLines_: Line[] = [];\r\n    position_: Vector2 = new Vector2(0, 0);\r\n    prefVelocity_: Vector2 = new Vector2(0, 0);\r\n    velocity_: Vector2 = new Vector2(0, 0);\r\n    id: number = 0;\r\n    maxNeighbors_: number = 0;\r\n    maxSpeed_: number = 0.0;\r\n    private _neighborDist: number = 0.0;\r\n    public get neighborDist(): number {\r\n        return this._neighborDist;\r\n    }\r\n    public set neighborDist(value: number) {\r\n        this._neighborDist = value;\r\n    }\r\n    radius_: number = 0.0;\r\n    timeHorizon: number = 0.0;\r\n    timeHorizonObst: number = 0.0;\r\n    newVelocity_: Vector2 = new Vector2(0, 0);\r\n    mass: number = 1;\r\n\r\n\r\n    computeNeighbors(sim: Simulator) {\r\n        this.obstaclNeighbors_.length = 0;\r\n        let rangeSq = (this.timeHorizonObst * this.maxSpeed_ + this.radius_) ** 2;\r\n        sim.kdTree.computeObstacleNeighbors(this, rangeSq);\r\n\r\n        this.agentNeighbors_.length = 0;\r\n\r\n        if (this.maxNeighbors_ > 0) {\r\n            rangeSq = this.neighborDist ** 2;\r\n            rangeSq = sim.kdTree.computeAgentNeighbors(this, rangeSq);\r\n        }\r\n    }\r\n\r\n    /* Search for the best new velocity. */\r\n    computeNewVelocity(dt: number) {\r\n        this.orcaLines_.length = 0;\r\n        let orcaLines = this.orcaLines_;\r\n\r\n        let invTimeHorizonObst = 1.0 / this.timeHorizonObst;\r\n\r\n        /* Create obstacle ORCA lines. */\r\n        for (let i = 0; i < this.obstaclNeighbors_.length; ++i) {\r\n            let obstacle1 = this.obstaclNeighbors_[i].value;\r\n            let obstacle2 = obstacle1.next;\r\n\r\n            let relativePosition1 = obstacle1.point.minus(this.position_);\r\n            let relativePosition2 = obstacle2.point.minus(this.position_);\r\n\r\n            /* \r\n             * Check if velocity obstacle of obstacle is already taken care of by\r\n             * previously constructed obstacle ORCA lines.\r\n             */\r\n            let alreadyCovered = false;\r\n\r\n            for (let j = 0; j < orcaLines.length; ++j) {\r\n                if (RVOMath.det(relativePosition1.scale(invTimeHorizonObst).minus(orcaLines[j].point), orcaLines[j].direction) - invTimeHorizonObst * this.radius_ >= -RVOMath.RVO_EPSILON\r\n                    && RVOMath.det(relativePosition2.scale(invTimeHorizonObst).minus(orcaLines[j].point), orcaLines[j].direction) - invTimeHorizonObst * this.radius_ >= -RVOMath.RVO_EPSILON) {\r\n\r\n                    alreadyCovered = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (alreadyCovered) {\r\n                continue;\r\n            }\r\n\r\n            /* Not yet covered. Check for collisions. */\r\n\r\n            let distSq1 = RVOMath.absSq(relativePosition1);\r\n            let distSq2 = RVOMath.absSq(relativePosition2);\r\n\r\n            let radiusSq = RVOMath.sqr(this.radius_);\r\n\r\n            let obstacleVector = obstacle2.point.minus(obstacle1.point);\r\n            let s = relativePosition1.scale(-1).multiply(obstacleVector) / RVOMath.absSq(obstacleVector);\r\n            let distSqLine = RVOMath.absSq(relativePosition1.scale(-1).minus(obstacleVector.scale(s)));\r\n\r\n            let line = new Line();\r\n            if (s < 0 && distSq1 <= radiusSq) {\r\n                /* Collision with left vertex. Ignore if non-convex. */\r\n                if (obstacle1.convex) {\r\n                    line.point = new Vector2(0, 0);\r\n                    line.direction = RVOMath.normalize(new Vector2(-relativePosition1.y, relativePosition1.x));\r\n                    orcaLines.push(line);\r\n                }\r\n                continue;\r\n            }\r\n            else if (s > 1 && distSq2 <= radiusSq) {\r\n                /* Collision with right vertex. Ignore if non-convex \r\n                 * or if it will be taken care of by neighoring obstace */\r\n                if (obstacle2.convex && RVOMath.det(relativePosition2, obstacle2.direction) >= 0) {\r\n                    line.point = new Vector2(0, 0);\r\n                    line.direction = RVOMath.normalize(new Vector2(-relativePosition2.y, relativePosition2.x));\r\n                    orcaLines.push(line);\r\n                }\r\n                continue;\r\n            }\r\n            else if (s >= 0 && s <= 1 && distSqLine <= radiusSq) {\r\n                /* Collision with obstacle segment. */\r\n                line.point = new Vector2(0, 0);\r\n                line.direction = obstacle1.direction.scale(-1);\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n\r\n            /* \r\n             * No collision.  \r\n             * Compute legs. When obliquely viewed, both legs can come from a single\r\n             * vertex. Legs extend cut-off line when nonconvex vertex.\r\n             */\r\n            let leftLegDirection: Vector2, rightLegDirection: Vector2;\r\n\r\n            if (s < 0 && distSqLine <= radiusSq) {\r\n                /*\r\n                 * Obstacle viewed obliquely so that left vertex\r\n                 * defines velocity obstacle.\r\n                 */\r\n                if (!obstacle1.convex) {\r\n                    /* Ignore obstacle. */\r\n                    continue;\r\n                }\r\n\r\n                obstacle2 = obstacle1;\r\n\r\n                let leg1 = Math.sqrt(distSq1 - radiusSq);\r\n                leftLegDirection = (new Vector2(relativePosition1.x * leg1 - relativePosition1.y * this.radius_, relativePosition1.x * this.radius_ + relativePosition1.y * leg1)).scale(1 / distSq1);\r\n                rightLegDirection = (new Vector2(relativePosition1.x * leg1 + relativePosition1.y * this.radius_, -relativePosition1.x * this.radius_ + relativePosition1.y * leg1)).scale(1 / distSq1);\r\n            }\r\n            else if (s > 1 && distSqLine <= radiusSq) {\r\n                /*\r\n                 * Obstacle viewed obliquely so that\r\n                 * right vertex defines velocity obstacle.\r\n                 */\r\n                if (!obstacle2.convex) {\r\n                    /* Ignore obstacle. */\r\n                    continue;\r\n                }\r\n\r\n                obstacle1 = obstacle2;\r\n\r\n                let leg2 = Math.sqrt(distSq2 - radiusSq);\r\n                leftLegDirection = (new Vector2(relativePosition2.x * leg2 - relativePosition2.y * this.radius_, relativePosition2.x * this.radius_ + relativePosition2.y * leg2)).scale(1 / distSq2);\r\n                rightLegDirection = (new Vector2(relativePosition2.x * leg2 + relativePosition2.y * this.radius_, -relativePosition2.x * this.radius_ + relativePosition2.y * leg2)).scale(1 / distSq2);\r\n            }\r\n            else {\r\n                /* Usual situation. */\r\n                if (obstacle1.convex) {\r\n                    let leg1 = Math.sqrt(distSq1 - radiusSq);\r\n                    leftLegDirection = (new Vector2(relativePosition1.x * leg1 - relativePosition1.y * this.radius_, relativePosition1.x * this.radius_ + relativePosition1.y * leg1)).scale(1 / distSq1);\r\n                }\r\n                else {\r\n                    /* Left vertex non-convex; left leg extends cut-off line. */\r\n                    leftLegDirection = obstacle1.direction.scale(-1);\r\n                }\r\n\r\n                if (obstacle2.convex) {\r\n                    let leg2 = Math.sqrt(distSq2 - radiusSq);\r\n                    rightLegDirection = (new Vector2(relativePosition2.x * leg2 + relativePosition2.y * this.radius_, -relativePosition2.x * this.radius_ + relativePosition2.y * leg2)).scale(1 / distSq2);\r\n                }\r\n                else {\r\n                    /* Right vertex non-convex; right leg extends cut-off line. */\r\n                    rightLegDirection = obstacle1.direction;\r\n                }\r\n            }\r\n\r\n            /* \r\n             * Legs can never point into neighboring edge when convex vertex,\r\n             * take cutoff-line of neighboring edge instead. If velocity projected on\r\n             * \"foreign\" leg, no constraint is added. \r\n             */\r\n\r\n            let leftNeighbor = obstacle1.previous;\r\n\r\n            let isLeftLegForeign = false;\r\n            let isRightLegForeign = false;\r\n\r\n            if (obstacle1.convex && RVOMath.det(leftLegDirection, leftNeighbor.direction.scale(-1)) >= 0.0) {\r\n                /* Left leg points into obstacle. */\r\n                leftLegDirection = leftNeighbor.direction.scale(-1);\r\n                isLeftLegForeign = true;\r\n            }\r\n\r\n            if (obstacle2.convex && RVOMath.det(rightLegDirection, obstacle2.direction) <= 0.0) {\r\n                /* Right leg points into obstacle. */\r\n                rightLegDirection = obstacle2.direction;\r\n                isRightLegForeign = true;\r\n            }\r\n\r\n            /* Compute cut-off centers. */\r\n            let leftCutoff = obstacle1.point.minus(this.position_).scale(invTimeHorizonObst);\r\n            let rightCutoff = obstacle2.point.minus(this.position_).scale(invTimeHorizonObst);\r\n            let cutoffVec = rightCutoff.minus(leftCutoff);\r\n\r\n            /* Project current velocity on velocity obstacle. */\r\n\r\n            /* Check if current velocity is projected on cutoff circles. */\r\n            let t = (obstacle1 == obstacle2) ? 0.5 : this.velocity_.minus(leftCutoff).multiply(cutoffVec) / RVOMath.absSq(cutoffVec);\r\n            let tLeft = this.velocity_.minus(leftCutoff).multiply(leftLegDirection);\r\n            let tRight = this.velocity_.minus(rightCutoff).multiply(rightLegDirection);\r\n\r\n            if ((t < 0.0 && tLeft < 0.0) || (obstacle1 == obstacle2 && tLeft < 0.0 && tRight < 0.0)) {\r\n                /* Project on left cut-off circle. */\r\n                let unitW = RVOMath.normalize(this.velocity_.minus(leftCutoff));\r\n\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                line.point = leftCutoff.plus(unitW.scale(this.radius_ * invTimeHorizonObst));\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n            else if (t > 1.0 && tRight < 0.0) {\r\n                /* Project on right cut-off circle. */\r\n                let unitW = RVOMath.normalize(this.velocity_.minus(rightCutoff));\r\n\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                line.point = rightCutoff.plus(unitW.scale(this.radius_ * invTimeHorizonObst));\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n\r\n            /* \r\n             * Project on left leg, right leg, or cut-off line, whichever is closest\r\n             * to velocity.\r\n             */\r\n            let distSqCutoff = ((t < 0.0 || t > 1.0 || obstacle1 == obstacle2) ? Infinity : RVOMath.absSq(this.velocity_.minus(cutoffVec.scale(t).plus(leftCutoff))));\r\n            let distSqLeft = ((tLeft < 0.0) ? Infinity : RVOMath.absSq(this.velocity_.minus(leftLegDirection.scale(tLeft).plus(leftCutoff))));\r\n            let distSqRight = ((tRight < 0.0) ? Infinity : RVOMath.absSq(this.velocity_.minus(rightLegDirection.scale(tRight).plus(rightCutoff))));\r\n\r\n            if (distSqCutoff <= distSqLeft && distSqCutoff <= distSqRight) {\r\n                /* Project on cut-off line. */\r\n                line.direction = obstacle1.direction.scale(-1);\r\n                let aux = new Vector2(-line.direction.y, line.direction.x);\r\n                line.point = aux.scale(this.radius_ * invTimeHorizonObst).plus(leftCutoff);\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n            else if (distSqLeft <= distSqRight) {\r\n                /* Project on left leg. */\r\n                if (isLeftLegForeign) {\r\n                    continue;\r\n                }\r\n\r\n                line.direction = leftLegDirection;\r\n                let aux = new Vector2(-line.direction.y, line.direction.x);\r\n                line.point = aux.scale(this.radius_ * invTimeHorizonObst).plus(leftCutoff);\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n            else {\r\n                /* Project on right leg. */\r\n                if (isRightLegForeign) {\r\n                    continue;\r\n                }\r\n\r\n                line.direction = rightLegDirection.scale(-1);\r\n                let aux = new Vector2(-line.direction.y, line.direction.x);\r\n                line.point = aux.scale(this.radius_ * invTimeHorizonObst).plus(rightCutoff);\r\n                orcaLines.push(line);\r\n                continue;\r\n            }\r\n        }\r\n\r\n        let numObstLines = orcaLines.length;\r\n\r\n        let invTimeHorizon = 1.0 / this.timeHorizon;\r\n\r\n        /* Create agent ORCA lines. */\r\n        for (let i = 0; i < this.agentNeighbors_.length; ++i) {\r\n            let other = this.agentNeighbors_[i].value;\r\n\r\n            let relativePosition = other.position_.minus(this.position_);\r\n\r\n            // mass\r\n            let massRatio = (other.mass / (this.mass + other.mass));\r\n            let neighborMassRatio = (this.mass / (this.mass + other.mass));\r\n\r\n            let velocityOpt = (massRatio >= 0.5 ? (this.velocity_.minus(this.velocity_.scale(massRatio)).scale(2)) : this.prefVelocity_.plus(this.velocity_.minus(this.prefVelocity_).scale(massRatio * 2)));\r\n            let neighborVelocityOpt = (neighborMassRatio >= 0.5 ? other.velocity_.scale(2).scale(1 - neighborMassRatio) : (other.prefVelocity_.plus(other.velocity_.minus(other.prefVelocity_).scale(2 * neighborMassRatio))));\r\n\r\n            let relativeVelocity = velocityOpt.minus(neighborVelocityOpt);//this.velocity.minus(other.velocity);\r\n            let distSq = RVOMath.absSq(relativePosition);\r\n            let combinedRadius = this.radius_ + other.radius_;\r\n            let combinedRadiusSq = RVOMath.sqr(combinedRadius);\r\n\r\n            let line = new Line();\r\n            let u: Vector2;\r\n\r\n            if (distSq > combinedRadiusSq) {\r\n                /* No collision. */\r\n                let w = relativeVelocity.minus(relativePosition.scale(invTimeHorizon)); // Vector\r\n                /* Vector from cutoff center to relative velocity. */\r\n                let wLengthSq = RVOMath.absSq(w);\r\n\r\n                let dotProduct1 = w.multiply(relativePosition);\r\n\r\n                if (dotProduct1 < 0.0 && RVOMath.sqr(dotProduct1) > combinedRadiusSq * wLengthSq) {\r\n                    /* Project on cut-off circle. */\r\n                    let wLength = Math.sqrt(wLengthSq);\r\n                    let unitW = w.scale(1 / wLength);\r\n\r\n                    line.direction = new Vector2(unitW.y, -unitW.x);\r\n                    u = unitW.scale(combinedRadius * invTimeHorizon - wLength);\r\n                }\r\n                else {\r\n                    /* Project on legs. */\r\n                    let leg = Math.sqrt(distSq - combinedRadiusSq);\r\n\r\n                    if (RVOMath.det(relativePosition, w) > 0.0) {\r\n                        /* Project on left leg. */\r\n                        let aux = new Vector2(relativePosition.x * leg - relativePosition.y * combinedRadius, relativePosition.x * combinedRadius + relativePosition.y * leg);\r\n                        line.direction = aux.scale(1 / distSq);\r\n                    }\r\n                    else {\r\n                        /* Project on right leg. */\r\n                        let aux = new Vector2(relativePosition.x * leg + relativePosition.y * combinedRadius, -relativePosition.x * combinedRadius + relativePosition.y * leg);\r\n                        line.direction = aux.scale(-1 / distSq);\r\n                    }\r\n\r\n                    let dotProduct2 = relativeVelocity.multiply(line.direction);\r\n                    u = line.direction.scale(dotProduct2).minus(relativeVelocity);\r\n                }\r\n            }\r\n            else {\r\n                /* Collision. Project on cut-off circle of time timeStep. */\r\n                let invTimeStep = 1.0 / dt;\r\n\r\n                /* Vector from cutoff center to relative velocity. */\r\n                let w = relativeVelocity.minus(relativePosition.scale(invTimeStep));\r\n\r\n                let wLength = RVOMath.abs(w);\r\n                let unitW = w.scale(1 / wLength);\r\n\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                u = unitW.scale(combinedRadius * invTimeStep - wLength);\r\n            }\r\n\r\n\r\n            // line.point = u.scale(0.5).plus(this.velocity);\r\n            line.point = velocityOpt.plus(u.scale(massRatio));\r\n            orcaLines.push(line);\r\n        }\r\n\r\n        let lineFail = this.linearProgram2(orcaLines, this.maxSpeed_, this.prefVelocity_, false, this.newVelocity_);\r\n\r\n        if (lineFail < orcaLines.length) {\r\n            this.linearProgram3(orcaLines, numObstLines, lineFail, this.maxSpeed_, this.newVelocity_);\r\n        }\r\n    }\r\n\r\n    insertAgentNeighbor(agent: Agent, rangeSq: number) {\r\n        if (this != agent) {\r\n            let distSq = RVOMath.absSq(this.position_.minus(agent.position_));\r\n\r\n            if (distSq < rangeSq) {\r\n                if (this.agentNeighbors_.length < this.maxNeighbors_) {\r\n                    this.agentNeighbors_.push(new KeyValuePair(distSq, agent));\r\n                }\r\n                let i = this.agentNeighbors_.length - 1;\r\n                while (i != 0 && distSq < this.agentNeighbors_[i - 1].key) {\r\n                    this.agentNeighbors_[i] = this.agentNeighbors_[i - 1];\r\n                    --i;\r\n                }\r\n                this.agentNeighbors_[i] = new KeyValuePair<number, Agent>(distSq, agent);\r\n\r\n                if (this.agentNeighbors_.length == this.maxNeighbors_) {\r\n                    rangeSq = this.agentNeighbors_[this.agentNeighbors_.length - 1].key;\r\n                }\r\n            }\r\n        }\r\n        return rangeSq;\r\n    }\r\n\r\n    insertObstacleNeighbor(obstacle: Obstacle, rangeSq: number) {\r\n        let nextObstacle = obstacle.next;\r\n\r\n        let distSq = RVOMath.distSqPointLineSegment(obstacle.point, nextObstacle.point, this.position_);\r\n\r\n        if (distSq < rangeSq) {\r\n            this.obstaclNeighbors_.push(new KeyValuePair<number, Obstacle>(distSq, obstacle));\r\n\r\n            let i = this.obstaclNeighbors_.length - 1;\r\n            while (i != 0 && distSq < this.obstaclNeighbors_[i - 1].key) {\r\n                this.obstaclNeighbors_[i] = this.obstaclNeighbors_[i - 1];\r\n                --i;\r\n            }\r\n            this.obstaclNeighbors_[i] = new KeyValuePair<number, Obstacle>(distSq, obstacle);\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        this.velocity_.copy(this.newVelocity_);\r\n        this.position_.copy(this.position_.plus(this.velocity_.scale(dt)));\r\n    };\r\n\r\n    linearProgram1(lines: Line[], lineNo: number, radius: number, optVelocity: Vector2, directionOpt: boolean, result: Vector2) {\r\n        let dotProduct = lines[lineNo].point.multiply(lines[lineNo].direction);\r\n        let discriminant = RVOMath.sqr(dotProduct) + RVOMath.sqr(radius) - RVOMath.absSq(lines[lineNo].point);\r\n\r\n        if (discriminant < 0.0) {\r\n            /* Max speed circle fully invalidates line lineNo. */\r\n            return false;\r\n        }\r\n\r\n        let sqrtDiscriminant = Math.sqrt(discriminant);\r\n        let tLeft = -dotProduct - sqrtDiscriminant;\r\n        let tRight = -dotProduct + sqrtDiscriminant;\r\n\r\n        for (let i = 0; i < lineNo; ++i) {\r\n            let denominator = RVOMath.det(lines[lineNo].direction, lines[i].direction);\r\n            let numerator = RVOMath.det(lines[i].direction, lines[lineNo].point.minus(lines[i].point));\r\n\r\n            if (Math.abs(denominator) <= RVOMath.RVO_EPSILON) {\r\n                /* Lines lineNo and i are (almost) parallel. */\r\n                if (numerator < 0.0) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            let t = numerator / denominator;\r\n\r\n            if (denominator >= 0.0) {\r\n                /* Line i bounds line lineNo on the right. */\r\n                tRight = Math.min(tRight, t);\r\n            }\r\n            else {\r\n                /* Line i bounds line lineNo on the left. */\r\n                tLeft = Math.max(tLeft, t);\r\n            }\r\n\r\n            if (tLeft > tRight) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (directionOpt) {\r\n            if (optVelocity.multiply(lines[lineNo].direction) > 0.0) {\r\n                // Take right extreme\r\n                result.copy(lines[lineNo].point.plus(lines[lineNo].direction.scale(tRight)));\r\n            }\r\n            else {\r\n                // Take left extreme.\r\n                result.copy(lines[lineNo].point.plus(lines[lineNo].direction.scale(tLeft)));\r\n            }\r\n        }\r\n        else {\r\n            // Optimize closest point\r\n            let t = lines[lineNo].direction.multiply(optVelocity.minus(lines[lineNo].point));\r\n            if (t < tLeft) {\r\n                result.copy(lines[lineNo].point.plus(lines[lineNo].direction.scale(tLeft)));\r\n            }\r\n            else if (t > tRight) {\r\n                result.copy(lines[lineNo].point.plus(lines[lineNo].direction.scale(tRight)));\r\n            }\r\n            else {\r\n                result.copy(lines[lineNo].point.plus(lines[lineNo].direction.scale(t)));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    linearProgram2(lines: Line[], radius: number, optVelocity: Vector2, directionOpt: boolean, result: Vector2) {\r\n        // directionOpt 第一次为false，第二次为true，directionOpt主要用在 linearProgram1 里面\r\n        if (directionOpt) {\r\n            /* \r\n             * Optimize direction. Note that the optimization velocity is of unit\r\n             * length in this case.\r\n             */\r\n            result.copy(optVelocity.scale(radius));\r\n        }\r\n        else if (RVOMath.absSq(optVelocity) > RVOMath.sqr(radius)) {\r\n            /* Optimize closest point and outside circle. */\r\n            result.copy(RVOMath.normalize(optVelocity).scale(radius));\r\n        }\r\n        else {\r\n            /* Optimize closest point and inside circle. */\r\n            result.copy(optVelocity);\r\n        }\r\n\r\n        for (let i = 0; i < lines.length; ++i) {\r\n            if (RVOMath.det(lines[i].direction, lines[i].point.minus(result)) > 0.0) {\r\n                /* Result does not satisfy constraint i. Compute new optimal result. */\r\n                let tempResult = result.clone();\r\n                if (!this.linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) {\r\n                    result.copy(tempResult);\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return lines.length;\r\n    }\r\n\r\n    linearProgram3(lines: Line[], numObstLines: number, beginLine: number, radius: number, result: Vector2) {\r\n        let distance = 0.0;\r\n        // 遍历所有剩余ORCA线\r\n        for (let i = beginLine; i < lines.length; ++i) {\r\n            // 每一条 ORCA 线都需要精确的做出处理，distance 为 最大违规的速度\r\n            if (RVOMath.det(lines[i].direction, lines[i].point.minus(result)) > distance) {\r\n                /* Result does not satisfy constraint of line i. */\r\n                //std::vector<Line> projLines(lines.begin(), lines.begin() + numObstLines);\r\n                let projLines = []; // new List<Line>();\r\n                // 1.静态阻挡的orca线直接加到projLines中\r\n                for (let ii = 0; ii < numObstLines; ++ii) {\r\n                    projLines.push(lines[ii]);\r\n                }\r\n                // 2.动态阻挡的orca线需要重新计算line，从第一个非静态阻挡到当前的orca线\r\n                for (let j = numObstLines; j < i; ++j) {\r\n                    let line = new Line();\r\n\r\n                    let determinant = RVOMath.det(lines[i].direction, lines[j].direction);\r\n\r\n                    if (Math.abs(determinant) <= RVOMath.RVO_EPSILON) {\r\n                        /* Line i and line j are parallel. */\r\n                        if (lines[i].direction.multiply(lines[j].direction) > 0.0) {\r\n                            /* Line i and line j point in the same direction. */\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            /* Line i and line j point in opposite direction. */\r\n                            line.point = lines[i].point.plus(lines[j].point).scale(0.5);\r\n                        }\r\n                    }\r\n                    else {\r\n                        line.point = lines[i].point.plus(lines[i].direction.scale(RVOMath.det(lines[j].direction, lines[i].point.minus(lines[j].point)) / determinant));\r\n                    }\r\n\r\n                    line.direction = RVOMath.normalize(lines[j].direction.minus(lines[i].direction));\r\n                    projLines.push(line);\r\n                }\r\n\r\n                let tempResult = result.clone();\r\n                if (this.linearProgram2(projLines, radius, new Vector2(-lines[i].direction.y, lines[i].direction.x), true, result) < projLines.length) {\r\n                    /* This should in principle not happen.  The result is by definition\r\n                     * already in the feasible region of this linear program. If it fails,\r\n                     * it is due to small floating point error, and the current result is\r\n                     * kept.\r\n                     */\r\n                    result.copy(tempResult);\r\n                }\r\n\r\n                distance = RVOMath.det(lines[i].direction, lines[i].point.minus(result));\r\n            }\r\n        }\r\n    }\r\n}"]}