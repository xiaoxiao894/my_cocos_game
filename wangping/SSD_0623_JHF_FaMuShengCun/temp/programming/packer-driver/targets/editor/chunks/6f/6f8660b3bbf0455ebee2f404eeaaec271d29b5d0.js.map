{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/ElectricTower/ItemElectricTowerManager.ts"],"names":["_decorator","Animation","Color","Component","find","math","Node","ParticleSystem","Quat","tween","Vec3","DataManager","ccclass","property","ItemElectricTowerManager","_timeInterval","_timer","_bulletAttackTime","_speed","_lightingTimeInterval","_lightingTimer","isNew","isTower","monster","start","update","dt","monsters","Instance","searchTreeManager","getAttackTargets","wirePathNode","children","length","towerAni","isTowerAttack","node","parent","active","electricTowerAttackRange","i","name","push","pathPoints","map","child","worldPosition","clone","electricTower","electricTowerManager","createElectricTower","parentNode","light","getChildByName","shandian","setWorldPosition","setParent","seq","from","to","distance","moveTime","direction","subtract","normalize","then","easing","call","removeFromParent","delay","bulletAttackTimeInterval","dtAniNode","dianhua","dianqiu","dtAni","getComponent","play","monsterCount","dian","includes","neck","end","dir","len","dirN","look","fromViewUp","UP","rotX90","fromAxisAngle","RIGHT","toRadian","final","multiply","setWorldRotation","modelBaseLen","k","Math","max","s","scale","setScale","x","z","ps","stop","clear","startColor","color","a","monsterManager","killMonsters","val","onUpdate","r","g","b","onComplete","getRightmostMonster","stretchPointKeepPos","baseLen","yBase","zBase","y","yawY","toDegree","atan2","pitchZ","hypot","curEuler","worldRotation","getEulerAngles","rot","fromEuler","getScale","arr","rightmost","maxX","Infinity","c","worldPos"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Camera, Color, Component, find, Material, math, Mesh, MeshRenderer, Node, ParticleSystem, primitives, Quat, tween, utils, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ItemElectricTowerManager')\r\nexport class ItemElectricTowerManager extends Component {\r\n    @property(Node)\r\n    wirePathNode: Node = null;\r\n\r\n    // 多长时间发射一次\r\n    private _timeInterval = 0.8;\r\n    private _timer = 0.5;\r\n    private _bulletAttackTime = 1;\r\n    private _speed = 20;\r\n\r\n    private _lightingTimeInterval = 0.8;\r\n    private _lightingTimer = 0.5;\r\n\r\n    // 新建电塔\r\n    isNew = false;\r\n    isTower = false;\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    private monster = [];\r\n    update(dt: number) {\r\n        if (this.isNew) {\r\n            this.isNew = false;\r\n            this.isTower = true;\r\n            const monsters = DataManager.Instance.searchTreeManager.getAttackTargets(this.wirePathNode.children[this.wirePathNode.children.length - 1], 30, 360);\r\n            this.towerAni(monsters, 2.5);\r\n        }\r\n\r\n        if (!DataManager.Instance.isTowerAttack || !this.wirePathNode || this.wirePathNode.children.length <= 0 || !this.node.parent.active || !this.node.active) return;\r\n\r\n        const electricTowerAttackRange = DataManager.Instance.electricTowerAttackRange || 15;\r\n        const monsters = DataManager.Instance.searchTreeManager.getAttackTargets(this.wirePathNode.children[this.wirePathNode.children.length - 1], electricTowerAttackRange, 360);\r\n        this.towerAni(monsters, dt);\r\n    }\r\n\r\n    // 电塔动画\r\n    towerAni(monsters, dt) {\r\n        this.monster = [];\r\n        for (let i = 0; i < monsters.length; i++) {\r\n            if (monsters[i].name != \"Tree\") {\r\n                this.monster.push(monsters[i]);\r\n            }\r\n        }\r\n        if (this.monster.length <= 0) return;\r\n\r\n        this._timer += dt;\r\n        if (this._timer >= this._timeInterval) {\r\n            this._timer = 0;\r\n\r\n            const pathPoints = this.wirePathNode.children.map(child => child.worldPosition.clone());\r\n            if (pathPoints.length < 2) return;\r\n\r\n            const electricTower = DataManager.Instance.electricTowerManager.createElectricTower();\r\n            if (!electricTower) return;\r\n\r\n            const parentNode = find(\"THREE3DNODE/ElectricityCon\");\r\n            if (!parentNode) return;\r\n\r\n            const light = electricTower.getChildByName(\"Sphere Light\");\r\n            if (light) light.active = false;\r\n\r\n            const shandian = electricTower.getChildByName(\"Electricity-001\");\r\n            if (shandian) shandian.active = true;\r\n\r\n            electricTower.setWorldPosition(pathPoints[0]);\r\n            electricTower.setParent(parentNode);\r\n\r\n            let seq = tween(electricTower)\r\n\r\n            for (let i = 1; i < pathPoints.length; i++) {\r\n                const from = pathPoints[i - 1];\r\n                const to = pathPoints[i];\r\n                const distance = Vec3.distance(from, to);\r\n                const moveTime = distance / this._speed;\r\n\r\n                const direction = new Vec3();\r\n                Vec3.subtract(direction, to, from);\r\n                direction.normalize();\r\n\r\n                // const angleY = Math.atan2(direction.x, direction.z) * 180 / Math.PI;\r\n                // console.log(\"============================>\", angleY);\r\n                seq = seq.then(\r\n                    tween(electricTower)\r\n                        .to(moveTime, { worldPosition: to }, { easing: 'linear' })\r\n                        .call(() => {\r\n                            // 若需要旋转，设置欧拉角\r\n                            // let snappedAngle = Math.round(angleY / 90) * 90;\r\n                            // electricTower.setRotationFromEuler(new Vec3(0, snappedAngle, 0));\r\n\r\n                            // electricTower.setRotationFromEuler(new Vec3(0, angleY, 0));\r\n                        })\r\n                );\r\n            }\r\n            seq = seq.call(() => {\r\n                if (electricTower) electricTower.removeFromParent();\r\n            })\r\n            seq.start();\r\n        }\r\n\r\n        this._lightingTimer += dt;\r\n        if (this._lightingTimer >= this._lightingTimeInterval) {\r\n            this._lightingTimer = 0;\r\n\r\n            const pathPoints = this.wirePathNode.children.map(child => child.worldPosition.clone());\r\n            if (pathPoints.length < 2) return;\r\n\r\n            const electricTower = DataManager.Instance.electricTowerManager.createElectricTower();\r\n            if (!electricTower) return;\r\n\r\n            const parentNode = find(\"THREE3DNODE/ElectricityCon\");\r\n            if (!parentNode) return;\r\n\r\n            const light = electricTower.getChildByName(\"Sphere Light\");\r\n            if (light) light.active = true;\r\n\r\n            const shandian = electricTower.getChildByName(\"Electricity-001\");\r\n            if (shandian) shandian.active = false;\r\n\r\n            electricTower.setWorldPosition(pathPoints[0]);\r\n            electricTower.setParent(parentNode);\r\n\r\n            let seq = tween(electricTower)\r\n                .delay(0.1);\r\n\r\n            for (let i = 1; i < pathPoints.length; i++) {\r\n                const from = pathPoints[i - 1];\r\n                const to = pathPoints[i];\r\n                const distance = Vec3.distance(from, to);\r\n                const moveTime = distance / this._speed;\r\n\r\n                const direction = new Vec3();\r\n                Vec3.subtract(direction, to, from);\r\n                direction.normalize();\r\n\r\n                // const angleY = Math.atan2(direction.x, direction.z) * 180 / Math.PI;\r\n                // console.log(\"============================>\", angleY);\r\n                seq = seq.then(\r\n                    tween(electricTower)\r\n                        .to(moveTime, { worldPosition: to }, { easing: 'linear' })\r\n                        .call(() => {\r\n                            // 若需要旋转，设置欧拉角\r\n                            // let snappedAngle = Math.round(angleY / 90) * 90;\r\n                            // electricTower.setRotationFromEuler(new Vec3(0, snappedAngle, 0));\r\n\r\n                            // electricTower.setRotationFromEuler(new Vec3(0, angleY, 0));\r\n                        })\r\n                );\r\n            }\r\n            seq = seq.call(() => {\r\n                if (electricTower) electricTower.removeFromParent();\r\n            })\r\n            seq.start();\r\n        }\r\n\r\n        this._bulletAttackTime += dt;\r\n        if (this._bulletAttackTime >= DataManager.Instance.bulletAttackTimeInterval) {\r\n            this._bulletAttackTime = 0;\r\n\r\n            const pathPoints = this.wirePathNode.children.map(child => child.worldPosition.clone());\r\n            if (pathPoints.length < 2) return;\r\n\r\n            // const electricTower = DataManager.Instance.electricTowerManager.createElectricTower();\r\n            // if (!electricTower) return;\r\n\r\n            // const parentNode = find(\"THREE3DNODE/ElectricityCon\");\r\n            // if (!parentNode) return;\r\n\r\n            // electricTower.setWorldPosition(pathPoints[pathPoints.length - 1]);\r\n            // electricTower.setParent(parentNode);\r\n\r\n            const node = this.node.getChildByName(\"Node\");\r\n            if (!node) return;\r\n\r\n            const dtAniNode = node.getChildByName(\"DTani\");\r\n            if (!dtAniNode) return;\r\n\r\n            const dianhua = dtAniNode.getChildByName(\"TX_dianhuan\");\r\n            if (!dianhua) return\r\n            dianhua.active = true;\r\n\r\n            const dianqiu = dtAniNode.getChildByName(\"TX_dianqiu\")\r\n            if (!dianqiu) return\r\n            dianqiu.active = true;\r\n\r\n            const electricTower = dtAniNode.getChildByName(\"TX_dian_v1\");\r\n            if (!electricTower) return;\r\n            electricTower.active = true;\r\n\r\n            const dtAni = dtAniNode.getComponent(Animation);\r\n            if (dtAni) {\r\n                dtAni.play(\"attackDT\")\r\n\r\n                // 播放动画，等待0.47秒执行下一次动画\r\n                // this.scheduleOnce(() => {\r\n                // const monsters = DataManager.Instance.gridSystem.getNearbyMonsterNodes(this.node.worldPosition, 18);\r\n                // 查找半径内的怪物\r\n                if (this.monster && this.monster.length > 0) {\r\n                    if (this.isTower) {\r\n                        this.isTower = false;\r\n\r\n                        let monsterCount = 0;\r\n                        for (let i = 0; i < dtAniNode.children.length; i++) {\r\n                            const dian = dtAniNode.children[i];\r\n                            if (dian.name.includes(\"TX_dian_\")) {\r\n                                dian.active = true;\r\n\r\n                                const monster = this.monster[monsterCount];\r\n                                if (!monster) break;\r\n\r\n                                monsterCount++;\r\n\r\n                                let neck = monster.children[0].getChildByName(\"hit Socket\");\r\n                                if (!neck) {\r\n                                    neck = monster.children[0].children[0].getChildByName(\"hit Socket\");\r\n                                }\r\n\r\n                                const start = dian.worldPosition;\r\n                                const end = neck.worldPosition;\r\n\r\n                                // 方向与长度\r\n                                const dir = new Vec3();\r\n                                Vec3.subtract(dir, end, start);\r\n                                const len = dir.length();\r\n\r\n                                if (len > 1e-5) {\r\n                                    const dirN = dir.clone().normalize();\r\n\r\n                                    const look = new Quat();\r\n                                    Quat.fromViewUp(look, dirN, Vec3.UP);\r\n\r\n                                    const rotX90 = new Quat();\r\n                                    Quat.fromAxisAngle(rotX90, Vec3.RIGHT, math.toRadian(90));\r\n\r\n                                    const final = new Quat();\r\n                                    Quat.multiply(final, look, rotX90);\r\n                                    dian.setWorldRotation(final);\r\n                                }\r\n\r\n                                // 模型原始高度\r\n                                const modelBaseLen = 1;\r\n\r\n                                const k = len / Math.max(1e-6, modelBaseLen);\r\n\r\n                                const s = dian.scale;\r\n                                dian.setScale(s.x, k / 3, s.z);\r\n\r\n                                const ps = dian.getComponent(ParticleSystem);\r\n                                if (!ps) return;\r\n\r\n                                // 重置粒子系统\r\n                                ps.stop();\r\n                                ps.clear();\r\n\r\n                                // 设置初始颜色\r\n                                const startColor = ps.startColor.color.clone();\r\n                                startColor.a = 255;\r\n                                ps.startColor.color = startColor;\r\n\r\n                                // 重新开始发射\r\n                                ps.play();\r\n\r\n                                DataManager.Instance.monsterManager.killMonsters([monster], end);\r\n\r\n                                // 用一个代理值做渐隐\r\n                                const val = { a: 255 };\r\n                                tween(val)\r\n                                    .to(0.3, { a: 0 }, {\r\n                                        onUpdate: () => {\r\n                                            ps.startColor.color = new Color(startColor.r, startColor.g, startColor.b, val.a);\r\n                                        },\r\n                                        onComplete: () => {\r\n                                            // 如果需要完全结束粒子\r\n                                            ps.stop();\r\n                                        }\r\n                                    })\r\n                                    .start();\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // let monster = this.monster[0];\r\n                        // if (DataManager.Instance.cameraGuiding) {\r\n                        let monster = this.getRightmostMonster(this.monster) ?? this.monster[0];\r\n                        // }\r\n\r\n                        let neck = monster.children[0].getChildByName(\"hit Socket\");\r\n                        if (!neck) {\r\n                            neck = monster.children[0].children[0].getChildByName(\"hit Socket\");\r\n                        }\r\n                        const start = electricTower.worldPosition;\r\n                        const end = neck.worldPosition;\r\n\r\n                        // 方向与长度\r\n                        const dir = new Vec3();\r\n                        Vec3.subtract(dir, end, start);\r\n                        const len = dir.length();\r\n\r\n                        if (len > 1e-5) {\r\n                            const dirN = dir.clone().normalize();\r\n\r\n                            const look = new Quat();\r\n                            Quat.fromViewUp(look, dirN, Vec3.UP);\r\n\r\n                            const rotX90 = new Quat();\r\n                            Quat.fromAxisAngle(rotX90, Vec3.RIGHT, math.toRadian(90));\r\n\r\n                            const final = new Quat();\r\n                            Quat.multiply(final, look, rotX90);\r\n                            electricTower.setWorldRotation(final);\r\n                        }\r\n\r\n                        // 模型原始高度\r\n                        const modelBaseLen = 1;\r\n\r\n                        const k = len / Math.max(1e-6, modelBaseLen);\r\n\r\n                        const s = electricTower.scale;\r\n                        electricTower.setScale(s.x, k / 3, s.z);\r\n\r\n                        const ps = electricTower.getComponent(ParticleSystem);\r\n                        if (!ps) return;\r\n\r\n                        // 重置粒子系统\r\n                        ps.stop();\r\n                        ps.clear();\r\n\r\n                        // 设置初始颜色\r\n                        const startColor = ps.startColor.color.clone();\r\n                        startColor.a = 255;\r\n                        ps.startColor.color = startColor;\r\n\r\n                        // 重新开始发射\r\n                        ps.play();\r\n\r\n                        DataManager.Instance.monsterManager.killMonsters([monster], end);\r\n\r\n                        // 用一个代理值做渐隐\r\n                        const val = { a: 255 };\r\n                        tween(val)\r\n                            .to(0.3, { a: 0 }, {\r\n                                onUpdate: () => {\r\n                                    ps.startColor.color = new Color(startColor.r, startColor.g, startColor.b, val.a);\r\n                                },\r\n                                onComplete: () => {\r\n                                    // 如果需要完全结束粒子\r\n                                    ps.stop();\r\n                                }\r\n                            })\r\n                            .start();\r\n                    }\r\n\r\n\r\n\r\n                    // electricTower.getComponent(ParticleSystem).startColor.color = new Color(255, 0, 0, 255)\r\n\r\n                    // tween(electricTower)\r\n                    //     .delay(0.4)\r\n                    //     .call(() => {\r\n\r\n\r\n                    //         DataManager.Instance.monsterManager.killMonsters([monster]);\r\n                    //     })\r\n                    //     .start();\r\n\r\n                    // 让 lineNode 连接 nodeA 和 nodeB\r\n                    // this.stretchPointKeepPos(electricTower, posA, posB, 1 /*baseLen*/, 0 /*yBase*/, 0 /*zBase*/);\r\n\r\n                    // const electricToweAni = electricTower.getComponent(Animation)\r\n                    // electricToweAni.play();\r\n                    // electricToweAni.once(Animation.EventType.FINISHED, () => {\r\n                    //     electricTower.active = false;\r\n                    //     DataManager.Instance.monsterManager.killMonsters([monster]);\r\n                    // })\r\n\r\n                    // const monsterPos = monster.worldPosition;\r\n                    // const distance = Vec3.distance(electricTower.worldPosition, monsterPos);\r\n                    // // const moveTime = distance / 20;\r\n                    // const light = electricTower.getChildByName(\"Sphere Light\");\r\n                    // if (light) light.active = false;\r\n\r\n                    // const electricity = electricTower.getChildByName(\"Electricity\");\r\n                    // if (electricity) electricity.active = true;\r\n\r\n                    // tween(electricTower)\r\n                    //     .to(.4, { worldPosition: monsterPos }, { easing: 'linear' })\r\n                    //     .call(() => {\r\n                    //         // 攻击到怪物， 怪物死亡\r\n                    //         DataManager.Instance.monsterManager.killMonsters([monster]);\r\n                    //         if (electricTower) electricTower.removeFromParent();\r\n                    //         // DataManager.Instance.electricTowerManager.onElectricTowerDead(electricTower);\r\n                    //     })\r\n                    //     .start();\r\n                }\r\n\r\n                // }, 0.27)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 保持节点当前位置不变，基于当前旋转仅更新 Y(左右) 和 Z(上下)，\r\n     * 让它指向目标；同时按 A-B 的距离拉伸 X 轴。\r\n     *\r\n     * @param node    要操作的节点（位置不改）\r\n     * @param start   起点世界坐标（用于长度计算）\r\n     * @param end     终点世界坐标（用于指向 & 长度计算）\r\n     * @param baseLen 节点在缩放(1,1,1)时 X 方向的世界长度，默认 1\r\n     * @param yBase   资源/初始朝向在 Y 轴上的基准偏移（度），默认 0\r\n     * @param zBase   资源/初始朝向在 Z 轴上的基准偏移（度），默认 0\r\n     */\r\n    stretchPointKeepPos(\r\n        node: Node,\r\n        start: Vec3,\r\n        end: Vec3,\r\n        baseLen: number = 1,\r\n        yBase: number = 0,\r\n        zBase: number = 0,\r\n    ) {\r\n        // 1) 不改位置：用“当前节点位置 → 终点”的方向来算旋转\r\n        const from = node.worldPosition;\r\n        const dir = new Vec3(end.x - from.x, end.y - from.y, end.z - from.z);\r\n        if (dir.length() < 1e-6) return; // 太近就不处理\r\n\r\n        // 2) 计算左右(Y)与上下(Z)\r\n        const yawY = math.toDegree(Math.atan2(dir.x, dir.z)) + yBase;                 // 左右\r\n        const pitchZ = math.toDegree(Math.atan2(dir.y, Math.hypot(dir.x, dir.z))) + zBase; // 上下\r\n\r\n        // 3) 仅替换 Y/Z，保留当前的 X（roll）\r\n        const curEuler = new Vec3();\r\n        node.worldRotation.getEulerAngles(curEuler); // 读取当前 X/Y/Z\r\n        const rot = new Quat();\r\n        Quat.fromEuler(rot, curEuler.x, yawY, pitchZ);\r\n        node.setWorldRotation(rot);\r\n\r\n        // 4) 按 A-B 距离拉伸 X 轴（与节点位置无关）\r\n        const len = Vec3.distance(start, end);\r\n        const s = node.getScale();\r\n        node.setScale(len / baseLen, s.y, s.z);\r\n    }\r\n\r\n    // 找到x轴最大的\r\n    getRightmostMonster(arr) {\r\n        if (!arr || arr.length === 0) return null;\r\n\r\n        let rightmost: Node = null;\r\n        let maxX = -Infinity;\r\n\r\n        for (let c = 0; c < arr.length; c++) {\r\n            const worldPos = arr[c].worldPosition;\r\n            if (worldPos.x > maxX) {\r\n                maxX = worldPos.x;\r\n                rightmost = arr[c];\r\n            }\r\n        }\r\n\r\n        return rightmost;\r\n    }\r\n}\r\n\r\n\r\n"]}