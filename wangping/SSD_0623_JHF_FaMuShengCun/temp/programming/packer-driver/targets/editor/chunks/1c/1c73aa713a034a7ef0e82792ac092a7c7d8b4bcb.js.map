{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Actor/PlayerManager.ts"],"names":["_decorator","Animation","Collider","Component","director","find","Mat4","Node","RigidBody","SkeletalAnimation","tween","Vec3","Actor","StateDefine","VirtualInput","DataManager","SoundManager","ccclass","property","requireComponent","PlayerManager","actor","_attackDuration","_attackTimer","_isAttacking","_isWalkAttack","_uncollectedWood","_hasGoldCoin","trees","_isAttackPlaying","_uncollectedIcon","start","Instance","player","node","getComponent","onDestroy","sceneManager","hitEffectPrefabPool","destroy","create","alloc","parent","getScene","addChild","active","onProjectileDead","free","update","deltaTime","isGetCoins","getWoods","currentState","Die","searchTreeManager","getAttackTargets","jackParent","getChildByName","playerJack","shanxing","length","hasMonsters","len","handleInput","isNormalAttacking","changState","Attack","Walk","inst","playRunBGM","stopRunBGM","jackParentAni","idleState","getState","isPlaying","play","jack","skeletalAnim","clipName","clips","name","state","pause","pauseAttackEffect","treeManager","affectedTrees","playAudio","_onAttackFinished","anim","txWalkAttack","walkingAttackEffects","_onWalkAttackFinished","x","horizontal","y","vertical","destForward","set","camNode","camRot","getWorldRotation","forward","right","transformQuat","normalize","moveDir","scaleAndAdd","z","dt","woodList","woodManager","getWood","backpack1","backpack2","backpack3","backpacks","findTargetBackpack","wood","matched","empty","backpack","children","child","playerPos","worldPosition","clone","maxDistanceXZ","allwoods","delayCounter","i","isValid","woodPos","dx","dz","distSqrXZ","push","targetBackpack","duration","controller","t","setParent","setWorldPosition","woodCollider","enabled","woodRigidBody","startRot","eulerAngles","endRot","delay","to","easing","onUpdate","oneMinusT","maxY","localPos","getPosition","localTarget","worldPos","getWorldPosition","worldRot","worldScale","getWorldScale","worldMat","fromRTS","worldTarget","transformMat4","control","Math","max","pos","lerpedEuler","call","finalWorldPos","scale","unlockPlot8","plot8","setScale","data","guideTargetList","item","plot","isDisplay"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AnimationClip, AnimationState, Collider, Component, director, find, instantiate, Mat4, Node, Pool, Quat, RigidBody, SkeletalAnimation, SkeletalAnimationComponent, tween, Vec3 } from 'cc';\r\nimport { Actor } from './Actor';\r\nimport { StateDefine } from './StateDefine';\r\nimport { VirtualInput } from '../Input/VirtuallInput';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { GridSystem } from '../Grid/GridSystem';\r\nimport { EntityTypeEnum } from '../Enum/Index';\r\nimport { SoundManager } from '../Common/SoundManager';\r\nconst { ccclass, property, requireComponent } = _decorator;\r\n\r\n@ccclass('PlayerManager')\r\n@requireComponent(Actor)\r\nexport class PlayerManager extends Component {\r\n    @property(Node)\r\n    monster: Node = null;\r\n\r\n    @property(Node)\r\n    coinTransitionCon: Node = null;\r\n\r\n    actor: Actor | null = null;\r\n\r\n    private _attackDuration = 0.48;\r\n    private _attackTimer = 0;\r\n    private _isAttacking = false;\r\n\r\n    private _isWalkAttack = false;\r\n    private _uncollectedWood: Node[] = [];\r\n\r\n    // 背包是否有金币\r\n    private _hasGoldCoin = false;\r\n\r\n    trees = null;\r\n    start() {\r\n        DataManager.Instance.player = this;\r\n\r\n        this.actor = this.node.getComponent(Actor);\r\n    }\r\n\r\n    onDestroy() {\r\n        DataManager.Instance.sceneManager.hitEffectPrefabPool.destroy();\r\n    }\r\n\r\n    create() {\r\n        if (!DataManager.Instance.sceneManager.hitEffectPrefabPool) return;\r\n        let node = DataManager.Instance.sceneManager.hitEffectPrefabPool.alloc();\r\n        if (node.parent == null) {\r\n            director.getScene().addChild(node);\r\n        }\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    onProjectileDead(node) {\r\n        node.active = false;\r\n        DataManager.Instance.sceneManager.hitEffectPrefabPool.free(node);\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if (DataManager.Instance.isGetCoins) {\r\n            // this.getCoin(deltaTime);\r\n        }\r\n        // 获取木材\r\n        this.getWoods(deltaTime);\r\n\r\n        if (this.actor.currentState === StateDefine.Die) return;\r\n\r\n        this.trees = DataManager.Instance.searchTreeManager.getAttackTargets(this.node, 4, 360, true);\r\n        const jackParent = this.node?.getChildByName(\"JackParent\");\r\n        const playerJack = jackParent?.getChildByName(\"Player_Jack\");\r\n        const shanxing = playerJack.getChildByName(\"shanxing\");\r\n        if (shanxing && this.trees && this.trees.length > 0) {\r\n            shanxing.active = true;\r\n        } else {\r\n            shanxing.active = false;\r\n        }\r\n        // 3.1   71\r\n        this.trees = DataManager.Instance.searchTreeManager.getAttackTargets(this.node, 3.5, 110, true);\r\n        const hasMonsters = this.trees && this.trees.length > 0;\r\n\r\n        const len = this.handleInput();\r\n\r\n        // 攻击时计时控制\r\n        if (this._isAttacking) {\r\n            this._attackTimer += deltaTime;\r\n            if (this._attackTimer >= this._attackDuration) {\r\n                this._isAttacking = false;\r\n                this._attackTimer = 0;\r\n                DataManager.Instance.isNormalAttacking = true;\r\n            }\r\n        }\r\n\r\n        // 攻击逻辑（触发一次）\r\n        if (!this._isAttacking && hasMonsters && DataManager.Instance.isNormalAttacking && len < 0.1) {\r\n            this._isAttacking = true;\r\n            this._attackTimer = 0;\r\n            DataManager.Instance.isNormalAttacking = false;\r\n            this.actor.changState(StateDefine.Attack);\r\n            // this.pauseAttackEffect(); // 可选：播放攻击特效\r\n\r\n        }\r\n\r\n        // === 动画状态管理 ===\r\n        if (!this._isAttacking) {\r\n            if (len > 0.1) {\r\n                this.actor.changState(StateDefine.Walk);\r\n                SoundManager.inst.playRunBGM();\r\n            } else {\r\n                SoundManager.inst.stopRunBGM();\r\n                if (hasMonsters) {\r\n                    this.actor.changState(StateDefine.Attack);\r\n\r\n                } else {\r\n                    // === 空闲状态动画处理（骨骼动画冻结一帧） ===\r\n                    const jackParent = this.node.getChildByName(\"JackParent\");\r\n                    const jackParentAni = jackParent?.getComponent(Animation);\r\n                    if (jackParentAni) {\r\n                        const idleState = jackParentAni.getState(\"idleA\");\r\n                        if (idleState && !idleState.isPlaying) {\r\n                            jackParentAni.play(\"idleA\");\r\n                        }\r\n                    }\r\n\r\n                    const jack = jackParent.getChildByName(\"Player_Jack\");\r\n                    const skeletalAnim = jack.getComponent(SkeletalAnimation);\r\n                    if (!skeletalAnim) return;\r\n\r\n                    const clipName = skeletalAnim.clips[0]?.name;\r\n                    if (!clipName) return;\r\n\r\n                    // 播放一次动画以初始化动画状态\r\n                    skeletalAnim.play(clipName);\r\n\r\n                    const state = skeletalAnim.getState(clipName);\r\n                    if (!state) return;\r\n\r\n                    state.update(0); // 强制立即应用该时间的骨骼姿势\r\n                    state.pause();\r\n                }\r\n            }\r\n        } else {\r\n            if (len > 0.1 && !hasMonsters) {\r\n                this.actor.changState(StateDefine.Walk);\r\n                this._isAttacking = false;\r\n                DataManager.Instance.isNormalAttacking = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 停顿攻击特效\r\n    pauseAttackEffect() {\r\n        // DataManager.Instance.soundManager.PlayerAttackSoundPlay();\r\n        DataManager.Instance.treeManager.affectedTrees(this.trees, true, this.node);\r\n\r\n        SoundManager.inst.playAudio(\"Sounds_famutou_rensheng\");\r\n\r\n    }\r\n\r\n    private _onAttackFinished(anim: Animation, state: AnimationState) {\r\n        if (state.name === \"TX_Attack\") {\r\n            const jackParent = this.node.getChildByName(\"JackParent\");\r\n            const jack = jackParent.getChildByName(\"Player_Jack\");\r\n            const txWalkAttack = jack.getChildByName(\"TX_attack\");\r\n            txWalkAttack.active = false;\r\n\r\n            if (this._isWalkAttack) {\r\n                this._isWalkAttack = false;\r\n                // this.walkingAttackEffects();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 走路攻击特效\r\n    private _isAttackPlaying = false;\r\n    walkingAttackEffects() {\r\n        if (this._isAttackPlaying) return;\r\n        this._isAttackPlaying = true;\r\n\r\n        DataManager.Instance.treeManager.affectedTrees(this.trees, true, this.node);\r\n    }\r\n\r\n    private _onWalkAttackFinished() {\r\n        this._isAttackPlaying = false;\r\n\r\n        const jackParent = this.node.getChildByName(\"JackParent\");\r\n        const jack = jackParent.getChildByName(\"jack\");\r\n        const txWalkAttack = jack.getChildByName(\"TX_walk_attack\");\r\n        txWalkAttack.active = false;\r\n    }\r\n\r\n    handleInput() {\r\n        const x = VirtualInput.horizontal;\r\n        const y = VirtualInput.vertical;\r\n\r\n        if (x === 0 && y === 0) {\r\n            this.actor.destForward.set(0, 0, 0);\r\n            return 0;\r\n        }\r\n\r\n        const camNode = find(\"Main Camera\");\r\n\r\n        // 获取摄像机的世界旋转（四元数）\r\n        const camRot = camNode.getWorldRotation();\r\n\r\n        // 从旋转计算 forward（z轴）和 right（x轴）\r\n        const forward = new Vec3(0, 0, -1);\r\n        const right = new Vec3(1, 0, 0);\r\n\r\n        Vec3.transformQuat(forward, forward, camRot);\r\n        Vec3.transformQuat(right, right, camRot);\r\n\r\n        // 只保留水平分量\r\n        forward.y = 0;\r\n        right.y = 0;\r\n        forward.normalize();\r\n        right.normalize();\r\n\r\n        // 将摇杆输入转换为世界方向\r\n        const moveDir = new Vec3();\r\n        Vec3.scaleAndAdd(moveDir, moveDir, right, x);    // x轴影响\r\n        Vec3.scaleAndAdd(moveDir, moveDir, forward, y); // y轴影响（注意：-y 表示前）\r\n\r\n        moveDir.normalize();\r\n        this.actor.destForward.set(moveDir.x, 0, moveDir.z);\r\n        return moveDir.length();\r\n    }\r\n\r\n    // 获取木桩\r\n    getWoods(dt) {\r\n        const woodList = DataManager.Instance.woodManager.getWood();\r\n        const player = this.node;\r\n\r\n        const backpack1 = player.getChildByName(\"Backpack1\");\r\n        const backpack2 = player.getChildByName(\"Backpack2\");\r\n        const backpack3 = player.getChildByName(\"Backpack3\");\r\n        const backpacks = [backpack1, backpack2, backpack3]\r\n\r\n        const findTargetBackpack = (wood: Node): Node | null => {\r\n            let matched: Node | null = null;\r\n            let empty: Node | null = null;\r\n\r\n            for (const backpack of backpacks) {\r\n                if (!backpack) continue;\r\n\r\n                const children = backpack.children;\r\n                if (children.length === 0 && !empty) {\r\n                    empty = backpack;\r\n                } else {\r\n                    for (const child of children) {\r\n                        if (child.name === wood.name) {\r\n                            matched = backpack;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (matched) break;\r\n            }\r\n\r\n            return matched || empty || backpacks[0];\r\n        }\r\n\r\n        const playerPos = player.worldPosition.clone();\r\n        const maxDistanceXZ = 33;\r\n        const allwoods: Node[] = [...woodList, ...this._uncollectedWood];\r\n        this._uncollectedWood = [];\r\n\r\n        let delayCounter = 0;\r\n\r\n        for (let i = 0; i < allwoods.length; i++) {\r\n            const wood = allwoods[i];\r\n            if (!wood || !wood.isValid) continue;\r\n\r\n            const woodPos = wood.worldPosition.clone();\r\n            const dx = woodPos.x - playerPos.x;\r\n            const dz = woodPos.z - playerPos.z;\r\n            const distSqrXZ = dx * dx + dz * dz;\r\n            if (distSqrXZ > maxDistanceXZ * maxDistanceXZ) {\r\n                this._uncollectedWood.push(wood);\r\n                continue;\r\n            }\r\n\r\n            const targetBackpack = findTargetBackpack(wood);\r\n            if (!targetBackpack) continue;\r\n\r\n            const start = woodPos;\r\n            const duration = 0.6;\r\n            const controller = { t: 0 };\r\n\r\n            wood.setParent(this.node.parent);\r\n            wood.setWorldPosition(start);\r\n\r\n            const woodCollider = wood.getComponent(Collider)\r\n            if (woodCollider) {\r\n                woodCollider.enabled = false;\r\n            }\r\n\r\n            const woodRigidBody = wood.getComponent(RigidBody);\r\n            if (woodRigidBody) {\r\n                woodRigidBody.enabled = false;\r\n            }\r\n\r\n            const startRot = wood.eulerAngles.clone(); // 初始角度\r\n            const endRot = new Vec3(0, 0, 90);           // 最终角度\r\n\r\n            tween(controller)\r\n                .delay(delayCounter * 0.05)\r\n                .to(duration, { t: 1 }, {\r\n                    easing: 'quadOut',\r\n                    onUpdate: () => {\r\n                        const t = controller.t;\r\n                        const oneMinusT = 1 - t;\r\n\r\n                        // 计算当前目标背包的堆叠高度\r\n                        let maxY = 0;\r\n                        for (const child of targetBackpack.children) {\r\n                            if (!child || !child.isValid) continue;\r\n                            const localPos = child.getPosition();\r\n                            if (localPos.y > maxY) {\r\n                                maxY = localPos.y;\r\n                            }\r\n                        }\r\n\r\n                        const localTarget = new Vec3(0, maxY + 0.5, 0);\r\n\r\n                        // 背包的世界变换矩阵\r\n                        const worldPos = targetBackpack.getWorldPosition();\r\n                        const worldRot = targetBackpack.getWorldRotation();\r\n                        const worldScale = targetBackpack.getWorldScale();\r\n                        const worldMat = new Mat4();\r\n                        Mat4.fromRTS(worldMat, worldRot, worldPos, worldScale);\r\n                        const worldTarget = Vec3.transformMat4(new Vec3(), localTarget, worldMat);\r\n\r\n                        // 控制点\r\n                        const control = new Vec3(\r\n                            (start.x + worldTarget.x) / 2,\r\n                            Math.max(start.y, worldTarget.y) + 2,\r\n                            (start.z + worldTarget.z) / 2\r\n                        );\r\n\r\n                        // 贝塞尔插值\r\n                        const pos = new Vec3(\r\n                            oneMinusT * oneMinusT * start.x + 2 * oneMinusT * t * control.x + t * t * worldTarget.x,\r\n                            oneMinusT * oneMinusT * start.y + 2 * oneMinusT * t * control.y + t * t * worldTarget.y,\r\n                            oneMinusT * oneMinusT * start.z + 2 * oneMinusT * t * control.z + t * t * worldTarget.z\r\n                        );\r\n\r\n                        wood.setWorldPosition(pos);\r\n\r\n                        // === 插值角度 ===\r\n                        const lerpedEuler = new Vec3(\r\n                            startRot.x * oneMinusT + endRot.x * t,\r\n                            startRot.y * oneMinusT + endRot.y * t,\r\n                            startRot.z * oneMinusT + endRot.z * t\r\n                        );\r\n                        wood.eulerAngles = lerpedEuler;\r\n                    }\r\n                })\r\n                .call(() => {\r\n                    const finalWorldPos = wood.getWorldPosition().clone();\r\n                    wood.setParent(targetBackpack);\r\n                    wood.setWorldPosition(finalWorldPos);\r\n\r\n                    tween(wood)\r\n                        .to(0.15, { scale: new Vec3(1.2, 1.2, 1.2) }, { easing: 'quadOut' })\r\n                        .to(0.05, { scale: new Vec3(1, 1, 1) }, { easing: 'quadOut' })\r\n                        .start();\r\n\r\n                    // 数目的数量;\r\n\r\n                    SoundManager.inst.playAudio(\"Sounds_mutou_shiqu\");\r\n                })\r\n                .start();\r\n\r\n            delayCounter++;\r\n        }\r\n\r\n    }\r\n\r\n    private _uncollectedIcon = [];\r\n    // getCoin(dt) {\r\n    //     const iconList = DataManager.Instance.monsterManager.getDrops();\r\n    //     const player = DataManager.Instance.player;\r\n    //     if (!player) return;\r\n\r\n    //     const backpacks = [\r\n    //         player.node.getChildByName(\"Backpack1\"),\r\n    //         player.node.getChildByName(\"Backpack2\"),\r\n    //         player.node.getChildByName(\"Backpack3\"),\r\n    //     ];\r\n\r\n    //     // 辅助函数：根据图标找到合适的背包\r\n    //     const findTargetBackpack = (icon: Node): Node | null => {\r\n    //         let matched: Node | null = null;\r\n    //         let empty: Node | null = null;\r\n\r\n    //         for (const backpack of backpacks) {\r\n    //             if (!backpack) continue;\r\n\r\n    //             const children = backpack.children;\r\n    //             if (children.length === 0 && !empty) {\r\n    //                 empty = backpack;\r\n    //             } else {\r\n    //                 for (const child of children) {\r\n    //                     if (child.name === icon.name) {\r\n    //                         matched = backpack;\r\n    //                         break;\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (matched) break;\r\n    //         }\r\n\r\n    //         return matched || empty || backpacks[0];\r\n    //     };\r\n\r\n    //     const playerPos = player.node.worldPosition.clone();\r\n    //     const maxDistanceXZ = 100;\r\n\r\n    //     const allIcons: Node[] = [...iconList, ...this._uncollectedIcon];\r\n    //     this._uncollectedIcon = [];\r\n\r\n    //     let delayCounter = 0;\r\n\r\n    //     for (let i = 0; i < allIcons.length; i++) {\r\n    //         const icon = allIcons[i];\r\n    //         if (!icon || !icon.isValid) continue;\r\n\r\n    //         const iconPos = icon.worldPosition.clone();\r\n    //         const dx = iconPos.x - playerPos.x;\r\n    //         const dz = iconPos.z - playerPos.z;\r\n    //         const distSqrXZ = dx * dx + dz * dz;\r\n\r\n    //         if (distSqrXZ > maxDistanceXZ * maxDistanceXZ) {\r\n    //             this._uncollectedIcon.push(icon);\r\n    //             continue;\r\n    //         }\r\n\r\n    //         const targetBackpack = findTargetBackpack(icon);\r\n    //         if (!targetBackpack) continue;\r\n\r\n    //         const start = iconPos;\r\n    //         const duration = 0.6;\r\n    //         const controller = { t: 0 };\r\n\r\n    //         icon.setParent(this.coinTransitionCon);\r\n    //         icon.setWorldPosition(start);\r\n\r\n    //         SoundManager.inst.playAudio(\"YX_jinbi_shiqu\");\r\n\r\n    //         tween(controller)\r\n    //             .delay(delayCounter * 0.05)\r\n    //             .to(duration, { t: 1 }, {\r\n    //                 easing: 'quadOut',\r\n    //                 onUpdate: () => {\r\n    //                     const t = controller.t;\r\n    //                     const oneMinusT = 1 - t;\r\n\r\n    //                     // 计算当前目标背包的堆叠高度\r\n    //                     let maxY = 0;\r\n    //                     for (const child of targetBackpack.children) {\r\n    //                         if (!child || !child.isValid) continue;\r\n    //                         const localPos = child.getPosition();\r\n    //                         if (localPos.y > maxY) {\r\n    //                             maxY = localPos.y;\r\n    //                         }\r\n    //                     }\r\n\r\n    //                     const localTarget = new Vec3(0, maxY + 0.25, 0);\r\n\r\n    //                     // 背包的世界变换矩阵\r\n    //                     const worldPos = targetBackpack.getWorldPosition();\r\n    //                     const worldRot = targetBackpack.getWorldRotation();\r\n    //                     const worldScale = targetBackpack.getWorldScale();\r\n    //                     const worldMat = new Mat4();\r\n    //                     Mat4.fromRTS(worldMat, worldRot, worldPos, worldScale);\r\n    //                     const worldTarget = Vec3.transformMat4(new Vec3(), localTarget, worldMat);\r\n\r\n    //                     // 控制点\r\n    //                     const control = new Vec3(\r\n    //                         (start.x + worldTarget.x) / 2,\r\n    //                         Math.max(start.y, worldTarget.y) + 2,\r\n    //                         (start.z + worldTarget.z) / 2\r\n    //                     );\r\n\r\n    //                     // 贝塞尔插值\r\n    //                     const pos = new Vec3(\r\n    //                         oneMinusT * oneMinusT * start.x + 2 * oneMinusT * t * control.x + t * t * worldTarget.x,\r\n    //                         oneMinusT * oneMinusT * start.y + 2 * oneMinusT * t * control.y + t * t * worldTarget.y,\r\n    //                         oneMinusT * oneMinusT * start.z + 2 * oneMinusT * t * control.z + t * t * worldTarget.z\r\n    //                     );\r\n\r\n    //                     icon.setWorldPosition(pos);\r\n    //                 }\r\n    //             })\r\n    //             .call(() => {\r\n    //                 const finalWorldPos = icon.getWorldPosition().clone();\r\n    //                 icon.setParent(targetBackpack);\r\n    //                 icon.setWorldPosition(finalWorldPos);\r\n\r\n    //                 tween(icon)\r\n    //                     .to(0.15, { scale: new Vec3(1.2, 1.2, 1.2) }, { easing: 'quadOut' })\r\n    //                     .to(0.05, { scale: new Vec3(1, 1, 1) }, { easing: 'quadOut' })\r\n    //                     .start();\r\n\r\n    //                 if (!this._hasGoldCoin && targetBackpack.children.length > 0) {\r\n    //                     this._hasGoldCoin = true;\r\n\r\n    //                     // this.unlockPlot8();\r\n    //                 }\r\n\r\n    //                 if (DataManager.Instance.UIPropertyManager) {\r\n    //                     DataManager.Instance.UIPropertyManager.collectProperty();\r\n    //                 }\r\n\r\n\r\n    //             })\r\n    //             .start();\r\n\r\n    //         delayCounter++;\r\n    //     }\r\n    // }\r\n\r\n    // 解锁Plot8 \r\n  \r\n    unlockPlot8() {\r\n        const plot8 = find(\"THREE3DNODE/Unlock/Plot8\");\r\n        plot8.active = true;\r\n        plot8.setScale(0, 0, 0);\r\n        tween(plot8)\r\n            .to(0.15, { scale: new Vec3(1.2, 1.2, 1.2) }, { easing: 'quadOut' })\r\n            .to(0.05, { scale: new Vec3(1, 1, 1) }, { easing: 'quadOut' })\r\n            .call(() => {\r\n                const data = DataManager.Instance.guideTargetList.find(item => {\r\n                    return item.plot == plot8.name;\r\n                })\r\n\r\n                if (data) {\r\n                    data.isDisplay = true;\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n}\r\n\r\n\r\n"]}