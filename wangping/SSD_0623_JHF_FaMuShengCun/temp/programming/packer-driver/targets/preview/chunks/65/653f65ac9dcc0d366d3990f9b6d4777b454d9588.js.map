{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Scene/SceneManager.ts"],"names":["_decorator","Component","Prefab","Node","find","Material","Animation","Label","CCFloat","SpriteFrame","EntityTypeEnum","PrefabPathEnum","ResourceManager","DataManager","GridSystem","Simulator","Vector2","RVOObstacles","super_html_playable","SoundManager","ccclass","property","SceneManager","type","tooltip","hitEffectPrefabPool","towerAttackInterval","_frames","onLoad","Instance","sceneManager","google_play","appstore","set_google_play_url","set_app_store_url","bulletAttackTimeInterval","length","strArr","split","map","item","Number","start","unlock","i","guideTargetList","data","plot","getChildByName","landmark","label","labelCom","getComponent","coinNum","string","initCoinNum","initFireNode","active","fireAni","play","Promise","all","loadRes","initGame","initGridSystem","list","p","then","prefabMap","set","push","monsterManager","init","instance","setAgentDefaults","addRvoObstacle","collectGuardrails","woodManager","woodManagerInit","boardManager","boardManagerInit","treeManager","initTrees","electricTowerManager","electricTowerManagerInit","partnerConManager","partnerConManagerInit","inst","preloadAudioClips","gridSystem","initTreeSystem","addOneObstacle","obstacles","processObstacles","walls","children","wall","bloodNode","FenceBloodBar","guardrailArr","node","attackingMonsterCount","blood","guardrailBlood","update","dt","forEach","guardrail"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Node, director, find, math, Material, Pool, instantiate, Animation, Label, CCFloat, SpriteAtlas, SpriteFrame } from 'cc';\r\nimport { EntityTypeEnum, GamePlayNameEnum, PathEnum, PrefabPathEnum } from '../Enum/Index';\r\nimport { ResourceManager } from '../Global/ResourceManager';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { GridSystem } from '../Grid/GridSystem';\r\nimport { Simulator } from '../RVO/Simulator';\r\nimport { Vector2 } from '../RVO/Common';\r\nimport RVOObstacles from '../Global/RVOObstacles';\r\nimport super_html_playable from '../Common/super_html_playable';\r\nimport { WoodManager } from '../Wood/WoodManager';\r\nimport { SoundManager } from '../Common/SoundManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SceneManager')\r\nexport class SceneManager extends Component {\r\n    @property(SpriteFrame)\r\n    logoIcon: SpriteFrame[] = [];\r\n\r\n    @property({ type: CCFloat, tooltip: \"背景音效差值\" })\r\n    bgmOffset = 0;\r\n\r\n    @property({ tooltip: \"配置一个字符串参数\" })\r\n    bulletAttackTimeInterval: string = \"2,1,0.9,0.8,0.7\";   // 在属性检查器里可修改\r\n\r\n    @property(Node)\r\n    walls: Node = null;\r\n\r\n    @property(Node)\r\n    obstacles: Node = null;\r\n\r\n    @property(Material)\r\n    doorMaterials: Material[] = [];\r\n\r\n    @property(Material)\r\n    guardrailMaterials: Material[] = [];\r\n\r\n    @property(Node)\r\n    initFireNode: Node = null;\r\n\r\n    hitEffectPrefabPool: Pool<Node> | null = null;\r\n\r\n    towerAttackInterval = [];\r\n\r\n    onLoad(): void {\r\n        DataManager.Instance.sceneManager = this;\r\n        //跳转链接\r\n        const google_play = \"https://play.google.com/store/apps/details?id=com.funplus.ts.global\";\r\n        const appstore = \"https://play.google.com/store/apps/details?id=com.funplus.ts.global\";\r\n\r\n        super_html_playable.set_google_play_url(google_play);\r\n        super_html_playable.set_app_store_url(appstore);\r\n\r\n        if (this.bulletAttackTimeInterval.length > 0) {\r\n            const strArr = this.bulletAttackTimeInterval.split(\",\").map(item => Number(item));\r\n            this.towerAttackInterval = strArr;\r\n\r\n            DataManager.Instance.bulletAttackTimeInterval = this.towerAttackInterval[0];\r\n        }\r\n    }\r\n\r\n    async start() {\r\n        const unlock = find(\"THREE3DNODE/Unlock\");\r\n\r\n        for (let i = 0; i < DataManager.Instance.guideTargetList.length; i++) {\r\n            const data = DataManager.Instance.guideTargetList[i];\r\n            if (!data) continue;\r\n\r\n            const plot = unlock.getChildByName(data.plot);\r\n            if (!plot) continue;\r\n\r\n            const landmark = plot.getChildByName(\"Landmark\");\r\n            if (!landmark) continue;\r\n\r\n            const label = landmark.getChildByName(\"Label\");\r\n            if (!label) continue;\r\n\r\n            const labelCom = label.getComponent(Label);\r\n            if (!labelCom) continue;\r\n\r\n            data.coinNum = Number(labelCom.string);\r\n            data.initCoinNum = Number(labelCom.string);\r\n        }\r\n\r\n        if (this.initFireNode) {\r\n            this.initFireNode.active = true;\r\n\r\n            const fireAni = this.initFireNode.getComponent(Animation);\r\n            if (fireAni) fireAni.play();\r\n        }\r\n\r\n\r\n\r\n        await Promise.all([this.loadRes()]);\r\n        this.initGame();\r\n        this.initGridSystem();\r\n    }\r\n\r\n    async loadRes() {\r\n        const list = [];\r\n        for (const type in PrefabPathEnum) {\r\n            const p = ResourceManager.Instance.loadRes(PrefabPathEnum[type], Prefab).then((Prefab) => {\r\n                DataManager.Instance.prefabMap.set(type, Prefab)\r\n            })\r\n\r\n            list.push(p);\r\n        }\r\n\r\n        await Promise.all(list);\r\n    }\r\n\r\n    initGame() {\r\n        DataManager.Instance.monsterManager.init();\r\n        //rvo\r\n        Simulator.instance.setAgentDefaults(60, 3, 1, 0.1, 14, 80, new Vector2(0, 0));\r\n        // 添加静态障碍物\r\n        this.addRvoObstacle();\r\n\r\n        // 收集护栏\r\n        this.collectGuardrails();\r\n\r\n        DataManager.Instance.woodManager.woodManagerInit();\r\n        DataManager.Instance.boardManager.boardManagerInit();\r\n        DataManager.Instance.treeManager.initTrees();\r\n        DataManager.Instance.electricTowerManager.electricTowerManagerInit();\r\n        DataManager.Instance.partnerConManager.partnerConManagerInit();\r\n\r\n        //预加载音乐音效\r\n        SoundManager.inst.preloadAudioClips();\r\n    }\r\n\r\n    initGridSystem() {\r\n        DataManager.Instance.gridSystem = new GridSystem(5);\r\n\r\n        DataManager.Instance.treeManager.initTreeSystem();\r\n    }\r\n\r\n    // 添加静态障碍物\r\n    addRvoObstacle() {\r\n\r\n        RVOObstacles.addOneObstacle(this.obstacles);\r\n\r\n        Simulator.instance.processObstacles();\r\n    }\r\n\r\n    // 收集护栏\r\n    collectGuardrails() {\r\n        for (let i = 0; i < this.walls.children.length; i++) {\r\n            const wall = this.walls.children[i];\r\n\r\n            if (i > 8) return;\r\n            if (!wall) continue;\r\n            let bloodNode: Node = wall.getChildByName(EntityTypeEnum.FenceBloodBar);\r\n            if (bloodNode) {\r\n                bloodNode.active = false;\r\n            }\r\n            DataManager.Instance.guardrailArr.push({\r\n                node: wall,\r\n                attackingMonsterCount: 0,\r\n                blood: DataManager.Instance.guardrailBlood,\r\n            })\r\n        }\r\n    }\r\n\r\n    // 栅栏血条消失逻辑\r\n    private _frames = 0;\r\n    protected update(dt: number): void {\r\n        if (this._frames++ > 10) {\r\n            this._frames = 0\r\n            DataManager.Instance.guardrailArr.forEach(guardrail => {\r\n                if (guardrail.attackingMonsterCount <= 0) {\r\n                    let bloodNode: Node = guardrail.node.getChildByName(EntityTypeEnum.FenceBloodBar);\r\n                    if (bloodNode) {\r\n                        bloodNode.active = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"]}