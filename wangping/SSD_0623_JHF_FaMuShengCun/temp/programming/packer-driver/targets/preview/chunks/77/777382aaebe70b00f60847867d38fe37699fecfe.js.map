{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Tree/TreeManager.ts"],"names":["_decorator","Component","instantiate","math","Node","Vec3","DataManager","ItemTreeManager","EntityTypeEnum","ccclass","property","TreeManager","_treeCount","_treeStartPoint","_treeRow","_treeCol","_frontToBackSpacing","_leftToRightSpacing","treeSpacingX","treeSpacingZ","treeStartPoint","clone","start","Instance","treeManager","initTreeSystem","i","node","children","length","tree","gridSystem","updateNode","affectedTrees","nodes","isPlayer","role","getComponent","affectedAni","initTrees","r","treeMatrix","push","c","treePrefab","prefabMap","get","Tree","setParent","posX","x","posZ","z","setPosition","y","eulerAngles","Math","floor","random","init","scatteredTreePoints","treePoint","position","playAni","aniData","row","indexList","index","treeItem","Index","indexOf","dir","findRemoveTree","M"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, math, Node, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { ItemTreeManager } from './ItemTreeManager';\r\nimport { EntityTypeEnum, TreeAniData } from '../Enum/Index';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TreeManager')\r\nexport class TreeManager extends Component {\r\n    @property(Node)\r\n    scatteredTreePoints: Node = null;\r\n\r\n    private _treeCount = 0;\r\n\r\n    private _treeStartPoint = new Vec3(-36, 0, -16)\r\n    private _treeRow = 14;\r\n    private _treeCol = 4;\r\n    private _frontToBackSpacing = 5.5;\r\n    private _leftToRightSpacing = 5.5;\r\n\r\n    public get treeSpacingX(): number {\r\n        return this._leftToRightSpacing;\r\n    }\r\n\r\n    public get treeSpacingZ(): number {\r\n        return this._frontToBackSpacing;\r\n    }\r\n\r\n    public get treeStartPoint(): Vec3 {\r\n        return this._treeStartPoint.clone();\r\n    }\r\n\r\n    start() {\r\n        DataManager.Instance.treeManager = this;\r\n    }\r\n\r\n    initTreeSystem() {\r\n        for (let i = 0; i < this.node.children.length; i++) {\r\n            const tree = this.node.children[i];\r\n\r\n            DataManager.Instance.gridSystem.updateNode(tree);\r\n        }\r\n    }\r\n\r\n    // 受击树   \r\n    affectedTrees(nodes: Node[], isPlayer = true, role) {\r\n        for (let node of nodes) {\r\n            let tree: ItemTreeManager = node.getComponent(ItemTreeManager);\r\n            if (tree) {\r\n                tree.affectedAni(isPlayer, role);\r\n            }\r\n        }\r\n    }\r\n\r\n    initTrees() {\r\n        const { _treeRow, _treeCol, _treeStartPoint, _leftToRightSpacing, _frontToBackSpacing } = this;\r\n\r\n        for (let r = 0; r < _treeRow; r++) {\r\n            DataManager.Instance.treeMatrix.push([])\r\n            for (let c = 0; c < _treeCol; c++) {\r\n                const treePrefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.Tree);\r\n                const tree = instantiate(treePrefab);\r\n                tree[`__treeNum`] = this._treeCount;\r\n                tree.setParent(this.node);\r\n\r\n                // 计算每棵树的位置\r\n                const posX = _treeStartPoint.x + c * _leftToRightSpacing;\r\n                const posZ = _treeStartPoint.z + r * _frontToBackSpacing;\r\n                tree.setPosition(new Vec3(posX, _treeStartPoint.y, posZ));\r\n                tree.children[0].eulerAngles = new Vec3(0, Math.floor(math.random() * 360), 0);\r\n                tree.getComponent(ItemTreeManager).init(r * _treeRow + c);\r\n\r\n                this._treeCount++;\r\n                DataManager.Instance.treeMatrix[r].push(tree);\r\n            }\r\n        }\r\n\r\n        // 散落在场景中的树\r\n        for (let i = 0; i < this.scatteredTreePoints.children.length; i++) {\r\n            const treePoint = this.scatteredTreePoints.children[i];\r\n\r\n            const treePrefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.Tree);\r\n            const tree = instantiate(treePrefab);\r\n            tree[`__treeNum`] = this._treeCount;\r\n            tree.setParent(this.node);\r\n\r\n            tree.setPosition(new Vec3(treePoint.position.x, _treeStartPoint.y, treePoint.position.z));\r\n            tree.children[0].eulerAngles = new Vec3(0, Math.floor(math.random() * 360), 0);\r\n\r\n            this._treeCount++;\r\n        }\r\n    }\r\n\r\n    /** 播动画 */\r\n    public playAni(aniData: TreeAniData[]) {\r\n        let row: number = this._treeRow;\r\n        let indexList: number[] = [];\r\n        for (let i = 0; i < aniData.length; i++) {\r\n            let index: number = aniData[i].tree.y * row + aniData[i].tree.x;\r\n            indexList.push(index);\r\n            //console.log(\"index\",index, aniData[i].tree.x, aniData[i].tree.y);\r\n        }\r\n        for (let i = 0; i < this.node.children.length; i++) {\r\n            let tree: Node = this.node.children[i];\r\n            if (tree) {\r\n                let treeItem: ItemTreeManager = tree.getComponent(ItemTreeManager);\r\n                if (treeItem) {\r\n                    let index: number = treeItem.Index;\r\n                    if (indexList.indexOf(index) !== -1) {\r\n                        treeItem.playAni(aniData[indexList.indexOf(index)].dir);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 查找树\r\n    public findRemoveTree(tree: Node): { r: number; c: number } {\r\n        const M = DataManager.Instance.treeMatrix;\r\n        for (let r = 0; r < M.length; r++) {\r\n            for (let c = 0; c < M[r].length; c++) {\r\n                if (M[r][c] === tree) {\r\n                    M[r][c] = null as any;\r\n                    return { r, c };\r\n                }\r\n            }\r\n        }\r\n        return { r: -1, c: -1 }; // 没找到\r\n    }\r\n}\r\n\r\n\r\n"]}