{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Common/SoundManager.ts"],"names":["SoundManager","AudioClip","AudioSource","Node","director","Component","ResourceManager","DataManager","inst","_instance","constructor","_backgroundNode","_audioNode","_bgmAudioSource","_runSource","_runBgmPlaying","audioClips","Map","effectsPool","POOL_SIZE","getScene","addChild","addPersistRootNode","getComponent","addComponent","initRunSource","meraNode","playRunBGM","clip","get","stop","loop","play","stopRunBGM","clearEffectsPool","stopAllEffects","forEach","source","isValid","destroy","effectsNode","getChildByName","getIdleEffectSource","length","oldSource","shift","volume","push","playBGM","name","duration","getDuration","bgmOffset","Instance","sceneManager","scheduleOnce","stopBGM","pauseBGM","pause","resumeBGM","playAudio","playOneShot","preloadAudioClips","loadRes","then","set","loadLeftAudios","loadDir","clips"],"mappings":"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","sourcesContent":["import { _decorator, AudioClip, AudioSource, Node, Vec3, director, Component } from 'cc';\r\nimport { ResourceManager } from '../Global/ResourceManager';\r\nimport { SceneManager } from '../Scene/SceneManager';\r\nimport { DataManager } from '../Global/DataManager';\r\n\r\nexport class SoundManager extends Component {\r\n\r\n\r\n    private _backgroundNode = null;\r\n    private _audioNode = null;\r\n    private _bgmAudioSource: AudioSource = null;\r\n\r\n    private _runSource: AudioSource = null;\r\n    private _runBgmPlaying: boolean = false;\r\n\r\n    // 音效缓存\r\n    private audioClips: Map<string, AudioClip> = new Map();\r\n\r\n    // 单例模式\r\n    private static _instance: SoundManager;\r\n    public static get inst(): SoundManager {\r\n        if (!SoundManager._instance) {\r\n            SoundManager._instance = new SoundManager();\r\n        }\r\n        return SoundManager._instance;\r\n    }\r\n\r\n    public constructor() {\r\n        super();\r\n        this._backgroundNode = new Node();\r\n        this._audioNode = new Node();\r\n        director.getScene().addChild(this._backgroundNode);\r\n        director.getScene().addChild(this._audioNode);\r\n        // 设置为常驻节点\r\n        director.addPersistRootNode(this._backgroundNode);\r\n        director.addPersistRootNode(this._audioNode);\r\n        this._bgmAudioSource = this._backgroundNode.getComponent(AudioSource);\r\n        if (!this._bgmAudioSource) {\r\n            this._bgmAudioSource = this._backgroundNode.addComponent(AudioSource);\r\n        }\r\n        this.initRunSource();\r\n    }\r\n\r\n    // 初始化人跑步背景音乐\r\n    public initRunSource() {\r\n        let meraNode: Node = new Node();\r\n        director.getScene().addChild(meraNode);\r\n        director.addPersistRootNode(meraNode);\r\n        this._runSource = meraNode.addComponent(AudioSource);\r\n\r\n    }\r\n\r\n    // 播放人跑步背景音乐\r\n    public playRunBGM() {\r\n        const clip = this.audioClips.get(\"run\");\r\n        if (!clip) {\r\n            // console.error(`run not found!`);\r\n            return;\r\n        }\r\n        if (this._runBgmPlaying) {\r\n            return;\r\n        }\r\n\r\n        this._runSource.stop();\r\n        this._runSource.clip = clip;\r\n        this._runSource.loop = true;\r\n        this._runSource.play();\r\n        this._runBgmPlaying = true;\r\n    }\r\n\r\n    // 停止跑步音乐\r\n    public stopRunBGM() {\r\n        if (!this._runBgmPlaying) {\r\n            return;\r\n        }\r\n        this._runSource.stop();\r\n        this._runBgmPlaying = false;\r\n    }\r\n\r\n\r\n    // 音效播放器对象池\r\n    private effectsPool: AudioSource[] = [];\r\n    private readonly POOL_SIZE = 8;  // 同时可播放的音效数量\r\n\r\n    // 清理音效池\r\n    public clearEffectsPool() {\r\n        // 停止所有音效\r\n        this.stopAllEffects();\r\n\r\n        // 销毁所有 AudioSource 组件\r\n        this.effectsPool.forEach(source => {\r\n            if (source.isValid) {\r\n                source.destroy();\r\n            }\r\n        });\r\n\r\n        // 清空数组\r\n        this.effectsPool = [];\r\n        if (!this._audioNode) {\r\n            return;\r\n        }\r\n\r\n        // 找到并销毁 EffectsPool 节点\r\n        const effectsNode = this._audioNode.getChildByName('EffectsPool');\r\n        if (effectsNode && effectsNode.isValid) {\r\n            effectsNode.destroy();\r\n        }\r\n    }\r\n\r\n    // 获取可用的音效播放器\r\n    private getIdleEffectSource(): AudioSource | null {\r\n        //如果超过最大音效限制就去掉最早的那个\r\n        while (this.effectsPool.length >= this.POOL_SIZE) {\r\n            let oldSource = this.effectsPool.shift();\r\n            oldSource.stop();\r\n            oldSource.destroy();\r\n        }\r\n        const source: AudioSource = this._audioNode.addComponent(AudioSource);\r\n        source.volume = 1;\r\n        this.effectsPool.push(source);\r\n        return source;\r\n    }\r\n\r\n    // 播放背景音乐\r\n    public playBGM(name: string) {\r\n        const clip = this.audioClips.get(name);\r\n        if (!clip) {\r\n            // console.error(`BGM ${name} not found!`);\r\n            return;\r\n        }\r\n\r\n        this._bgmAudioSource.stop();\r\n        this._bgmAudioSource.clip = clip;\r\n        this._bgmAudioSource.loop = false;\r\n        this._bgmAudioSource.play();\r\n\r\n        const duration = clip.getDuration();\r\n        const bgmOffset = DataManager.Instance.sceneManager.bgmOffset;\r\n        this.scheduleOnce(() => {\r\n            this.playBGM(name);\r\n        }, duration - bgmOffset);\r\n    }\r\n\r\n    // 停止背景音乐\r\n    public stopBGM() {\r\n        this._bgmAudioSource.stop();\r\n    }\r\n\r\n    // 暂停背景音乐\r\n    public pauseBGM() {\r\n        this._bgmAudioSource.pause();\r\n    }\r\n\r\n    // 恢复背景音乐\r\n    public resumeBGM() {\r\n        this._bgmAudioSource.play();\r\n    }\r\n\r\n    // 播放音效\r\n    public playAudio(name: string, volume: number = 1) {\r\n        const clip: AudioClip = this.audioClips.get(name);\r\n        if (!clip) {\r\n            // console.error(`Audio ${name} not found!`);\r\n            return;\r\n        }\r\n\r\n        const source = this.getIdleEffectSource();\r\n        if (source) {\r\n\r\n            source.volume = volume;\r\n            source.playOneShot(clip);\r\n        }\r\n    }\r\n\r\n\r\n    // 停止所有音效\r\n    public stopAllEffects() {\r\n        for (const source of this.effectsPool) {\r\n            source.stop();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // 预加载音效资源\r\n    public preloadAudioClips() {\r\n        //单独优先加载背景音乐\r\n        ResourceManager.Instance.loadRes(\"bgm/BGM\", AudioClip).then((clip) => {\r\n            // console.log(\"audio load \" + clip.name);\r\n            this.audioClips.set(clip.name, clip);\r\n            //直接播放背景音乐\r\n            this.playBGM(\"BGM\");\r\n            this.loadLeftAudios();\r\n        });\r\n    }\r\n\r\n    private loadLeftAudios() {\r\n        // 加载音效\r\n        ResourceManager.Instance.loadDir(\"sounds\", AudioClip).then((clips) => {\r\n            clips.forEach(clip => {\r\n                // console.log(\"audio load \" + clip.name);\r\n                this.audioClips.set(clip.name, clip);\r\n            });\r\n        });\r\n    }\r\n\r\n}"]}