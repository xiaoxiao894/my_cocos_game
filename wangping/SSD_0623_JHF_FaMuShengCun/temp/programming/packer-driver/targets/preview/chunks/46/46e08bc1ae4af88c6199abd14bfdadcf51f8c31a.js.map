{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Tree/ItemTreeManager.ts"],"names":["_decorator","Animation","Collider","Component","instantiate","RigidBody","tween","Vec3","DataManager","EntityTypeEnum","ccclass","property","ItemTreeManager","maxAttackNum","_curAttackNum","isBeingCutDown","_isAniPlaying","_crookedTween","_index","init","index","Index","affectedAni","isPlayer","role","attackTreeAni","amplitude","treePos","node","worldPosition","clone","playerPos","direction","subtract","normalize","leanAngle","x","z","fanLeanAngle","stop","to","eulerAngles","call","start","Instance","curCutDownTree","searchTreeManager","searchNumber","ssdTree","getChildByName","boxCollider","getComponent","enabled","rigidBody","gridSystem","removeNode","woodManager","generateWoods","r","c","treeManager","findRemoveTree","oldTreePos","getWorldPosition","oldTreeRot","getRotation","oldParent","parent","oldIdx","children","indexOf","treeNum","scheduleOnce","treePrefab","prefabMap","get","Tree","newTree","setWorldPosition","setRotation","addChild","newTreeAni","play","once","EventType","FINISHED","updateNode","treeMatrix","curAttackNum","ssdTreeAni","playAni","angle","isBeingCut"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AsyncDelegate, Collider, Component, find, instantiate, Node, RigidBody, tween, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { MathUtil } from '../Util/MathUtil';\r\nimport { EntityTypeEnum } from '../Enum/Index';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ItemTreeManager')\r\nexport class ItemTreeManager extends Component {\r\n    // 最大攻击数\r\n    maxAttackNum = 3;\r\n    // 当前攻击数\r\n    private _curAttackNum = 0;\r\n\r\n    // 是否被\r\n    private isBeingCutDown: boolean = false;\r\n\r\n    private _isAniPlaying: boolean = false;\r\n    private _crookedTween;\r\n\r\n    private _index: number = -1;\r\n\r\n    public init(index: number) {\r\n        this._index = index;\r\n    }\r\n\r\n    public get Index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    // 受击动画\r\n    affectedAni(isPlayer: boolean = false, role) {\r\n        if (this.isBeingCutDown) {\r\n            return;\r\n        }\r\n        this._curAttackNum++;\r\n        this.attackTreeAni(this._curAttackNum);\r\n\r\n        //动画\r\n        const amplitude: number = 10;\r\n\r\n        const treePos = this.node.worldPosition.clone();\r\n        const playerPos = role.worldPosition.clone();\r\n        const direction = playerPos.subtract(treePos).normalize();\r\n\r\n        // Convert direction to euler angles (only using x and z for leaning)\r\n        const leanAngle = new Vec3(\r\n            direction.x * amplitude,\r\n            0,\r\n            direction.z * amplitude\r\n        );\r\n\r\n        const fanLeanAngle = new Vec3(\r\n            direction.x * -5,\r\n            0,\r\n            direction.z * -5\r\n        );\r\n\r\n        this._isAniPlaying = true;\r\n        if (this._crookedTween) {\r\n            this._crookedTween.stop();\r\n        }\r\n        tween(this.node)\r\n            .to(0.08, { eulerAngles: leanAngle })\r\n            .to(0.12, { eulerAngles: fanLeanAngle })\r\n            .to(0.04, { eulerAngles: new Vec3(0, 0, 0) })\r\n            .call(() => {\r\n                this._isAniPlaying = false;\r\n            })\r\n            .start();\r\n\r\n        if (this._curAttackNum >= this.maxAttackNum) {\r\n            this.isBeingCutDown = true;\r\n\r\n            // 可以去找其他不在区域内的树\r\n            DataManager.Instance.curCutDownTree++;\r\n            if (DataManager.Instance.curCutDownTree >= 56) {\r\n                DataManager.Instance.searchTreeManager.searchNumber = 100;\r\n            }\r\n\r\n            // 清理自身的刚体\r\n            const ssdTree = this.node.getChildByName(\"SSDshu\");\r\n            if (ssdTree) {\r\n                const boxCollider = ssdTree.getComponent(Collider);\r\n                if (boxCollider) {\r\n                    boxCollider.enabled = false;\r\n                }\r\n\r\n                const rigidBody = ssdTree.getComponent(RigidBody);\r\n                if (rigidBody) {\r\n                    rigidBody.enabled = false;\r\n                }\r\n            }\r\n\r\n            // const tree = this.node.getChildByPath(\"angleNode/shu\");\r\n            // tree.active = false;\r\n            DataManager.Instance.gridSystem.removeNode(this.node);\r\n            DataManager.Instance.woodManager.generateWoods(isPlayer, this.node, role);\r\n\r\n            const { r, c } = DataManager.Instance.treeManager.findRemoveTree(this.node);\r\n            if (r === -1) return; \r\n\r\n            // 保存当前树的位置和旋转\r\n            const oldTreePos = this.node.getWorldPosition().clone();\r\n            const oldTreeRot = this.node.getRotation().clone();\r\n            const oldParent = this.node.parent;\r\n            const oldIdx = this.node.parent.children.indexOf(this.node);\r\n            const treeNum = (this.node as any)[`__treeNum`];\r\n\r\n            // if (this.node && this.node.isValid) {\r\n            //     this.node.destroy();\r\n            // }\r\n\r\n            // 延迟10秒重新生成一棵树\r\n            this.scheduleOnce(() => {\r\n                const treePrefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.Tree);\r\n                if (treePrefab && oldParent) {\r\n                    const newTree = instantiate(treePrefab);\r\n                    newTree.setWorldPosition(oldTreePos);\r\n                    newTree.setRotation(oldTreeRot);\r\n                    oldParent.addChild(newTree);\r\n                    // newTree[`__treeNum`] = treeNum;\r\n                    // oldParent.insertChild(newTree, oldIdx);\r\n\r\n                    const newTreeAni = newTree.getComponent(Animation);\r\n                    newTreeAni.play();\r\n                    newTreeAni.once(Animation.EventType.FINISHED, () => {\r\n                        DataManager.Instance.gridSystem.updateNode(newTree);\r\n\r\n                        DataManager.Instance.treeMatrix[r][c] = newTree;\r\n                    })\r\n                }\r\n            }, 20);\r\n        }\r\n    }\r\n\r\n    // 攻击树动画\r\n    attackTreeAni(curAttackNum) {\r\n        const ssdTree = this.node.getChildByName(\"SSDshu\")\r\n        if (ssdTree) {\r\n            const ssdTreeAni = ssdTree.getComponent(Animation);\r\n\r\n            if (ssdTreeAni) {\r\n                if (curAttackNum == 1) {\r\n                    ssdTreeAni.play(\"shuKF001\");\r\n                } else if (curAttackNum == 2) {\r\n                    ssdTreeAni.play(\"shuKF002\");\r\n                } else if (curAttackNum == 3) {\r\n                    ssdTreeAni.play(\"shuKF003\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public playAni(angle: Vec3): void {\r\n        if (this.isBeingCutDown || this._isAniPlaying) {\r\n            return;\r\n        }\r\n        this._crookedTween = tween(this.node).to(0.2, { eulerAngles: angle }).to(0.2, { eulerAngles: new Vec3(0, 0, 0) }).start();\r\n    }\r\n\r\n    public get isBeingCut(): boolean {\r\n        return this.isBeingCutDown;\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}