{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Actor/GridPathController.ts"],"names":["GridPathController","Vec3","DataManager","instance","_instance","constructor","path","gridSizeX","gridSizeZ","originOffset","Instance","treeManager","treeSpacingX","treeSpacingZ","treeStartPoint","updatePath","worldPosition","gridPos","worldToGrid","length","isSameGrid","push","treePlayAni","shift","worldPos","x","Math","floor","y","z","gridToWorldCenter","gridX","gridY","a","b","pos","lastPos","angle","trees","treeAnis","dir","tree","playAni"],"mappings":";;;kGAKqBA,kB;;;;;;;;;;;;;;;;;;;AALNC,MAAAA,I,OAAAA,I;;AACNC,MAAAA,W,iBAAAA,W;;;;;;;;;yBAIYF,kB,GAAN,MAAMA,kBAAN,CAAyB;AAEjB,mBAARG,QAAQ,GAAuB;AACtC,cAAI,CAACH,kBAAkB,CAACI,SAAxB,EAAmC;AAC/BJ,YAAAA,kBAAkB,CAACI,SAAnB,GAA+B,IAAIJ,kBAAJ,EAA/B;AACH;;AACD,iBAAOA,kBAAkB,CAACI,SAA1B;AACH;AAED;;;AASAC,QAAAA,WAAW,GAAG;AAAA,eARPC,IAQO,GAR4B,EAQ5B;AAAA,eALNC,SAKM,GALc,CAKd;AALiB;AAKjB,eAJNC,SAIM,GAJc,CAId;AAJiB;;AAC/B;AAGc,eAFNC,YAEM;AACV,eAAKF,SAAL,GAAiB;AAAA;AAAA,0CAAYG,QAAZ,CAAqBC,WAArB,CAAiCC,YAAlD;AACA,eAAKJ,SAAL,GAAiB;AAAA;AAAA,0CAAYE,QAAZ,CAAqBC,WAArB,CAAiCE,YAAlD;AACA,eAAKJ,YAAL,GAAoB;AAAA;AAAA,0CAAYC,QAAZ,CAAqBC,WAArB,CAAiCG,cAArD;AACH;AAED;AACJ;AACA;AACA;;;AACWC,QAAAA,UAAU,CAACC,aAAD,EAAsB;AACnC,cAAMC,OAAO,GAAG,KAAKC,WAAL,CAAiBF,aAAjB,CAAhB,CADmC,CAGnC;;AACA,cAAI,KAAKV,IAAL,CAAUa,MAAV,KAAqB,CAArB,IACA,CAAC,KAAKC,UAAL,CAAgBH,OAAhB,EAAyB,KAAKX,IAAL,CAAU,KAAKA,IAAL,CAAUa,MAAV,GAAmB,CAA7B,CAAzB,CADL,EACgE;AAC5D,iBAAKb,IAAL,CAAUe,IAAV,CAAeJ,OAAf,EAD4D,CACnC;;AACzB,iBAAKK,WAAL,CAAiB,KAAKhB,IAAL,CAAU,KAAKA,IAAL,CAAUa,MAAV,GAAmB,CAA7B,CAAjB,EAAkD,KAAKb,IAAL,CAAU,KAAKA,IAAL,CAAUa,MAAV,GAAmB,CAA7B,CAAlD;;AACA,gBAAI,KAAKb,IAAL,CAAUa,MAAV,GAAmB,CAAvB,EAA0B;AACtB,mBAAKb,IAAL,CAAUiB,KAAV;AACH;AACJ;AAEJ;AAED;AACJ;AACA;;;AACYL,QAAAA,WAAW,CAACM,QAAD,EAA2C;AAC1D,iBAAO;AACHC,YAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAW,CAACH,QAAQ,CAACC,CAAT,GAAa,KAAKhB,YAAL,CAAkBgB,CAAhC,IAAqC,KAAKlB,SAArD,CADA;AAEHqB,YAAAA,CAAC,EAAEF,IAAI,CAACC,KAAL,CAAW,CAACH,QAAQ,CAACK,CAAT,GAAa,KAAKpB,YAAL,CAAkBoB,CAAhC,IAAqC,KAAKrB,SAArD,CAFA,CAEgE;;AAFhE,WAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWsB,QAAAA,iBAAiB,CAACC,KAAD,EAAgBC,KAAhB,EAAqC;AACzD,iBAAO,IAAI/B,IAAJ,CACH8B,KAAK,GAAG,KAAKxB,SAAb,GAAyB,KAAKE,YAAL,CAAkBgB,CAA3C,GAA+C,KAAKlB,SAAL,GAAiB,CAD7D,EAEH,CAFG,EAGHyB,KAAK,GAAG,KAAKxB,SAAb,GAAyB,KAAKC,YAAL,CAAkBoB,CAA3C,GAA+C,KAAKrB,SAAL,GAAiB,CAH7D,CAAP;AAKH;AAED;AACJ;AACA;;;AACYY,QAAAA,UAAU,CACda,CADc,EAEdC,CAFc,EAGP;AACP,iBAAOD,CAAC,CAACR,CAAF,KAAQS,CAAC,CAACT,CAAV,IAAeQ,CAAC,CAACL,CAAF,KAAQM,CAAC,CAACN,CAAhC;AACH;AAED;;;AACQN,QAAAA,WAAW,CAACa,GAAD,EAAgCC,OAAhC,EAAmE;AAClF,cAAID,GAAG,IAAIC,OAAX,EAAoB;AAChB,gBAAMC,KAAa,GAAG,EAAtB,CADgB,CAEhB;;AACA,gBAAIC,KAAK,GAAG,CAACH,GAAD,EAAM;AAAEV,cAAAA,CAAC,EAAEU,GAAG,CAACV,CAAT;AAAYG,cAAAA,CAAC,EAAEO,GAAG,CAACP,CAAJ,GAAQ;AAAvB,aAAN,EAAkC;AAAEH,cAAAA,CAAC,EAAEU,GAAG,CAACV,CAAJ,GAAQ,CAAb;AAAgBG,cAAAA,CAAC,EAAEO,GAAG,CAACP;AAAvB,aAAlC,EAA8D;AAAEH,cAAAA,CAAC,EAAEU,GAAG,CAACV,CAAJ,GAAQ,CAAb;AAAgBG,cAAAA,CAAC,EAAEO,GAAG,CAACP,CAAJ,GAAQ;AAA3B,aAA9D,CAAZ,CAHgB,CAIhB;;AACA,gBAAIW,QAAuB,GAAG,EAA9B;;AACA,gBAAIJ,GAAG,CAACV,CAAJ,GAAQW,OAAO,CAACX,CAApB,EAAuB;AACnBc,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAACoC,KAAV,EAAiB,CAAjB,EAAoB,CAApB,CAAP;AAA+BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAA1C,eAAd;AACAC,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAASoC,KAAT,EAAgB,CAAhB,EAAmB,CAAnB,CAAP;AAA8BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAAzC,eAAd;AACH,aAHD,MAGO,IAAIH,GAAG,CAACV,CAAJ,GAAQW,OAAO,CAACX,CAApB,EAAuB;AAC1Bc,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAACoC,KAAV,EAAiB,CAAjB,EAAoB,CAApB,CAAP;AAA+BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAA1C,eAAd;AACAC,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAASoC,KAAT,EAAgB,CAAhB,EAAmB,CAAnB,CAAP;AAA8BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAAzC,eAAd;AACH,aAHM,MAGA,IAAIH,GAAG,CAACP,CAAJ,GAAQQ,OAAO,CAACR,CAApB,EAAuB;AAC1BW,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAeoC,KAAf,CAAP;AAA8BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAAzC,eAAd;AACAC,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAACoC,KAAhB,CAAP;AAA+BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAA1C,eAAd;AACH,aAHM,MAGA,IAAIH,GAAG,CAACP,CAAJ,GAAQQ,OAAO,CAACR,CAApB,EAAuB;AAC1BW,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAeoC,KAAf,CAAP;AAA8BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAAzC,eAAd;AACAC,cAAAA,QAAQ,CAAClB,IAAT,CAAc;AAAEmB,gBAAAA,GAAG,EAAE,IAAIvC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAACoC,KAAhB,CAAP;AAA+BI,gBAAAA,IAAI,EAAEH,KAAK,CAAC,CAAD;AAA1C,eAAd;AACH;;AAED,gBAAIC,QAAQ,CAACpB,MAAT,GAAkB,CAAtB,EAAyB;AACrB;AACA;AAAA;AAAA,8CAAYT,QAAZ,CAAqBC,WAArB,CAAiC+B,OAAjC,CAAyCH,QAAzC;AACH;AAEJ;AACJ;;AAzGmC,O;;AAAnBvC,MAAAA,kB,CACFI,S","sourcesContent":["import { Vec2, Vec3, Node } from \"cc\";\r\nimport { DataManager } from \"../Global/DataManager\";\r\nimport { EventManager } from \"../Global/EventManager\";\r\nimport { TreeAniData } from \"../Enum/Index\";\r\n\r\nexport default class GridPathController {\r\n    private static _instance: GridPathController;\r\n    static get instance(): GridPathController {\r\n        if (!GridPathController._instance) {\r\n            GridPathController._instance = new GridPathController();\r\n        }\r\n        return GridPathController._instance;\r\n    }\r\n\r\n    /** 玩家路径点 */\r\n    public path: { x: number, y: number }[] = [];\r\n\r\n\r\n    private gridSizeX: number = 0; // 网格大小（单位：米）\r\n    private gridSizeZ: number = 0; // 网格大小（单位：米）\r\n    /** 初始坐标位置 */\r\n    private originOffset: Vec3;\r\n\r\n    constructor() {\r\n        this.gridSizeX = DataManager.Instance.treeManager.treeSpacingX;\r\n        this.gridSizeZ = DataManager.Instance.treeManager.treeSpacingZ;\r\n        this.originOffset = DataManager.Instance.treeManager.treeStartPoint;\r\n    }\r\n\r\n    /**\r\n     * 更新路径（每帧调用）\r\n     * @param worldPosition 人物的世界坐标\r\n     */\r\n    public updatePath(worldPosition: Vec3) {\r\n        const gridPos = this.worldToGrid(worldPosition);\r\n\r\n        // 如果路径为空或当前位置不等于最后一个点，则处理\r\n        if (this.path.length === 0 ||\r\n            !this.isSameGrid(gridPos, this.path[this.path.length - 1])) {\r\n            this.path.push(gridPos); // 添加新点\r\n            this.treePlayAni(this.path[this.path.length - 1], this.path[this.path.length - 2]);\r\n            if (this.path.length > 2) {\r\n                this.path.shift();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 世界坐标转网格坐标（考虑初始偏移）\r\n     */\r\n    private worldToGrid(worldPos: Vec3): { x: number, y: number } {\r\n        return {\r\n            x: Math.floor((worldPos.x - this.originOffset.x) / this.gridSizeX),\r\n            y: Math.floor((worldPos.z - this.originOffset.z) / this.gridSizeZ) // 假设z轴为2D平面y轴\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 将网格坐标转换为网格中心的世界坐标\r\n     * @param gridX 网格X坐标\r\n     * @param gridY 网格Y坐标\r\n     * @returns 世界坐标（Vec3）\r\n     */\r\n    public gridToWorldCenter(gridX: number, gridY: number): Vec3 {\r\n        return new Vec3(\r\n            gridX * this.gridSizeX + this.originOffset.x + this.gridSizeX / 2,\r\n            0,\r\n            gridY * this.gridSizeZ + this.originOffset.z + this.gridSizeZ / 2\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 判断两个网格坐标是否相同\r\n     */\r\n    private isSameGrid(\r\n        a: { x: number, y: number },\r\n        b: { x: number, y: number }\r\n    ): boolean {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /** 人过树动  */\r\n    private treePlayAni(pos: { x: number, y: number }, lastPos: { x: number, y: number }) {\r\n        if (pos && lastPos) {\r\n            const angle: number = 10;\r\n            //获取周围4棵树  右上 左上 右下 左下\r\n            let trees = [pos, { x: pos.x, y: pos.y + 1 }, { x: pos.x + 1, y: pos.y }, { x: pos.x + 1, y: pos.y + 1 }];\r\n            //确定哪两棵树播放动画，以及动画方向\r\n            let treeAnis: TreeAniData[] = [];\r\n            if (pos.x > lastPos.x) {\r\n                treeAnis.push({ dir: new Vec3(-angle, 0, 0), tree: trees[0] });\r\n                treeAnis.push({ dir: new Vec3(angle, 0, 0), tree: trees[1] });\r\n            } else if (pos.x < lastPos.x) {\r\n                treeAnis.push({ dir: new Vec3(-angle, 0, 0), tree: trees[2] });\r\n                treeAnis.push({ dir: new Vec3(angle, 0, 0), tree: trees[3] });\r\n            } else if (pos.y > lastPos.y) {\r\n                treeAnis.push({ dir: new Vec3(0, 0, angle), tree: trees[0] });\r\n                treeAnis.push({ dir: new Vec3(0, 0, -angle), tree: trees[2] });\r\n            } else if (pos.y < lastPos.y) {\r\n                treeAnis.push({ dir: new Vec3(0, 0, angle), tree: trees[1] });\r\n                treeAnis.push({ dir: new Vec3(0, 0, -angle), tree: trees[3] });\r\n            }\r\n\r\n            if (treeAnis.length > 0) {\r\n                //播放动画\r\n                DataManager.Instance.treeManager.playAni(treeAnis);\r\n            }\r\n\r\n        }\r\n    }\r\n}"]}