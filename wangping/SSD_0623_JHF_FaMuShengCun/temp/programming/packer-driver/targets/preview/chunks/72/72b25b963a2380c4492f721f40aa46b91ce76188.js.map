{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0623_JHF_FaMuShengCun/assets/JavaScript/Global/EventManager.ts"],"names":["EventManager","constructor","_eventMap","Map","inst","_instance","clear","on","eventName","func","ctx","has","get","push","set","off","events","index","findIndex","i","splice","length","delete","emit","detail","forEach","call"],"mappings":";;;iBAQaA,Y;;;;;;;;;;;;;AAHb;AACA;AACA;8BACaA,Y,GAAN,MAAMA,YAAN,CAAmB;AACdC,QAAAA,WAAW,GAAG;AAAA,eAMdC,SANc,GAM0B,IAAIC,GAAJ,EAN1B;AAAG;;AAEV,mBAAJC,IAAI,GAAiB;AAC5B,iBAAOJ,YAAY,CAACK,SAApB;AACH;;AAIDC,QAAAA,KAAK,GAAS;AACV,eAAKJ,SAAL,CAAeI,KAAf;AACH;;AAEDC,QAAAA,EAAE,CAACC,SAAD,EAAoBC,IAApB,EAAoCC,GAApC,EAAwD;AACtD,cAAI,KAAKR,SAAL,CAAeS,GAAf,CAAmBH,SAAnB,CAAJ,EAAmC;AAC/B,iBAAKN,SAAL,CAAeU,GAAf,CAAmBJ,SAAnB,EAA8BK,IAA9B,CAAmC;AAAEJ,cAAAA,IAAF;AAAQC,cAAAA;AAAR,aAAnC;AACH,WAFD,MAEO;AACH,iBAAKR,SAAL,CAAeY,GAAf,CAAmBN,SAAnB,EAA8B,CAAC;AAAEC,cAAAA,IAAF;AAAQC,cAAAA;AAAR,aAAD,CAA9B;AACH;AACJ;;AAEDK,QAAAA,GAAG,CAACP,SAAD,EAAoBC,IAApB,EAAoCC,GAApC,EAAwD;AACvD,cAAI,KAAKR,SAAL,CAAeS,GAAf,CAAmBH,SAAnB,CAAJ,EAAmC;AAC/B,gBAAMQ,MAAM,GAAG,KAAKd,SAAL,CAAeU,GAAf,CAAmBJ,SAAnB,CAAf;;AACA,gBAAMS,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiBC,CAAC,IAAIA,CAAC,CAACV,IAAF,KAAWA,IAAX,IAAmBU,CAAC,CAACT,GAAF,KAAUA,GAAnD,CAAd;AACAO,YAAAA,KAAK,GAAG,CAAC,CAAT,IAAcD,MAAM,CAACI,MAAP,CAAcH,KAAd,EAAqB,CAArB,CAAd;;AACA,gBAAID,MAAM,CAACK,MAAP,IAAiB,CAArB,EAAwB;AACpB,mBAAKnB,SAAL,CAAeoB,MAAf,CAAsBd,SAAtB;AACH;AACJ,WAPD,MAOO,CACH;AACH;AACJ;;AAEDe,QAAAA,IAAI,CAACf,SAAD,EAAoBgB,MAApB,EAAwC;AACxC,cAAI,KAAKtB,SAAL,CAAeS,GAAf,CAAmBH,SAAnB,CAAJ,EAAmC;AAC/B,iBAAKN,SAAL,CAAeU,GAAf,CAAmBJ,SAAnB,EAA8BiB,OAA9B,CAAsC,QAAiB;AAAA,kBAAhB;AAAChB,gBAAAA,IAAD;AAAOC,gBAAAA;AAAP,eAAgB;AACnD,qBAAOc,MAAP,KAAkB,WAAlB,GAAgCf,IAAI,CAACiB,IAAL,CAAUhB,GAAV,CAAhC,GAAiDD,IAAI,CAACiB,IAAL,CAAUhB,GAAV,EAAec,MAAf,CAAjD;AACH,aAFD;AAGH;AACJ;;AAxCqB,O;;eAAbxB,Y;AAAAA,MAAAA,Y,CAEMK,S,GAA0B,IAAIL,MAAJ,E","sourcesContent":["interface IEvent {\r\n    func: Function,\r\n    ctx: unknown\r\n}\r\n\r\n/**\r\n * 事件管理\r\n */\r\nexport class EventManager {\r\n    private constructor() { }\r\n    private static _instance: EventManager = new EventManager();\r\n    static get inst(): EventManager {\r\n        return EventManager._instance;\r\n    }\r\n\r\n    private _eventMap: Map<string, Array<IEvent>> = new Map<string, Array<IEvent>>();\r\n\r\n    clear(): void {\r\n        this._eventMap.clear();\r\n    }\r\n\r\n    on(eventName: string, func: Function, ctx: unknown): void {\r\n        if (this._eventMap.has(eventName)) {\r\n            this._eventMap.get(eventName).push({ func, ctx });\r\n        } else {\r\n            this._eventMap.set(eventName, [{ func, ctx }]);\r\n        }\r\n    }\r\n\r\n    off(eventName: string, func: Function, ctx: unknown): void {\r\n        if (this._eventMap.has(eventName)) {\r\n            const events = this._eventMap.get(eventName);\r\n            const index = events.findIndex(i => i.func === func && i.ctx === ctx);\r\n            index > -1 && events.splice(index, 1);\r\n            if (events.length == 0) {\r\n                this._eventMap.delete(eventName);\r\n            }\r\n        } else {\r\n            // console.warn(`事件解绑失败：事件名（${eventName}）不存在`);\r\n        }\r\n    }\r\n\r\n    emit(eventName: string, detail?: any): void {\r\n        if (this._eventMap.has(eventName)) {\r\n            this._eventMap.get(eventName).forEach(({func, ctx}) => {\r\n                typeof detail === 'undefined' ? func.call(ctx) : func.call(ctx, detail);\r\n            });\r\n        }\r\n    }\r\n}"]}