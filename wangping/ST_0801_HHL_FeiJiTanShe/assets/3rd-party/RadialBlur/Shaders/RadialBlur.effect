CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%


CCProgram vs %{
  
  precision highp float;
    
  #include <legacy/decode-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;

    v_uv = a_texCoord;
  }

}%

CCProgram ubo %{
    uniform PostUBO {
        vec4 texSize;
        vec4 params;
    };
    #pragma rate inputTexture pass
    uniform sampler2D inputTexture;
    #pragma rate depthTexture pass
    uniform sampler2D depthTexture;
}%

CCProgram fs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <unpack>
  #include <Libs/common>

  #define blurCenter params.xy
  #define blurFactor params.z
  #define highSample params.w

  in vec2 v_uv;
  #include <ubo>

  layout(location = 0) out vec4 fragColor;
  void main () {
    vec2 dir = (blurCenter - v_uv) * blurFactor;


    vec4 sum = vec4(0.0);
    vec2 uv = v_uv;
    sum += texture(inputTexture, uv);

    uv += dir;
    sum += texture(inputTexture, uv);

    uv += dir;
    sum += texture(inputTexture, uv);

    uv += dir;
    sum += texture(inputTexture, uv);

    uv += dir;
    sum += texture(inputTexture, uv);

    if(highSample == 1.){

      uv += dir;
      sum += texture(inputTexture, uv);
      uv += dir;
      sum += texture(inputTexture, uv);
      uv += dir;
      sum += texture(inputTexture, uv);
      uv += dir;
      sum += texture(inputTexture, uv);
      uv += dir;
      sum += texture(inputTexture, uv);
   
      fragColor = sum * 0.1;
    }else{
      fragColor = sum * 0.2;
    }


  }

  
}%

