{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_UnlockPlot/assets/Script/states/MoveState.ts"],"names":["_decorator","Quat","Vec3","State","CharacterType","BehaviourType","Global","ccclass","property","MoveState","constructor","entity","speed","targetPos","isUpate","stopDistance","callback","tempDir","tempMoveVec","tempNextPos","tempForward","tempRotation","tempParentRotation","tempParentRotationInv","onEnter","getType","CHARACTER","characterSkeletalAnimation","console","error","play","getBehaviour","Tree","FindEnemy","getMoveSpeed","onUpdate","dt","soundManager","playPlayerRunSound","moveTargetWorldPos","target","node","worldPosition","copy","moveToTarget","lookAtTarget","subtract","y","normalize","parent","getRotation","invert","transformQuat","fromViewUp","UP","setRotation","deltaTime","distance","length","log","moveDistance","clone","multiplyScalar","add","onExit","set"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Quat, Vec3 } from 'cc';\r\nimport State from './State';\r\nimport Entity, { CharacterType } from '../entitys/Entity';\r\nimport { eventMgr } from '../core/EventManager';\r\nimport { EventType } from '../core/EventType';\r\nimport { BehaviourType, Character } from '../entitys/Character';\r\nimport { enemyCharacter } from '../entitys/enemyCharacter';\r\nimport { Global } from '../core/Global';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MoveState')\r\nexport class MoveState extends State {\r\n    // private target: any = null;\r\n    private speed: number = 0;\r\n    private targetPos: Vec3 = new Vec3();\r\n\r\n    private isUpate: boolean = false;\r\n    private stopDistance: number = 2; // 默认值调整为更合理的值\r\n    private callback: Function = null;\r\n\r\n    // 临时变量，减少GC压力\r\n    private tempDir: Vec3 = new Vec3();\r\n    private tempMoveVec: Vec3 = new Vec3();\r\n    private tempNextPos: Vec3 = new Vec3();\r\n    private tempForward: Vec3 = new Vec3();\r\n    private tempRotation: Quat = new Quat();\r\n    private tempParentRotation: Quat = new Quat();\r\n    private tempParentRotationInv: Quat = new Quat();\r\n\r\n    constructor(entity: Entity) {\r\n        super();\r\n        this.entity = entity;\r\n    }\r\n\r\n    /**进入移动状态 */\r\n    onEnter(callback?: () => void) {\r\n        this.isUpate = true;\r\n\r\n        if (this.entity.getType() == CharacterType.CHARACTER) {\r\n            // 检查骨骼动画组件是否存在\r\n            if (!this.entity.characterSkeletalAnimation) {\r\n                console.error(\"骨骼动画组件未初始化\");\r\n                return;\r\n            }\r\n            this.entity.characterSkeletalAnimation.play(\"kugongnanpao\");\r\n        }\r\n        if ((this.entity as Character).getBehaviour() == BehaviourType.Tree) {\r\n            this.stopDistance = 2;\r\n        } else if ((this.entity as Character).getBehaviour() == BehaviourType.FindEnemy) {\r\n            this.stopDistance = 2;\r\n        }\r\n        else {\r\n            this.stopDistance = 0.5;\r\n        }\r\n\r\n        this.speed = this.entity.getMoveSpeed();\r\n        this.callback = callback;\r\n    }\r\n\r\n    /**移动逻辑处理 */\r\n    onUpdate(dt: number) {\r\n        if (!this.isUpate) return;\r\n        Global.soundManager.playPlayerRunSound();\r\n        // 更新目标位置\r\n        if ((this.entity as Character).getBehaviour() == BehaviourType.FindEnemy) {\r\n            this.entity.moveTargetWorldPos = (this.entity.target as enemyCharacter).node.worldPosition;\r\n        }\r\n        Vec3.copy(this.targetPos, this.entity.moveTargetWorldPos);\r\n\r\n        // 移动到目标\r\n        if (this.moveToTarget(dt, this.targetPos)) {\r\n            \r\n            this.isUpate = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 旋转角色朝向目标位置\r\n     * @param targetPos 目标位置\r\n     */\r\n    private lookAtTarget(targetPos: Vec3) {\r\n        // 计算朝向向量 (目标位置 - 当前位置)\r\n        Vec3.subtract(this.tempForward, targetPos, this.entity.node.worldPosition);\r\n        this.tempForward.y = 0; // 保持水平方向\r\n        this.tempForward.normalize();\r\n\r\n        // 如果有父节点旋转，需要转换到局部空间\r\n        const parent = this.entity.node.parent?.parent;\r\n        if (parent) {\r\n            // 获取父节点旋转\r\n            parent.getRotation(this.tempParentRotation);\r\n\r\n            // 计算逆旋转\r\n            Quat.invert(this.tempParentRotationInv, this.tempParentRotation);\r\n\r\n            // 将世界方向转换到父节点局部空间\r\n            Vec3.transformQuat(this.tempForward, this.tempForward, this.tempParentRotationInv);\r\n        }\r\n\r\n        // 计算旋转四元数\r\n        Quat.fromViewUp(this.tempRotation, this.tempForward, Vec3.UP);\r\n        this.entity.node.setRotation(this.tempRotation);\r\n    }\r\n\r\n    /**\r\n     * 移动角色到目标位置\r\n     * @param deltaTime 帧间隔时间\r\n     * @param targetPos 目标位置\r\n     * @returns 是否到达目标\r\n     */\r\n    private moveToTarget(deltaTime: number, targetPos: Vec3): boolean {\r\n        // 计算方向向量\r\n        Vec3.subtract(this.tempDir, targetPos, this.entity.node.worldPosition);\r\n        this.tempDir.y = 0; // 保持水平移动\r\n\r\n        const distance = this.tempDir.length();\r\n\r\n        console.log(\"=================>\", distance, \"====================>\", this.stopDistance)\r\n        if (distance < this.stopDistance) { // 距离足够近，认为已到达目标\r\n            if (this.callback) {\r\n                this.callback(this.entity);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // 归一化方向向量\r\n        this.tempDir.normalize();\r\n\r\n        // 计算本次移动距离\r\n        const moveDistance = this.speed * deltaTime;\r\n        if (moveDistance >= distance) {\r\n            // 本次移动距离超过剩余距离，直接设置到目标位置\r\n            if (this.callback) {\r\n                this.callback(this.entity);\r\n            }\r\n            console.log(\"=============moveDistance\", targetPos)\r\n            this.entity.node.worldPosition = targetPos.clone();\r\n            this.lookAtTarget(targetPos);\r\n            return true;\r\n        } else {\r\n            // 计算移动向量\r\n            Vec3.multiplyScalar(this.tempMoveVec, this.tempDir, moveDistance);\r\n\r\n            // 计算下一个位置\r\n            Vec3.add(this.tempNextPos, this.entity.node.worldPosition, this.tempMoveVec);\r\n\r\n            // 设置新位置\r\n            this.entity.node.worldPosition = this.tempNextPos;\r\n\r\n            // 转向目标\r\n            this.lookAtTarget(targetPos);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**退出移动状态 */\r\n    onExit() {\r\n        this.entity.moveTargetWorldPos = null;\r\n        // this.target = null;\r\n        this.speed = 0;\r\n        this.targetPos.set(0, 0, 0);\r\n        this.stopDistance = 2;\r\n        this.isUpate = false;\r\n        this.callback = null;\r\n    }\r\n}"]}