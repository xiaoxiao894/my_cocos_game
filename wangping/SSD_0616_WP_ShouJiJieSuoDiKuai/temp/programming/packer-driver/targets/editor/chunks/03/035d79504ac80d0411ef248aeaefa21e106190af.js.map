{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_0616_WP_ShouJiJieSuoDiKuai/assets/Script/core/EventManager.ts"],"names":["EventManager","_eventMap","Map","instance","_instance","on","eventName","callback","target","has","set","get","push","once","wrapper","args","off","apply","listeners","length","i","listener","splice","emit","slice","e","console","error","removeAll","forEach","eventMgr"],"mappings":"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","sourcesContent":["// assets/scripts/framework/EventManager.ts\r\ninterface IEventCallback {\r\n    callback: Function;\r\n    target: any;\r\n}\r\n\r\n/**\r\n * Cocos Creator 3.8.0 事件管理系统\r\n * 功能：\r\n * 1. 全局事件监听与派发\r\n * 2. 自动清理绑定\r\n * 3. 一次性事件监听\r\n */\r\nexport class EventManager {\r\n    private static _instance: EventManager = null;\r\n    private _eventMap: Map<string, Array<IEventCallback>> = new Map();\r\n\r\n    /**\r\n     * 获取单例\r\n     */\r\n    public static get instance(): EventManager {\r\n        if (!this._instance) {\r\n            this._instance = new EventManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 监听事件\r\n     * @param eventName 事件名称\r\n     * @param callback 回调函数\r\n     * @param target 绑定对象(用于自动移除监听)\r\n     */\r\n    public on(eventName: string, callback: Function, target?: any): void {\r\n        if (!this._eventMap.has(eventName)) {\r\n            this._eventMap.set(eventName, []);\r\n        }\r\n\r\n        this._eventMap.get(eventName)!.push({\r\n            callback: callback,\r\n            target: target\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 一次性监听\r\n     * @param eventName 事件名称\r\n     * @param callback 回调函数\r\n     * @param target 绑定对象\r\n     */\r\n    public once(eventName: string, callback: Function, target?: any): void {\r\n        const wrapper = (...args: any[]) => {\r\n            this.off(eventName, wrapper, target);\r\n            callback.apply(target, args);\r\n        };\r\n        this.on(eventName, wrapper, target);\r\n    }\r\n\r\n    /**\r\n     * 取消监听\r\n     * @param eventName 事件名称\r\n     * @param callback 回调函数\r\n     * @param target 绑定对象\r\n     */\r\n    public off(eventName: string, callback?: Function, target?: any): void {\r\n        if (!this._eventMap.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        const listeners = this._eventMap.get(eventName)!;\r\n\r\n        // 如果没有指定callback，移除该事件所有监听\r\n        if (!callback) {\r\n            listeners.length = 0;\r\n            return;\r\n        }\r\n\r\n        // 移除指定监听\r\n        for (let i = listeners.length - 1; i >= 0; i--) {\r\n            const listener = listeners[i];\r\n            if ((!callback || listener.callback === callback) && \r\n                (!target || listener.target === target)) {\r\n                listeners.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     * @param eventName 事件名称\r\n     * @param args 事件参数\r\n     */\r\n    public emit(eventName: string, ...args: any[]): void {\r\n        if (!this._eventMap.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        const listeners = this._eventMap.get(eventName)!.slice(); // 创建副本以防回调中修改原数组\r\n\r\n        for (const listener of listeners) {\r\n            try {\r\n                listener.callback.apply(listener.target, args);\r\n            } catch (e) {\r\n                console.error(`EventManager emit error: ${eventName}`, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除对象所有事件监听\r\n     * @param target 要移除的对象\r\n     */\r\n    public removeAll(target: any): void {\r\n        this._eventMap.forEach((listeners, eventName) => {\r\n            this.off(eventName, null, target);\r\n        });\r\n    }\r\n}\r\n\r\n// 导出全局单例\r\nexport const eventMgr = EventManager.instance;"]}