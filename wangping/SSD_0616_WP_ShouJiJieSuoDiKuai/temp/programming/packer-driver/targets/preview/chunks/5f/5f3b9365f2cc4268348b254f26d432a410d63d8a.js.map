{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_UnlockPlot/assets/Script/Game/PlayerController.ts"],"names":["_decorator","Component","instantiate","Vec3","BehaviourType","Character","ResourceManager","CharacterType","Global","enemyCharacter","goodsDrop","eventMgr","EventType","BubbleFead","ccclass","PlayerController","parentNode","birthNodesPos","endNodesPos","cornNodesPos","enemyHandOverPos","allCharacterPos","enemySelfLanPos","enemyParentNode","curCharacter","curCharacterIndex","curCharacterHandOverIndex","enemyDieNum","characterList","characterListPos","hp","attack","Instance","_instance","initCharacters","prefab","instance","loadPrefab","characterPrefabPath","i","length","characterNode","character","getComponent","handOverNode","getChildByName","cornHandOverNode","console","error","setData","String","CHARACTER","entitySetPosition","position","push","addChild","createCharacter","log","squenceMove","target","behaviourType","node","name","initialIndex","characterIndex","getFindTarget","setFindTarget","setBehaviour","moveTargetWorldPos","worldPosition","clone","strtMoveTree","squenceHandOver","active","woodNum","idle","Idel","curHanOverType","Number","getId","strtMoveHandOver","moveCornPos","fun","ConrPost","getBehaviour","CutTree","scheduleOnce","moveFindEnemyLandPos","enemyParent","FindLandPos","enemy","enemyScrpt","findEnemyPos","isFindCharacter","attackEnemy","cahracter","getMachineName","useSkill","moveFindEnemHandOver","EnemyHnadOverPos","findEnemyHandOver","resetState","removeAllChildren","resetBehaviour","allCharacterHanover","num","restoreItemsInAllBackpacks","emit","ENTITY_ENEMY_DIE","cutCornController","selfNode","groundEffect","arrowIds","id","hideFead","CutCorn","cutCorn","lockState","cornNum","GameHandOverComplate","index","move","prefab1","getCharacters","getCharacterById","find","clearCharacters","forEach","isValid","destroy","playerController"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Vec3 } from 'cc';\r\nimport { BehaviourType, Character } from '../entitys/Character';\r\nimport { ResourceManager } from '../core/ResourceManager';\r\nimport Entity, { CharacterType } from '../entitys/Entity';\r\nimport { Global } from '../core/Global';\r\nimport { GroundEffct } from '../GroundEffct';\r\nimport { enemyCharacter } from '../entitys/enemyCharacter';\r\nimport { goodsDrop } from '../goodsDrop';\r\nimport { eventMgr } from '../core/EventManager';\r\nimport { EventType } from '../core/EventType';\r\nimport { BubbleFead } from '../BubbleFead';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('PlayerController')\r\nexport class PlayerController extends Component {\r\n\r\n\r\n    private parentNode: Node = null;\r\n    public static _instance: PlayerController = null;\r\n    public static get Instance() {\r\n        if (this._instance == null) {\r\n            this._instance = new PlayerController();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public birthNodesPos: Node[] = []\r\n    private endNodesPos: Node[] = []\r\n    private cornNodesPos: Node[] = []\r\n\r\n    private enemyHandOverPos: Node[] = []\r\n    private allCharacterPos: Node[] = [];\r\n\r\n    private enemySelfLanPos: Node[] = [];\r\n\r\n    private enemyParentNode: Node = null;\r\n\r\n    private curCharacter: Character = null;\r\n    private curCharacterIndex: number = 1;\r\n    private curCharacterHandOverIndex: number = 1;\r\n\r\n    private enemyDieNum = 0;\r\n\r\n    //@property({ type: [Character], tooltip: '角色列表' })\r\n    private characterList: Character[] = [];\r\n    private characterListPos: Character[] = [];\r\n\r\n\r\n    //@property({ tooltip: '初始生命值' })\r\n    private hp: number = 3;\r\n\r\n    // @property({ tooltip: '初始攻击力' })\r\n    private attack: number = 1;\r\n    /**\r\n     *  初始化角色 四个角色  \r\n     *  id 从1 开始\r\n     * 名字 player1 player2 player3 player4\r\n     * 类型  玩家\r\n     * @param parentNode \r\n     */\r\n    public async initCharacters(parentNode: Node, birthNodesPos: Node[],\r\n        endNodesPos: Node[], cornNodesPos: Node[], enemyHandOverPos: Node[],\r\n        allCharacterPos: Node[], enemySelfLanPos: Node[]): Promise<void> {\r\n\r\n        if (birthNodesPos) {\r\n            this.birthNodesPos = birthNodesPos\r\n        }\r\n        if (endNodesPos) {\r\n            this.endNodesPos = endNodesPos;\r\n        }\r\n        if (cornNodesPos) {\r\n            this.cornNodesPos = cornNodesPos;\r\n        }\r\n        if (enemyHandOverPos) {\r\n            this.enemyHandOverPos = enemyHandOverPos;\r\n        }\r\n        if (allCharacterPos) {\r\n            this.allCharacterPos = allCharacterPos;\r\n        }\r\n        if (enemySelfLanPos) {\r\n            this.enemySelfLanPos = enemySelfLanPos;\r\n        }\r\n        this.parentNode = parentNode;\r\n\r\n        try {\r\n            // 异步加载预制体\r\n            const prefab = await ResourceManager.instance.loadPrefab(Global.characterPrefabPath);\r\n\r\n            // 初始化角色\r\n            for (let i = 0; i < birthNodesPos.length; i++) {\r\n                const characterNode = instantiate(prefab);\r\n                const character = characterNode.getComponent(Character);\r\n                character.handOverNode = parentNode.getChildByName(\"treeHandOver\")\r\n                character.cornHandOverNode = parentNode.getChildByName(\"cornHandOver\")\r\n                if (!character) {\r\n                    console.error(`角色预制体缺少Character组件: ${Global.characterPrefabPath}`);\r\n                    continue;\r\n                }\r\n                // 设置角色数据\r\n                character.setData(\r\n                    String(i),              // ID\r\n                    `player${i + 1}`,               // 名称\r\n                    this.hp,                    // 生命值\r\n                    this.attack,                // 攻击力\r\n                    CharacterType.CHARACTER                 // 类型\r\n                );\r\n                // 设置角色位置\r\n                character.entitySetPosition(this.birthNodesPos[i].position);\r\n\r\n                // 添加到角色列表和场景\r\n                this.characterList.push(character);\r\n                this.parentNode.addChild(characterNode);\r\n\r\n                // character.idle(character);\r\n\r\n                // 触发角色初始化动画\r\n                //character.playInitAnimation();\r\n            }\r\n            this.createCharacter(prefab);\r\n            console.log(`成功初始化 ${this.characterList.length} 个角色`);\r\n        } catch (error) {\r\n            console.error(\"角色初始化失败:\", error);\r\n\r\n        }\r\n    }\r\n    // 人物移动\r\n    squenceMove(target: any, behaviourType: BehaviourType) {\r\n        console.log(\"squenceMove == \" + target.node.name, \"===========>\", target.node.position);\r\n        // 记录初始索引，用于判断是否循环了一轮\r\n        const initialIndex = this.curCharacterIndex;\r\n        console.log(\"initialIndex == \" + initialIndex)\r\n        console.log(\"this.curCharacterIndex == \" + this.curCharacterIndex)\r\n        // 循环查找可用角色\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const characterIndex = (initialIndex + i) % this.characterList.length;\r\n            const character = this.characterList[characterIndex];\r\n\r\n            // 找到未在寻找目标的角色\r\n            if (!character.getFindTarget()) {\r\n                console.log(\"initialIndex111111 == \" + initialIndex)\r\n                //console.log(\"this.curCharacterIndex1111111 == \" + this.curCharacterIndex)\r\n                this.curCharacterIndex = (characterIndex + 1) % this.characterList.length;\r\n                character.setFindTarget(true);\r\n                character.setBehaviour(behaviourType);\r\n                character.target = target;\r\n                character.moveTargetWorldPos = target.node.worldPosition.clone();\r\n                character.strtMoveTree();\r\n\r\n                console.log(\"initialIndex222222222 == \" + this.curCharacterIndex)\r\n                return; // 找到合适角色后退出函数\r\n            }\r\n\r\n        }\r\n        // 如果循环结束后没有找到可用角色，则输出提示\r\n        console.log(\"没有找到可用的角色\");\r\n    }\r\n    //人物移动到交付点\r\n    squenceHandOver(target: any, behaviourType: BehaviourType) {\r\n        for (let i = 0; i < this.characterListPos.length; i++) {\r\n            const character = this.characterListPos[i];\r\n            character.entitySetPosition(new Vec3(19.5, 0, 19.8));\r\n            character.node.active = false;\r\n        }\r\n\r\n        console.log(\"initialIndex squenceHandOver == \" + this.curCharacterIndex)\r\n        // 记录初始索引，用于判断是否循环了一轮\r\n        // const initialIndex = this.curCharacterHandOverIndex;\r\n\r\n        // 循环查找可用角色\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            //const characterIndex = (initialIndex + i) % this.characterList.length;\r\n            const character = this.characterList[i];\r\n\r\n            // 找到未在寻找目标的角色//!character.getFindTarget() &&\r\n            if (character.woodNum > 0) {\r\n                character.idle()\r\n                character.setFindTarget(false);\r\n                character.setBehaviour(BehaviourType.Idel);\r\n                // this.scheduleOnce(() => {\r\n                character.setFindTarget(true);\r\n                character.curHanOverType = 1;\r\n                character.setBehaviour(behaviourType);\r\n                character.target = this.birthNodesPos[Number(character.getId())];\r\n                character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n                character.strtMoveHandOver();\r\n                // }, 0.1)\r\n\r\n\r\n\r\n                console.log(\"initialIndex squenceHandOver 1111111== \" + this.curCharacterIndex)\r\n                //return; // 找到合适角色后退出函数\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    // 到达传送点\r\n    // moveTransmitPos() {\r\n    //     for (let i = 0; i < this.characterList.length; i++) {\r\n    //         const character = this.characterList[i];\r\n\r\n    //         // 找到未在寻找目标的角色\r\n\r\n    //         character.setFindTarget(true);\r\n    //         character.setBehaviour(BehaviourType.Transmit);\r\n    //         character.target = this.endNodesPos[Number(character.getId())];\r\n    //         character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n    //         character.moveTransmit();\r\n\r\n    //     }\r\n    // }\r\n    // 到达收割玉米点\r\n    moveCornPos() {\r\n        let fun = (character) => {\r\n            character.idle()\r\n            character.setFindTarget(false);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            // 找到未在寻找目标的角色\r\n\r\n            character.setFindTarget(true);\r\n            character.setBehaviour(BehaviourType.ConrPost);\r\n            character.target = this.cornNodesPos[Number(character.getId())];\r\n            character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            character.moveCornPos();\r\n        }\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n\r\n            if (character.getBehaviour() == BehaviourType.CutTree) {\r\n                this.scheduleOnce(() => {\r\n                    fun(character)\r\n                }, 2)\r\n            } else {\r\n                fun(character)\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n    // // 寻找怪物的位置\r\n    // moveFindEnemyPos(enemyParent: Node) {\r\n\r\n\r\n    //     enemyParent.active = true;\r\n    //     let enemyParentNode = enemyParent;\r\n    //     for (let i = 0; i < this.characterList.length; i++) {\r\n\r\n    //         const character = this.characterList[i];\r\n\r\n    //         // 寻找目标的角色\r\n    //         character.setFindTarget(true);\r\n    //         character.setBehaviour(BehaviourType.FindEnemy);\r\n    //         let enemy = enemyParentNode.getChildByName(\"enmey_\" + character.getId());\r\n    //         character.target = enemy.getComponent(enemyCharacter);\r\n    //         // character.getComponent(goodsDrop).initGoods();\r\n    //         character.moveTargetWorldPos = (character.target as enemyCharacter).node.worldPosition.clone();\r\n    //         character.findEnemy();\r\n\r\n    //         //敌人 寻找人物\r\n    //         let enemyScrpt = enemy.getComponent(enemyCharacter);\r\n    //         enemyScrpt.target = character\r\n    //         enemyScrpt.moveTargetWorldPos = character.node.worldPosition.clone();\r\n    //         enemyScrpt.isFindCharacter = true;\r\n\r\n    //     }\r\n    // }\r\n    // 寻找怪物地块自己站的位置\r\n    moveFindEnemyLandPos(enemyParent: Node) {\r\n\r\n        // enemyParent.active = true;\r\n        // let enemyParentNode = enemyParent;\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            \r\n\r\n            const character = this.characterList[i];\r\n            character.target = null;\r\n            character.moveTargetWorldPos = null;\r\n\r\n            // 寻找目标的角色\r\n            character.setFindTarget(true);\r\n            character.setBehaviour(BehaviourType.FindLandPos);\r\n\r\n            character.target = this.enemySelfLanPos[Number(character.getId())];\r\n            character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n\r\n\r\n            let enemyParentNode = enemyParent;\r\n            let enemy = enemyParentNode.getChildByName(\"SangshiPrefab_\" + character.getId());\r\n            let enemyScrpt = enemy.getComponent(enemyCharacter);\r\n            character.findEnemyPos(enemyScrpt, enemyParentNode);\r\n            //character.findEnemy();\r\n            //敌人 寻找人物\r\n            enemyScrpt.target = character\r\n            enemyScrpt.moveTargetWorldPos = character.node.worldPosition.clone();\r\n            enemyScrpt.isFindCharacter = true;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //攻击敌人\r\n    attackEnemy(cahracter, enemy) {\r\n\r\n        if (cahracter.getMachineName() == \"attack\") {\r\n            return;\r\n        }\r\n        if (enemy.hp <= 0) {\r\n            return;\r\n        }\r\n        cahracter.target = enemy;\r\n        cahracter.setFindTarget(true);\r\n        cahracter.useSkill(() => {\r\n            // this.enemyDieNum++;\r\n            // if (this.enemyDieNum >= 4) {\r\n            //     eventMgr.emit(EventType.ENTITY_ENEMY_DIE, this);\r\n            // }\r\n        })\r\n        //敌人全部四万\r\n\r\n    }\r\n    // 寻找敌人交付点位置\r\n    moveFindEnemHandOver() {\r\n        let fun = (character) => {\r\n            character.idle()\r\n            character.setFindTarget(false);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            // 找到未在寻找目标的角色\r\n\r\n            character.setFindTarget(true);\r\n            character.setBehaviour(BehaviourType.EnemyHnadOverPos);\r\n            character.target = this.enemyHandOverPos[Number(character.getId())];\r\n            character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            character.findEnemyHandOver();\r\n        }\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n\r\n            if (character.getBehaviour() == BehaviourType.CutTree) {\r\n                this.scheduleOnce(() => {\r\n                    fun(character)\r\n                }, 2)\r\n            } else {\r\n                fun(character)\r\n            }\r\n\r\n\r\n        }\r\n        // //let enemyParentNode = enemyParent;\r\n        // for (let i = 0; i < this.characterList.length; i++) {\r\n        //     const character = this.characterList[i];\r\n        //     // 寻找目标的角色\r\n        //     character.setFindTarget(true);\r\n        //     character.setBehaviour(BehaviourType.EnemyHnadOverPos);\r\n        //     character.target = this.enemyHandOverPos[Number(character.getId())];\r\n        //     character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n        //     character.findEnemyHandOver();\r\n\r\n        // }\r\n    }\r\n    //重置人物状态\r\n    resetState() {\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n\r\n            // 找到未在寻找目标的角色\r\n            character.woodNum = 0;\r\n            character.node.getChildByName(\"backpack\").removeAllChildren();\r\n            character.setFindTarget(false);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            // character.target = this.endNodesPos[Number(character.getId())];\r\n            // character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            character.idle()\r\n\r\n        }\r\n    }\r\n    //只重置人物行为状态 和可操作\r\n    resetBehaviour() {\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n            character.setFindTarget(false);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            // character.target = this.endNodesPos[Number(character.getId())];\r\n            // character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            character.idle()\r\n\r\n        }\r\n    }\r\n    allCharacterHanover() {\r\n        let num = 0;\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n            character.setFindTarget(false);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            character.getComponent(goodsDrop).restoreItemsInAllBackpacks();\r\n            num++;\r\n            // character.target = this.endNodesPos[Number(character.getId())];\r\n            // character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            //character.idle()\r\n\r\n        }\r\n        if (num >= 4) {\r\n            eventMgr.emit(EventType.ENTITY_ENEMY_DIE, this);\r\n        }\r\n    }\r\n\r\n    // 开始收割玉米\r\n    cutCornController(selfNode: Node, groundEffect: GroundEffct) {\r\n\r\n        const arrowIds = {\r\n            'Arrow1': 0,\r\n            'Arrow2': 1,\r\n            'Arrow3': 2,\r\n            'Arrow4': 3\r\n        };\r\n\r\n        const id = arrowIds[selfNode.name] ?? -1; // 默认值设为-1表示未匹配\r\n        const character = this.characterList[id];\r\n        if (character.getFindTarget()) {\r\n            console.log(\"在收割玉米的状态\")\r\n            return;\r\n        } else {\r\n            //渐变消失效果\r\n            if (selfNode.getComponent(BubbleFead)) {\r\n                selfNode.getComponent(BubbleFead).hideFead();\r\n            }\r\n            character.groundEffect = groundEffect;\r\n            character.setFindTarget(true);\r\n            character.setBehaviour(BehaviourType.CutCorn);\r\n            character.cutCorn(() => {\r\n\r\n            })\r\n        }\r\n    }\r\n    // // 开始寻找怪物\r\n    // findEnemyPos() {\r\n    //     for (let i = 0; i < this.characterList.length; i++) {\r\n    //         const character = this.characterList[i];\r\n\r\n    //         // 找到未在寻找目标的角色\r\n\r\n    //         character.setFindTarget(true);\r\n    //         character.setBehaviour(BehaviourType.Transmit);\r\n    //         character.target = this.endNodesPos[Number(character.getId())];\r\n    //         character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n    //         character.moveTransmit();\r\n\r\n    //     }\r\n    // }\r\n    //人物不可在操作\r\n    lockState() {\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n            const character = this.characterList[i];\r\n\r\n            // 找到未在寻找目标的角色\r\n            character.woodNum = 0;\r\n            character.cornNum = 0;\r\n            character.node.getChildByName(\"backpack\").removeAllChildren();\r\n            character.node.getChildByName(\"backpack1\").removeAllChildren();\r\n            character.setFindTarget(true);\r\n            character.setBehaviour(BehaviourType.Idel);\r\n            // character.target = this.endNodesPos[Number(character.getId())];\r\n            // character.moveTargetWorldPos = (character.target as Node).worldPosition.clone();\r\n            character.idle()\r\n\r\n        }\r\n    }\r\n\r\n    GameHandOverComplate() {\r\n        this.lockState()\r\n        let index = 0;\r\n        //操作的四个人位置\r\n        for (let i = 0; i < this.characterList.length; i++) {\r\n\r\n            const character = this.characterList[i];\r\n            character.moveTargetWorldPos = this.allCharacterPos[index].worldPosition.clone();\r\n            index++;\r\n            character.move((character: Entity) => {\r\n                (character as Character).setFindTarget(true);\r\n                (character as Character).setBehaviour(BehaviourType.Idel);\r\n                (character as Character).idle()\r\n            })\r\n        }\r\n        //\r\n        for (let i = 0; i < this.characterListPos.length; i++) {\r\n            this.scheduleOnce(() => {\r\n                const character = this.characterListPos[i];\r\n                character.node.active = true;\r\n                character.moveTargetWorldPos = this.allCharacterPos[index - 1].worldPosition.clone();\r\n                index++\r\n                character.move((character: Entity) => {\r\n                    (character as Character).setFindTarget(true);\r\n                    (character as Character).setBehaviour(BehaviourType.Idel);\r\n                    (character as Character).idle()\r\n                })\r\n            }, i * 0.2)\r\n\r\n            // const character =  this.parentNode.children[i].getComponent(Character)\r\n\r\n            // character.move()\r\n        }\r\n    }\r\n    createCharacter(prefab1) {\r\n        let prefab = prefab1\r\n\r\n        // 初始化角色\r\n        for (let i = 0; i < 8; i++) {\r\n            const characterNode = instantiate(prefab);\r\n            const character = characterNode.getComponent(Character);\r\n            if (!character) {\r\n                console.error(`角色预制体缺少Character组件: ${Global.characterPrefabPath}`);\r\n                continue;\r\n            }\r\n            // 设置角色数据\r\n            character.setData(\r\n                String(4 + i),              // ID\r\n                `player${i + 1 + 4}`,               // 名称\r\n                this.hp,                    // 生命值\r\n                this.attack,                // 攻击力\r\n                CharacterType.CHARACTER                 // 类型\r\n            );\r\n            // 设置角色位置\r\n            character.entitySetPosition(new Vec3(24, 0, 180));\r\n\r\n            this.characterListPos.push(character);\r\n            this.parentNode.addChild(characterNode);\r\n\r\n\r\n        }\r\n    }\r\n    // 获取角色列表\r\n    public getCharacters(): Character[] {\r\n        return this.characterList;\r\n    }\r\n    // 根据ID获取角色\r\n    public getCharacterById(id: string): Character | null {\r\n        return this.characterList.find(character => character.getId() === id) || null;\r\n    }\r\n\r\n    // 清理所有角色\r\n    public clearCharacters(): void {\r\n        this.characterList.forEach(character => {\r\n            if (character.node && character.node.isValid) {\r\n                character.node.destroy();\r\n            }\r\n        });\r\n        this.characterList = [];\r\n    }\r\n}\r\n// 导出全局单例\r\nexport const playerController = PlayerController.Instance;\r\n"]}