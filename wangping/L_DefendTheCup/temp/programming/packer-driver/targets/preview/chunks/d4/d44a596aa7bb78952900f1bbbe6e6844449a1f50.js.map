{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Actor/SearchMonsters.ts"],"names":["_decorator","Component","Vec3","DataManager","ccclass","property","SearchMonsters","start","Instance","searchMonsters","getAttackTargets","player","attackRange","maxAngle","gridSystem","nearby","getNearbyNodes","worldPosition","forward","clone","normalize","result","enemy","activeInHierarchy","toEnemy","subtract","dist","length","angle","Math","acos","dot","PI","push"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,I,OAAAA,I;;AAC7BC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;gCAGjBM,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCL,SADpC,CAC8C;AAC1CM,QAAAA,KAAK,GAAG;AACJ;AAAA;AAAA,0CAAYC,QAAZ,CAAqBC,cAArB,GAAsC,IAAtC;AACH;;AAEDC,QAAAA,gBAAgB,CAACC,MAAD,EAAeC,WAAf,EAAoCC,QAApC,EAA8D;AAC1E,cAAI,CAAC;AAAA;AAAA,0CAAYL,QAAZ,CAAqBM,UAA1B,EAAsC;AAEtC,cAAMC,MAAM,GAAG;AAAA;AAAA,0CAAYP,QAAZ,CAAqBM,UAArB,CAAgCE,cAAhC,CAA+CL,MAAM,CAACM,aAAtD,EAAqEL,WAArE,CAAf;AACA,cAAMM,OAAO,GAAGP,MAAM,CAACO,OAAP,CAAeC,KAAf,GAAuBC,SAAvB,EAAhB;AACA,cAAMC,MAAc,GAAG,EAAvB;;AAEA,eAAK,IAAMC,KAAX,IAAoBP,MAApB,EAA4B;AACxB,gBAAI,CAACO,KAAK,CAACC,iBAAX,EAA8B;AAE9B,gBAAMC,OAAO,GAAGF,KAAK,CAACL,aAAN,CAAoBE,KAApB,GAA4BM,QAA5B,CAAqCd,MAAM,CAACM,aAA5C,CAAhB;AACA,gBAAMS,IAAI,GAAGF,OAAO,CAACG,MAAR,EAAb;AAEA,gBAAID,IAAI,GAAGd,WAAX,EAAwB;AAExBY,YAAAA,OAAO,CAACJ,SAAR;AACA,gBAAMQ,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAU5B,IAAI,CAAC6B,GAAL,CAASb,OAAT,EAAkBM,OAAlB,CAAV,IAAwC,GAAxC,GAA8CK,IAAI,CAACG,EAAjE;;AAEA,gBAAIJ,KAAK,IAAIf,QAAb,EAAuB;AACnBQ,cAAAA,MAAM,CAACY,IAAP,CAAYX,KAAZ;AACH;AACJ;;AAED,iBAAOD,MAAP;AACH;;AA7ByC,O","sourcesContent":["import { _decorator, Component, Node, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SearchMonsters')\r\nexport class SearchMonsters extends Component {\r\n    start() {\r\n        DataManager.Instance.searchMonsters = this;    \r\n    }\r\n    \r\n    getAttackTargets(player: Node, attackRange: number, maxAngle: number): Node[] {\r\n        if (!DataManager.Instance.gridSystem) return;\r\n\r\n        const nearby = DataManager.Instance.gridSystem.getNearbyNodes(player.worldPosition, attackRange);\r\n        const forward = player.forward.clone().normalize();\r\n        const result: Node[] = [];\r\n\r\n        for (const enemy of nearby) {\r\n            if (!enemy.activeInHierarchy) continue;\r\n\r\n            const toEnemy = enemy.worldPosition.clone().subtract(player.worldPosition);\r\n            const dist = toEnemy.length();\r\n\r\n            if (dist > attackRange) continue;\r\n\r\n            toEnemy.normalize();\r\n            const angle = Math.acos(Vec3.dot(forward, toEnemy)) * 180 / Math.PI;\r\n\r\n            if (angle <= maxAngle) {\r\n                result.push(enemy);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n"]}