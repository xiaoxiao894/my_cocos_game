{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Actor/PartnerManager.ts"],"names":["_decorator","Animation","Component","director","instantiate","Node","Pool","Prefab","Quat","tween","Vec3","DataManager","Bullet","ItemAreaManager","ccclass","property","PartnerManager","prefabPool","bigSkillsPrefabPool","hitPrefabPool","isSkillAllPlaying","attackName","direction","nearestMonster","isNormalAttacking","monsterParent","isTargetLocked","_isIdlePlaying","_idleAnimFinishedHandler","init","Instance","monsterManager","poolCount","bigSkillsPrefabPoolCount","projectile","node","removeFromParent","bigSkill","hitPrefab","onDestroy","destroy","create","alloc","parent","getScene","addChild","active","onProjectileDead","free","update","dt","monsters","searchMonsters","getAttackTargets","partnerWorldPos","worldPosition","getNearestMonster","aniName","name","slice","isRight","isTargetOnRight","clipName","playPartnerAnim","scheduleOnce","partnerParent","getChildByName","ani","getComponent","play","off","EventType","FINISHED","on","fireAtTarget","bullet","selfPos","monsterPos","clone","subtract","normalize","midPoint","add","multiplyScalar","maxOffset","distance","radius","Math","min","spawnPos","y","setWorldPosition","lookAt","UP","fixQuat","fromAxisAngle","PI","currentQuat","getRotation","finalQuat","multiply","setRotation","bulletComp","explosiveSpecialEffects","bind","target","speed","anim","state","getState","stop","console","warn","worldPos","skillExplosion","x","z","children","once","hitMonsters","monster","distSqr","squaredDistance","push","length","killMonsters","partnerPos","nearest","minDistance","Infinity","isValid","self","targetPos","forward","toTarget","right","cross","dot","releaseMajorSkills","itemAreaManager","center","directionAngleDeg","directionAngleRad","sin","cos","ring","ringCount","baseRadius","initialRadius","ringStep","delay","delayPerRing","candidateCount","selectCount","indices","Array","from","_","i","j","floor","random","soundManager","playRingSoundDynamically","idx","angleStep","spreadAngle","angleDeg","angleRad","dir","basePos","randomOffset","radiusRandomOffset","angleY","setTimeout","skillNode","resetSkillNode","getEnemiesInRange","call","start","position","skill","skillAni","skillDetectRadius","radiusSqr","enemies","enemy","pos","dx","dz"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AudioSource, Component, director, find, instantiate, Node, Pool, Prefab, Quat, tween, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { Bullet } from './Bullet';\r\nimport { EachPartnerManager } from './EachPartnerManager';\r\nimport { PartnerAttackEnum } from './StateDefine';\r\nimport { ItemAreaManager } from '../Area/ItemAreaManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PartnerManager')\r\nexport class PartnerManager extends Component {\r\n    @property(Prefab)\r\n    projectile: Prefab | null = null;\r\n\r\n    // 大技能\r\n    @property(Prefab)\r\n    bigSkill: Prefab | null = null;\r\n\r\n    @property(Prefab)\r\n    hitPrefab: Prefab | null = null;\r\n\r\n    prefabPool: Pool<Node> | null = null;\r\n    bigSkillsPrefabPool: Pool<Node> | null = null;\r\n    hitPrefabPool: Pool<Node> | null = null;\r\n\r\n    public isSkillAllPlaying = false\r\n    // 攻击动画名字\r\n    public attackName = null;\r\n    public direction = \"L\"\r\n\r\n    // 最近的怪\r\n    private nearestMonster = null;\r\n    // 是否普通攻击\r\n    private isNormalAttacking = true;\r\n\r\n    private monsterParent = null;\r\n    init() {\r\n        // 获取所有怪\r\n        this.monsterParent = DataManager.Instance.monsterManager.monsterParent;\r\n\r\n        const poolCount = 5;\r\n        const bigSkillsPrefabPoolCount = 100;\r\n\r\n        // 普通攻击\r\n        this.prefabPool = new Pool(() => {\r\n            return instantiate(this.projectile!)\r\n        }, poolCount, (node: Node) => {\r\n            node.removeFromParent();\r\n        })\r\n\r\n        // 大技能\r\n        this.bigSkillsPrefabPool = new Pool(() => {\r\n            return instantiate(this.bigSkill!);\r\n        }, bigSkillsPrefabPoolCount, (node: Node) => {\r\n            node.removeFromParent();\r\n        })\r\n\r\n        // 攻击特效\r\n        this.hitPrefabPool = new Pool(() => {\r\n            return instantiate(this.hitPrefab!)\r\n        }, poolCount, (node: Node) => {\r\n            node.removeFromParent();\r\n        })\r\n    }\r\n\r\n    onDestroy() {\r\n        this.prefabPool.destroy();\r\n    }\r\n\r\n    create(prefabPool) {\r\n        let node = prefabPool.alloc();\r\n        if (node.parent == null) {\r\n            director.getScene().addChild(node);\r\n        }\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    onProjectileDead(prefabPool, node) {\r\n        node.active = false;\r\n        prefabPool.free(node);\r\n    }\r\n\r\n    // 类的属性中增加：\r\n    private isTargetLocked = false; // 用于锁定目标\r\n    private _isIdlePlaying: boolean = false;\r\n    private _idleAnimFinishedHandler: () => void = null;\r\n\r\n    update(dt: number) {\r\n        if (this.isSkillAllPlaying) return;\r\n\r\n        const monsters = DataManager.Instance.searchMonsters.getAttackTargets(this.node, 20, 360);\r\n        const partnerWorldPos = this.node.worldPosition;\r\n\r\n        // 仅在目标没有锁定时，更新目标 \r\n        if (!this.isTargetLocked) {\r\n            this.nearestMonster = this.getNearestMonster(monsters, partnerWorldPos);\r\n        }\r\n\r\n        if (this.nearestMonster && this.isNormalAttacking) {\r\n            this.isNormalAttacking = false;\r\n\r\n            const aniName = this.node.name.slice(0, -1);\r\n            const isRight = this.isTargetOnRight(this.node, this.nearestMonster);\r\n            const clipName = isRight ? `${aniName}L` : `${aniName}R`;\r\n            if (isRight) {\r\n                this.direction = \"L\";\r\n            } else {\r\n                this.direction = \"R\";\r\n            }\r\n\r\n            this.playPartnerAnim(clipName);\r\n\r\n            // 攻击中，解除 idle 播放状态\r\n            this.isTargetLocked = true;\r\n            this._isIdlePlaying = false;\r\n\r\n            this.scheduleOnce(() => {\r\n                this.isNormalAttacking = true;\r\n                this.isTargetLocked = false;\r\n            }, 3);\r\n        } else {\r\n            const partnerParent = this.node.getChildByName(\"PartnerParent\");\r\n            if (partnerParent) {\r\n                const ani = partnerParent.getComponent(Animation);\r\n                if (ani && !this._isIdlePlaying) {\r\n                    ani.play(\"idleB\");\r\n                    this._isIdlePlaying = true;\r\n\r\n                    // 移除旧的监听器，避免叠加\r\n                    if (this._idleAnimFinishedHandler) {\r\n                        ani.off(Animation.EventType.FINISHED, this._idleAnimFinishedHandler);\r\n                    }\r\n\r\n                    // 注册新的监听器\r\n                    this._idleAnimFinishedHandler = () => {\r\n                        this._isIdlePlaying = false;\r\n                    };\r\n                    ani.on(Animation.EventType.FINISHED, this._idleAnimFinishedHandler);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fireAtTarget() {\r\n        if (!this.nearestMonster) return;\r\n\r\n        const bullet = this.create(this.prefabPool);\r\n        if (!bullet) return;\r\n\r\n        const selfPos = this.node.worldPosition;\r\n        const monsterPos = this.nearestMonster.worldPosition;\r\n\r\n        if (!monsterPos) return;\r\n\r\n        //  计算角色 → 怪物的方向\r\n        const direction = monsterPos.clone().subtract(selfPos).normalize();\r\n\r\n        //  中点位置\r\n        const midPoint = selfPos.clone().add(monsterPos).multiplyScalar(0.5);\r\n\r\n        //  偏移位置（从中点向角色方向偏移）\r\n        const maxOffset = Vec3.distance(selfPos, monsterPos) / 2;\r\n        const radius = Math.min(3, maxOffset); // 向角色方向偏移\r\n        const spawnPos = midPoint.clone().subtract(direction.clone().multiplyScalar(radius));\r\n        spawnPos.y += 7; // 稍微抬高一点\r\n\r\n        bullet.setWorldPosition(spawnPos);\r\n\r\n        //  使用 lookAt 先设置 bullet 朝向（默认是 Z- 轴指向目标）\r\n        bullet.lookAt(monsterPos, Vec3.UP);\r\n\r\n        //  如果模型的“头朝向”为 X+，则绕 Y 轴加 90° 补偿\r\n        const fixQuat = new Quat();\r\n        Quat.fromAxisAngle(fixQuat, Vec3.UP, 90 * Math.PI / 180);\r\n\r\n        const currentQuat = bullet.getRotation();\r\n        const finalQuat = new Quat();\r\n        Quat.multiply(finalQuat, currentQuat, fixQuat); // 原始朝向 * 补偿旋转\r\n        bullet.setRotation(finalQuat);\r\n\r\n        //  设置子弹参数\r\n        const bulletComp = bullet.getComponent(Bullet);\r\n        if (bulletComp) {\r\n            bulletComp.explosiveSpecialEffects = this.explosiveSpecialEffects.bind(this);\r\n            bulletComp.target = this.nearestMonster;\r\n            bulletComp.speed = 40;\r\n            bulletComp.PartnerManager = this;\r\n        }\r\n    }\r\n\r\n\r\n    playPartnerAnim(name: string) {\r\n        const anim = this.node.getComponent(Animation);\r\n        const state = anim?.getState(name);\r\n        if (state) {\r\n            state.stop();  // 防止播放失败\r\n            anim.play(name);\r\n        } else {\r\n            console.warn(`❌ 动画 ${name} 未找到`);\r\n        }\r\n    }\r\n\r\n    // 目标是怪物或世界坐标\r\n    explosiveSpecialEffects(target: Node | Vec3, name: string) {\r\n        const worldPos = target instanceof Node ? target.worldPosition : target;\r\n\r\n        //  生成爆炸特效\r\n        const skillExplosion = this.create(this.hitPrefabPool);\r\n        if (!skillExplosion) return;\r\n\r\n        skillExplosion.setWorldPosition(new Vec3(worldPos.x, worldPos.y + 2, worldPos.z));\r\n\r\n        // \r\n        const anim = skillExplosion?.children[0]?.getComponent(Animation);\r\n        if (anim) {\r\n            anim.play(`${name}_hit`);\r\n            anim.once(Animation.EventType.FINISHED, () => {\r\n                this.onProjectileDead(this.hitPrefabPool, skillExplosion);\r\n            });\r\n        } else {\r\n            // 没动画时，延迟回收\r\n            this.scheduleOnce(() => {\r\n                this.onProjectileDead(this.hitPrefabPool, skillExplosion);\r\n            }, 1);\r\n        }\r\n\r\n        // 查找爆炸范围内的怪物（半径 5）\r\n        const radius = 5;\r\n        const monsterParent = DataManager.Instance.monsterManager.monsterParent;\r\n        const hitMonsters: Node[] = [];\r\n\r\n        for (const monster of monsterParent.children) {\r\n            const distSqr = Vec3.squaredDistance(monster.worldPosition, worldPos);\r\n            if (distSqr <= radius * radius) {\r\n                hitMonsters.push(monster);\r\n            }\r\n        }\r\n\r\n        // 对命中的怪执行处理\r\n        if (hitMonsters.length > 0) {\r\n            DataManager.Instance.monsterManager.killMonsters(hitMonsters);\r\n        }\r\n    }\r\n\r\n    // 获取离伙伴最近的怪物\r\n    getNearestMonster(monsters, partnerPos: Vec3) {\r\n        let nearest: Node | null = null;\r\n        let minDistance = Infinity;\r\n\r\n        for (let monster of monsters) {\r\n            if (!monster || !monster.isValid) continue;\r\n\r\n            const monsterPos = monster.worldPosition;\r\n            const distance = Vec3.distance(monsterPos, partnerPos);\r\n\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                nearest = monster;\r\n            }\r\n        }\r\n\r\n        return nearest;\r\n    }\r\n\r\n    // 判断是在人物的左边还是右边\r\n    isTargetOnRight(self: Node, target: Node): boolean {\r\n        const selfPos = self.worldPosition;\r\n        const targetPos = target.worldPosition;\r\n\r\n        // 角色的 forward 方向（Z轴向前）\r\n        const forward = self.forward.clone().normalize();\r\n\r\n        // 朝目标方向的向量\r\n        const toTarget = targetPos.clone().subtract(selfPos).normalize();\r\n\r\n        // 角色右方向 = forward × up\r\n        const right = new Vec3();\r\n        Vec3.cross(right, forward, Vec3.UP); // 使用世界Y轴为 up\r\n\r\n        // 点积判断左右（> 0 在右侧 < 0 在左侧）\r\n        return Vec3.dot(right, toTarget) > 0;\r\n    }\r\n\r\n    // // 技能生成的随机偏移范围（米）\r\n    // private radiusRandomOffset = 3;\r\n\r\n    // // 技能释放的整体朝向角度（绕Y轴，单位：度）\r\n    // private directionAngleDeg = 0;\r\n\r\n    // // 技能影响的半径，仅用于检测怪物，XZ平面（单位：米）\r\n    // private skillDetectRadius = 4;\r\n\r\n    // const initialRadius = 5;       // 第一圈技能的半径\r\n    // const ringStep = 5;            // 每一圈向外扩展的间隔\r\n    // const ringCount = 5;           // 总共生成多少圈\r\n    // const delayPerRing = 0.3;      // 每一圈的延迟时间\r\n    // const spreadAngle = 130;       // 技能扇形覆盖角度\r\n\r\n    /**\r\n     * 主技能释放函数，按照环形和扇形分布在角色前方生成技能节点\r\n     */\r\n    releaseMajorSkills() {\r\n        const itemAreaManager = this.node.parent.getComponent(ItemAreaManager)\r\n        const center = this.node.worldPosition.clone();  // 技能中心点为当前角色位置\r\n\r\n        const directionAngleDeg = itemAreaManager.directionAngleDeg ?? 0;\r\n        const directionAngleRad = directionAngleDeg * Math.PI / 180;\r\n\r\n        // 朝向向量（forward），单位向量，决定技能释放的主方向（默认Z正方向）\r\n        const forward = new Vec3(\r\n            Math.sin(directionAngleRad),\r\n            0,\r\n            Math.cos(directionAngleRad)\r\n        ).normalize();\r\n\r\n\r\n        // 外层循环：每一圈技能生成逻辑\r\n        for (let ring = 0; ring < itemAreaManager.ringCount; ring++) {\r\n            const baseRadius = itemAreaManager.initialRadius + ring * itemAreaManager.ringStep;\r\n            const delay = ring * itemAreaManager.delayPerRing;\r\n\r\n            const candidateCount = 6 + ring;  // 每圈技能候选点数量（越外层越多）\r\n            const selectCount = 2 + ring;     // 实际从候选中选出用于释放技能的位置\r\n\r\n            // 创建索引数组并进行洗牌（随机打乱顺序）\r\n            const indices = Array.from({ length: candidateCount }, (_, i) => i);\r\n            for (let i = indices.length - 1; i > 0; i--) {\r\n                const j = Math.floor(Math.random() * (i + 1));\r\n                [indices[i], indices[j]] = [indices[j], indices[i]];\r\n            }\r\n\r\n            // === 播放该层技能音效 ===\r\n            if (ring < 2) {\r\n                DataManager.Instance.soundManager.playRingSoundDynamically(this.node.name, delay);\r\n            }\r\n\r\n            // 内层循环：生成实际技能节点\r\n            for (let i = 0; i < selectCount && i < candidateCount; i++) {\r\n                const idx = indices[i];\r\n\r\n                // 当前角度在扇形中的位置\r\n                const angleStep = itemAreaManager.spreadAngle / (candidateCount - 1);\r\n                const angleDeg = -itemAreaManager.spreadAngle / 2 + angleStep * idx;\r\n                const angleRad = angleDeg * Math.PI / 180;\r\n\r\n                // 将角度旋转后的方向向量\r\n                const dir = new Vec3(\r\n                    Math.sin(directionAngleRad + angleRad),\r\n                    0,\r\n                    Math.cos(directionAngleRad + angleRad)\r\n                ).normalize();\r\n\r\n                // 生成点的基础位置\r\n                const basePos = center.clone().add(dir.multiplyScalar(baseRadius));\r\n\r\n                // 加上一个位置扰动偏移（模拟不规则性）\r\n                const randomOffset = new Vec3(\r\n                    (Math.random() - 0.5) * 2 * itemAreaManager.radiusRandomOffset,\r\n                    0,\r\n                    (Math.random() - 0.5) * 2 * itemAreaManager.radiusRandomOffset\r\n                );\r\n\r\n                const spawnPos = basePos.add(randomOffset); // 最终生成位置\r\n                const angleY = directionAngleDeg + angleDeg; // 旋转角度（暂未使用）\r\n\r\n                // 延迟执行技能生成\r\n                ((spawnPos: Vec3, angleY: number, delay: number) => {\r\n                    setTimeout(() => {\r\n                        const skillNode = this.create(this.bigSkillsPrefabPool);\r\n                        if (!skillNode) return;\r\n\r\n                        // 重置技能节点状态\r\n                        this.resetSkillNode(skillNode, spawnPos, angleY);\r\n\r\n                        // 检测命中的怪物并清除\r\n                        for (let i = 0; i < 2; i++) {\r\n                            const monsters = this.getEnemiesInRange(spawnPos);\r\n                            DataManager.Instance.monsterManager.killMonsters(monsters);\r\n                        }\r\n\r\n                        // 延迟回收技能节点（你可以启用缩放动画）\r\n                        tween(skillNode)\r\n                            .delay(1.0)\r\n                            // .to(0.3, { scale: new Vec3(0, 0, 0) }, { easing: 'quadIn' })\r\n                            .call(() => {\r\n                                this.onProjectileDead(this.bigSkillsPrefabPool, skillNode);\r\n                            })\r\n                            .start();\r\n                    }, delay * 1000);\r\n                })(spawnPos, angleY, delay);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置技能节点的状态，用于对象池复用\r\n     */\r\n    private resetSkillNode(node: Node, position: Vec3, angleY: number) {\r\n        node.setWorldPosition(position);\r\n        // node.setScale(Vec3.ONE); // 如果你开启缩放动画，取消注释\r\n        node.active = true;\r\n\r\n        const skill = node.getChildByName(\"Skill\");\r\n        if (skill) {\r\n            // skill.setScale(Vec3.ONE);\r\n            skill.active = true;\r\n\r\n            const skillAni = skill.getComponent(Animation);\r\n            const clipName = `TX_Skill_${this.node.name}`; // 动画名称格式根据角色名而定\r\n            if (skillAni) {\r\n                skillAni.stop(); // 保证动画重放\r\n                skillAni.play(clipName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取技能范围内的敌人，仅检测XZ平面距离\r\n     */\r\n    getEnemiesInRange(center: Vec3): Node[] {\r\n        const itemAreaManager = this.node.parent.getComponent(ItemAreaManager)\r\n        const radius = itemAreaManager.skillDetectRadius;\r\n        const radiusSqr = radius * radius;\r\n        const enemies: Node[] = [];\r\n\r\n        for (const enemy of this.monsterParent.children) {\r\n            const pos = enemy.worldPosition;\r\n            const dx = pos.x - center.x;\r\n            const dz = pos.z - center.z;\r\n            const distSqr = dx * dx + dz * dz;\r\n\r\n            if (distSqr <= radiusSqr) {\r\n                enemies.push(enemy);\r\n            }\r\n        }\r\n\r\n        return enemies;\r\n    }\r\n}\r\n\r\n\r\n"]}