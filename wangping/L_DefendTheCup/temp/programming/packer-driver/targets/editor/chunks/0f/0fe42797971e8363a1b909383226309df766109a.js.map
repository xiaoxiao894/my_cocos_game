{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Monster/MonsterBorn.ts"],"names":["MonsterBorn","geometry","PhysicsSystem","Vec2","Vec3","view","DataManager","getWorldBornPos","cameraMain","Instance","mainCamera","camera","centerWorld","radius","maxTry","i","angle","Math","random","PI","offset","cos","sin","targetWorld","clone","add","screenPos","worldToScreen","screenSize","getVisibleSize","x","width","y","height","ray","Ray","screenPointToRay","mask","rayDistance","queryTrigger","instance","raycastClosest","hitPoint","raycastClosestResult","console","warn","randomAngle","pos","player","node","worldPosition","z","centerAngle","atan2","atXBoundary","abs","xBoundary","atZBoundary","zBoundary","getRayRectangleIntersection","cosA","sinA","screen","bounder","xMin","xMax","yMin","yMax","epsilon","rayOrigin","nearestT","Infinity","intersection","tRight","yRight","tLeft","yLeft","tTop","xTop","tBottom","xBottom"],"mappings":"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","sourcesContent":["import { Camera, geometry, PhysicsSystem, Vec2, Vec3, view } from \"cc\";\r\nimport { DataManager } from \"../Global/DataManager\";\r\n\r\n/**\r\n * 怪出生坐标计算\r\n */\r\nexport default class MonsterBorn {\r\n\r\n    private static xBoundary = 30;\r\n    private static zBoundary = 30;\r\n\r\n    public static getWorldBornPos(): Vec3 | null {\r\n        const cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        const centerWorld = new Vec3(0, 0, 0); //  地图中心点（可改为自定义节点位置）\r\n        const radius = 40; //  固定生成半径\r\n        const maxTry = 10;\r\n\r\n        for (let i = 0; i < maxTry; i++) {\r\n            const angle = Math.random() * 2 * Math.PI;\r\n\r\n            //  在中心点为圆心的固定半径圆环上生成点\r\n            const offset = new Vec3(Math.cos(angle) * radius, 0, Math.sin(angle) * radius);\r\n            const targetWorld = centerWorld.clone().add(offset);\r\n\r\n            //  将该点转为屏幕坐标\r\n            const screenPos = cameraMain.worldToScreen(targetWorld);\r\n            const screenSize = view.getVisibleSize();\r\n\r\n            //  仅接受屏幕外的点\r\n            if (\r\n                screenPos.x < 0 || screenPos.x > screenSize.width ||\r\n                screenPos.y < 0 || screenPos.y > screenSize.height\r\n            ) {\r\n                const ray = new geometry.Ray();\r\n                cameraMain.screenPointToRay(screenPos.x, screenPos.y, ray);\r\n\r\n                const mask = 0xffffffff;\r\n                const rayDistance = 1000;\r\n                const queryTrigger = true;\r\n\r\n                if (PhysicsSystem.instance.raycastClosest(ray, mask, rayDistance, queryTrigger)) {\r\n                    const hitPoint = PhysicsSystem.instance.raycastClosestResult.hitPoint.clone();\r\n                    return hitPoint;\r\n                }\r\n            }\r\n        }\r\n\r\n        console.warn(\"未找到合法出生点（屏幕外 + 固定半径）\");\r\n        return null;\r\n    }\r\n\r\n\r\n    // //怪出生世界坐标\r\n    // public static getWorldBornPos(): Vec3 {\r\n    //     //有效范围\r\n    //     let fixedY: number = 1;\r\n\r\n    //     //随机角度\r\n    //     let radAngle: number = this.randomAngle();\r\n    //     //console.log(`monster radAngle ${radAngle}`);\r\n    //     let cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n\r\n    //     let uiPos: Vec2 = this.getRayRectangleIntersection(radAngle);\r\n    //     if (uiPos) {\r\n    //         //console.log(`monster sceenPos ${uiPos.x} ${uiPos.y}`);\r\n    //         let ray: geometry.Ray = new geometry.Ray();\r\n    //         cameraMain.screenPointToRay(uiPos.x, uiPos.y, ray);\r\n    //         //cameraMain.screenPointToRay(view.getViewportRect().width/2,view.getViewportRect().height/2,ray);\r\n    //         // 以下参数可选\r\n    //         const mask = 0xffffffff;\r\n    //         const maxDistance = 10000000;\r\n    //         const queryTrigger = true;\r\n\r\n    //         if (PhysicsSystem.instance.raycastClosest(ray, mask, maxDistance, queryTrigger)) {\r\n    //             const raycastClosestResult = PhysicsSystem.instance.raycastClosestResult;\r\n    //             const hitPoint = raycastClosestResult.hitPoint;\r\n    //             //console.log(`monster worldPos ${hitPoint}`);   \r\n    //             //pos.y = fixedY;\r\n    //             return hitPoint;\r\n    //         } else {\r\n    //             console.log(\"no raycastClosest\");\r\n    //         }\r\n    //     } else {\r\n    //         console.log(\"no sceenPos\");\r\n    //     }\r\n\r\n    //     return null;\r\n\r\n    // }\r\n\r\n    /**\r\n     * 随机角度\r\n     * @returns radAngle 弧度\r\n     */\r\n    private static randomAngle(): number {\r\n        const pos = DataManager.Instance.player.node.worldPosition;\r\n        //console.log(pos);\r\n        const x = pos.x, z = -pos.z; // 注意z轴取反\r\n\r\n        // 计算指向中心的基准角度\r\n        const centerAngle = Math.atan2(z, x) + Math.PI;\r\n\r\n        // 确定边界条件\r\n        const atXBoundary = Math.abs(x) > this.xBoundary;\r\n        const atZBoundary = Math.abs(z) > this.zBoundary;\r\n\r\n        // 计算随机角度范围\r\n        if (atXBoundary && atZBoundary) {\r\n            // 角落区域：中心角度±π/4范围\r\n            return centerAngle + (Math.random() - 0.5) * Math.PI / 2;\r\n        } else if (atXBoundary) {\r\n            // X边界：确保cos方向正确\r\n            return x > 0\r\n                ? Math.PI / 2 + Math.random() * Math.PI   // π/2 到 3π/2(左)\r\n                : -Math.PI / 2 + Math.random() * Math.PI;            // -π/2 到 π/2(右)\r\n        } else if (atZBoundary) {\r\n            // Z边界：确保sin方向正确\r\n            return z > 0\r\n                ? Math.PI + Math.random() * Math.PI // π 到 2π(下)\r\n                : Math.random() * Math.PI;  // 0 到 π(上)\r\n        }\r\n\r\n        // 无边界限制：完全随机\r\n        return Math.random() * Math.PI * 2;\r\n    }\r\n\r\n    private static getRayRectangleIntersection(angle: number): Vec2 | null {\r\n        //x cos y sin\r\n        const cosA = Math.cos(angle);\r\n        const sinA = Math.sin(angle);\r\n        const screen = view.getVisibleSize();\r\n        // 矩形边界范围（假设矩形是轴对齐的）\r\n        const bounder: number = 20;\r\n        const xMin = 0 - bounder;\r\n        const xMax = screen.width + bounder;\r\n        const yMin = 0 - bounder;\r\n        const yMax = screen.height + bounder;\r\n\r\n        // 处理极端情况\r\n        const epsilon = 0.0001;\r\n\r\n        // 从屏幕中心发射射线\r\n        const rayOrigin = new Vec2(screen.width / 2, screen.height / 2);\r\n        let nearestT = Infinity;\r\n        let intersection: Vec2 | null = null;\r\n\r\n        // 处理完全垂直或水平的射线\r\n        if (Math.abs(cosA) < epsilon) { // 垂直射线\r\n            return new Vec2(0, sinA > 0 ? yMax : yMin);\r\n        }\r\n        if (Math.abs(sinA) < epsilon) { // 水平射线\r\n            return new Vec2(cosA > 0 ? xMax : xMin, 0);\r\n        }\r\n\r\n        // 右边界 x = xMax\r\n        const tRight = (xMax - rayOrigin.x) / cosA;\r\n        const yRight = rayOrigin.y + tRight * sinA;\r\n        if (tRight > epsilon && yRight >= yMin && yRight <= yMax && tRight < nearestT) {\r\n            nearestT = tRight;\r\n            intersection = new Vec2(xMax, yRight);\r\n        }\r\n        // 左边界 x = xMin\r\n        const tLeft = (xMin - rayOrigin.x) / cosA;\r\n        const yLeft = rayOrigin.y + tLeft * sinA;\r\n        if (tLeft > epsilon && yLeft >= yMin && yLeft <= yMax) {\r\n            nearestT = tLeft;\r\n            intersection = new Vec2(xMin, yLeft);\r\n        }\r\n        // 上边界 y = yMax\r\n        const tTop = (yMax - rayOrigin.y) / sinA;\r\n        const xTop = rayOrigin.x + tTop * cosA;\r\n        if (tTop > epsilon && xTop >= xMin && xTop <= xMax && tTop < nearestT) {\r\n            nearestT = tTop;\r\n            intersection = new Vec2(xTop, yMax);\r\n        }\r\n\r\n        // 下边界 y = yMin\r\n        const tBottom = (yMin - rayOrigin.y) / sinA;\r\n        const xBottom = rayOrigin.x + tBottom * cosA;\r\n        if (tBottom > epsilon && xBottom >= xMin && xBottom <= xMax && tBottom < nearestT) {\r\n            nearestT = tBottom;\r\n            intersection = new Vec2(xBottom, yMin);\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n}"]}