{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Monster/MonsterItem.ts"],"names":["_decorator","Component","Node","SkeletalAnimation","CCString","Vec3","tween","Material","MeshRenderer","CCInteger","Quat","Vec2","v2","instantiate","ProgressBar","DataManager","Simulator","RVOMath","Vector2","MonsterStateEnum","EntityTypeEnum","DissolveEffect","MathUtil","ccclass","property","MonsterItem","currentState","_isDead","_index","_lastPathHasObstacle","_checkCounter","_noMove","_nowHp","_bloodNode","_bloodOffset","redTimeout","_frames","_agentHandleId","_isAttackPlayer","_isHit","_isExecuteRvo","_assignedGuardrail","_hasCountedAttack","agentHandleId","value","init","index","bloodNode","isDissolveOnce","hp","runAniName","scheduleOnce","changState","Walk","type","Instance","BossTipConManager","addTarget","node","bar","getComponent","progress","active","dissolveEffect","forEach","d","setMaterByIndex","warmUpMaterial","reset","matIndex","mesh","setMaterial","mats","deathAni","isPlayer","agentAid","currentPos","getWorldPosition","clone","playerPos","player","goalVector","x","z","subtract2f","normalize","multiplyScalar","hitPow","knockbackFinalPos","add","y","targetNode","setWorldPosition","isInsideDoor","sceneManager","isNodeInsideDoorArea","by","position","call","agent","instance","getAgentByAid","isValid","newWorldPos","worldPosition","position_","attackingMonsterCount","Math","max","start","updateIconPos","clearTimeout","monsterHitEffect","setTimeout","Die","timeout","play","monsterManager","recycleMonster","removeTarget","recycleBlood","gridSystem","removeNode","name","randomIconNum","getRandom","worldPos","i","randius","angle","random","PI","r","sqrt","offsetX","cos","offsetZ","sin","newRandomPos","dropItem","update","dt","setPreferredVelocities","guardrailArr","length","moveTarget","worldTarget","isPlayerInDoorArea","monsterPos","nearestGuardrail","minDistSqr","Infinity","guardrail","attackingCount","guardrailPos","dx","dz","distSqr","pos","rotateTowards","setAgentPrefVelocity","ZERO","count","playerRange","agentPos","getAgentPosition","lengthSqr","distanceToTargetSquared","squaredDistance","hasArrived","Attack","equals","RVO_EPSILON","forward","currentRotation","worldRotation","targetRotation","fromViewUp","UP","rotateSpeed","slerped","slerp","min","console","error","targetWorldPos","dir","subtract","targetQuat","currentQuat","resultQuat","moveByRvo","p","targetPos","dist","distance","smoothFactor","lerp","updateNode","bloodPos","state","skeletalAnimation","getState","pause","crossFade","attack","uiWarnManager","playWarnFadeAnimation","blood","getChildByName","prefabMap","get","FenceBloodBar","parent","bloodBar","guardrailBlood","includes","leftNode","getChildByPath","leftMesh","doorMaterials","rightNode","rightMesh","fenceNode","fenceMesh","guardrailMaterials","attackOver","isDead"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, SkeletalAnimation, CCString, Vec3, tween, Material, MeshRenderer, CCInteger, Quat, Vec2, v2, instantiate, ProgressBar, random } from 'cc';\r\nimport { DataManager, Guardrail } from '../Global/DataManager';\r\nimport { FlowField } from './FlowField';\r\nimport { Simulator } from '../RVO/Simulator';\r\nimport { RVOMath, Vector2 } from '../RVO/Common';\r\nimport { MonsterStateEnum } from '../Actor/StateDefine';\r\nimport { EntityTypeEnum } from '../Enum/Index';\r\nimport { DissolveEffect } from '../../Res/DissolveEffect/scripts/DissolveEffect';\r\nimport { MathUtil } from '../Util/MathUtil';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterItem')\r\nexport class MonsterItem extends Component {\r\n    @property(SkeletalAnimation)\r\n    skeletalAnimation: SkeletalAnimation = null;\r\n\r\n    @property(CCString)\r\n    runAniName: string = \"walk_f\";\r\n\r\n    @property(CCString)\r\n    dieAniName: string = \"die\";\r\n\r\n    @property(CCInteger)\r\n    type: number = 0;\r\n\r\n    @property(DissolveEffect)\r\n    dissolveEffect: DissolveEffect[] = [];\r\n\r\n    @property(Material)\r\n    mats: Material[] = [];\r\n\r\n    @property(CCInteger)\r\n    hp: number = 1;\r\n\r\n    //rvo\r\n    @property(CCInteger)\r\n    hitPow: number = 5 //受击系数 系数越高 反弹力度越大\r\n\r\n    private currentState = null;\r\n\r\n    private _isDead: boolean = false;\r\n    private _index: number;\r\n    private _lastPathHasObstacle: boolean = false;\r\n    private _checkCounter: number = 0;\r\n\r\n    private _noMove: boolean = false;\r\n\r\n    private _nowHp: number = 1;\r\n    private _bloodNode: Node = null;\r\n    private _bloodOffset: Vec3 = new Vec3(0, 7.5, 0);\r\n\r\n    // 闪红恢复timeout\r\n    private redTimeout;\r\n\r\n\r\n    private _frames: number = 0;\r\n    private _agentHandleId: number = -1; //RVOid\r\n    public get agentHandleId(): number {\r\n        return this._agentHandleId;\r\n    }\r\n    public set agentHandleId(value: number) {\r\n        this._agentHandleId = value;\r\n    }\r\n\r\n    // 攻击玩家\r\n    private _isAttackPlayer = false;\r\n\r\n    public init(index: number, bloodNode: Node = null, isDissolveOnce) {\r\n        this._index = index;\r\n        this._bloodNode = bloodNode;\r\n        this._nowHp = this.hp;\r\n        this._isDead = false;\r\n        this._noMove = false;\r\n        this._hasCountedAttack = false;\r\n        this._assignedGuardrail = null;\r\n        if (this.runAniName) {\r\n            this.scheduleOnce(() => {\r\n                this._isAttackPlayer = false\r\n                this.changState(MonsterStateEnum.Walk);\r\n            }, 0);\r\n        }\r\n        if (this.type === 1) {\r\n            DataManager.Instance.BossTipConManager.addTarget(this.node);\r\n            this._bloodOffset = new Vec3(0, 15, 0);\r\n        } else {\r\n            this._bloodOffset = new Vec3(0, 7.5, 0);\r\n        }\r\n\r\n        if (this._bloodNode) {\r\n            let bar: ProgressBar = this._bloodNode.getComponent(ProgressBar);\r\n            if (bar) {\r\n                bar.progress = 1;\r\n            }\r\n            this._bloodNode.active = false;\r\n        }\r\n\r\n        //初始化材质\r\n        this.dissolveEffect.forEach((d: DissolveEffect) => {\r\n            this.setMaterByIndex(d.node, 0);\r\n            if (isDissolveOnce) {\r\n                this.warmUpMaterial(d.node, 1);\r\n                this.warmUpMaterial(d.node, 2);\r\n            }\r\n            d.reset();\r\n        });\r\n    }\r\n\r\n    private setMaterByIndex(node: Node, matIndex: number) {\r\n        let mesh: MeshRenderer = node.getComponent(MeshRenderer);\r\n        if (mesh) {\r\n            mesh.setMaterial(this.mats[matIndex], 0);\r\n            if (this.type === 1) {\r\n                //大怪需要挂双材质\r\n                if (matIndex == 1) {\r\n                    mesh.setMaterial(this.mats[matIndex], 1);\r\n\r\n                } else {\r\n                    mesh.setMaterial(this.mats[matIndex + 3], 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public warmUpMaterial(node, index: number) {\r\n        let mesh: MeshRenderer = node.getComponent(MeshRenderer);\r\n        if (!mesh) return;\r\n\r\n        mesh.setMaterial(this.mats[index], 0);\r\n\r\n        if (this.type === 1) {\r\n            if (index === 1) {\r\n                mesh.setMaterial(this.mats[index], 1);\r\n            } else {\r\n                mesh.setMaterial(this.mats[index + 3], 1);\r\n            }\r\n        }\r\n\r\n        this.scheduleOnce(() => {\r\n            mesh.setMaterial(this.mats[0], 0);\r\n            if (this.type === 1) {\r\n                mesh.setMaterial(this.mats[0 + 3], 1);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    public deathAni(isPlayer: boolean = false) {\r\n        if (this._isDead) {\r\n            return;\r\n        }\r\n        if (isPlayer) {\r\n            //击退效果\r\n            this._isHit = true;\r\n\r\n            const agentAid = this.agentHandleId;\r\n            const currentPos = this.node.getWorldPosition().clone();\r\n            const playerPos = DataManager.Instance.player.node.getWorldPosition().clone();\r\n\r\n            // 计算击退方向向量\r\n            let goalVector = new Vec2(playerPos.x, playerPos.z).subtract2f(currentPos.x, currentPos.z);\r\n            goalVector = goalVector.normalize().multiplyScalar(-this.hitPow);\r\n\r\n            // 预测击退后的终点\r\n            const knockbackFinalPos = currentPos.clone().add(new Vec3(goalVector.x, 0, goalVector.y));\r\n\r\n            const targetNode = new Node(\"Temp\");\r\n            targetNode.setWorldPosition(knockbackFinalPos);\r\n            const isInsideDoor = DataManager.Instance.sceneManager.isNodeInsideDoorArea(targetNode);\r\n            // if (isInsideDoor) {\r\n            //     console.log(\"击退后会进门区域\");\r\n            // } else {\r\n            //     console.log(\"击退后不会进门区域\");\r\n            // }\r\n\r\n            if (!isInsideDoor) {\r\n                tween(this.node)\r\n                    .by(0.15, { position: new Vec3(goalVector.x, 0, goalVector.y) })\r\n                    .call(() => {\r\n                        const agent = Simulator.instance.getAgentByAid(this.agentHandleId);\r\n                        if (agent && this.node?.isValid) {\r\n                            const newWorldPos = this.node.worldPosition;\r\n                            agent.position_ = new Vector2(newWorldPos.x, newWorldPos.z);\r\n                        }\r\n                        if (this._assignedGuardrail) {\r\n                            this._assignedGuardrail.attackingMonsterCount = Math.max(\r\n                                0,\r\n                                (this._assignedGuardrail.attackingMonsterCount || 1) - 1\r\n                            );\r\n\r\n                            this.changState(MonsterStateEnum.Walk);\r\n                            this._assignedGuardrail = null;\r\n                            this._hasCountedAttack = false;\r\n                            this._noMove = false;\r\n                        }\r\n                        this._isHit = false;\r\n                    })\r\n                    .start();\r\n            } else {\r\n                if (this._assignedGuardrail) {\r\n                    this._assignedGuardrail.attackingMonsterCount = Math.max(\r\n                        0,\r\n                        (this._assignedGuardrail.attackingMonsterCount || 1) - 1\r\n                    );\r\n\r\n                    this.changState(MonsterStateEnum.Walk);\r\n                    this._assignedGuardrail = null;\r\n                    this._hasCountedAttack = false;\r\n                    this._noMove = false;\r\n                }\r\n                this._isHit = false;\r\n            }\r\n        } else {\r\n            this.updateIconPos();\r\n        }\r\n\r\n        if (this.redTimeout) {\r\n            clearTimeout(this.redTimeout);\r\n            this.redTimeout = null;\r\n        }\r\n        this._nowHp--;\r\n        if (this._nowHp > 0) {\r\n            if (this._bloodNode) {\r\n                let bar: ProgressBar = this._bloodNode.getComponent(ProgressBar);\r\n                if (bar) {\r\n                    bar.progress = this._nowHp / this.hp;\r\n                }\r\n                this._bloodNode.active = true;\r\n            }\r\n            if (isPlayer) {\r\n                DataManager.Instance.player.monsterHitEffect([this.node]);\r\n            }\r\n            //闪红\r\n            this.dissolveEffect.forEach((d: DissolveEffect) => {\r\n                this.setMaterByIndex(d.node, 1);\r\n            });\r\n            this.redTimeout = setTimeout(() => {\r\n                //恢复\r\n                this.dissolveEffect.forEach((d) => {\r\n                    this.setMaterByIndex(d.node, 0);\r\n                });\r\n            }, 250);\r\n            return;\r\n        }\r\n        //真死了\r\n        this._isDead = true;\r\n\r\n        if (this._assignedGuardrail && this._hasCountedAttack && this._assignedGuardrail.attackingMonsterCount > 0) {\r\n            this._assignedGuardrail.attackingMonsterCount--;\r\n        }\r\n        this._isAttackPlayer = false;\r\n        this.changState(MonsterStateEnum.Die);\r\n        let timeout: number = 650;\r\n        if (this.type > 0) {\r\n            timeout = 880;\r\n        }\r\n        //闪红\r\n        this.dissolveEffect.forEach((d: DissolveEffect) => {\r\n            this.setMaterByIndex(d.node, 1);\r\n        });\r\n        setTimeout(() => {\r\n            //消融\r\n            this.dissolveEffect.forEach((d) => {\r\n                this.setMaterByIndex(d.node, 2);\r\n                d.init();\r\n                d.play(0.5);\r\n\r\n            });\r\n        }, 250);\r\n\r\n        setTimeout(() => {\r\n            DataManager.Instance.monsterManager.recycleMonster(this._index, this.node);\r\n        }, timeout);\r\n\r\n        if (this.type === 1) {\r\n            DataManager.Instance.BossTipConManager.removeTarget(this.node);\r\n        }\r\n\r\n        this.scheduleOnce(() => {\r\n            if (isPlayer) {\r\n                DataManager.Instance.player.monsterHitEffect([this.node]);\r\n                this.updateIconPos();\r\n            } else {\r\n                this.updateIconPos();\r\n            }\r\n        }, 0.15)\r\n\r\n        //血条回收\r\n        if (this._bloodNode) {\r\n            DataManager.Instance.monsterManager.recycleBlood(this._bloodNode);\r\n        }\r\n\r\n        //掉落生成\r\n        DataManager.Instance.gridSystem.removeNode(this.node);\r\n    }\r\n\r\n    updateIconPos() {\r\n        if (this.node.name == \"Mantis\") {\r\n            const randomIconNum = MathUtil.getRandom(3, 5);\r\n\r\n            const worldPos = this.node.getWorldPosition().clone();\r\n            for (let i = 0; i < randomIconNum; i++) {\r\n                const randius = 3;\r\n                const angle = Math.random() * Math.PI * 2;\r\n                const r = Math.sqrt(Math.random()) * randius;\r\n\r\n                const offsetX = r * Math.cos(angle)\r\n                const offsetZ = r * Math.sin(angle);\r\n\r\n                const newRandomPos = new Vec3(worldPos.x + offsetX, worldPos.y, worldPos.z + offsetZ);\r\n                DataManager.Instance.monsterManager.dropItem(newRandomPos);\r\n            }\r\n        } else {\r\n            DataManager.Instance.monsterManager.dropItem(this.node.getWorldPosition().clone());\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this._isDead) {\r\n            return;\r\n        }\r\n        if (this._frames++ > 8) {\r\n            this._frames = 0\r\n            this.setPreferredVelocities(dt) //设置追踪主角的线速度\r\n        }\r\n\r\n    }\r\n\r\n    private _isHit = false;\r\n    /**\r\n    * 设置追踪主角的线速度方向和大小\r\n    */\r\n    //_tmpScale: Vec3 = new Vec3()\r\n    // 怪物 RVO 移动与护栏攻击逻辑\r\n    private _isExecuteRvo = true;\r\n    private _assignedGuardrail: Guardrail = null;\r\n    private _hasCountedAttack: boolean = false;\r\n    setPreferredVelocities(dt: number) {\r\n        if (this.agentHandleId < 0 || DataManager.Instance.guardrailArr.length <= 0) return;\r\n\r\n        const playerPos = DataManager.Instance.player.node.getWorldPosition();\r\n        let moveTarget: Vec2 = v2(playerPos.x, playerPos.z);\r\n        let worldTarget: Vec3 = new Vec3(playerPos.x, 0, playerPos.z);\r\n\r\n        const isPlayerInDoorArea = DataManager.Instance.sceneManager.isNodeInsideDoorArea(DataManager.Instance.player.node);\r\n\r\n        if (isPlayerInDoorArea) {\r\n            const monsterPos = this.node.worldPosition.clone();\r\n            let nearestGuardrail = null;\r\n            let minDistSqr = Infinity;\r\n\r\n            for (const guardrail of DataManager.Instance.guardrailArr) {\r\n                const attackingCount = guardrail.attackingMonsterCount || 0;\r\n                if (attackingCount >= 2) continue;\r\n\r\n                const guardrailPos = guardrail.node.worldPosition;\r\n                const dx = guardrailPos.x - monsterPos.x;\r\n                const dz = guardrailPos.z - monsterPos.z;\r\n                const distSqr = dx * dx + dz * dz;\r\n\r\n                if (distSqr < minDistSqr) {\r\n                    minDistSqr = distSqr;\r\n                    nearestGuardrail = guardrail;\r\n                }\r\n            }\r\n\r\n            if (nearestGuardrail && !this._assignedGuardrail) {\r\n                const pos = nearestGuardrail.node.worldPosition;\r\n                moveTarget = v2(pos.x, pos.z);\r\n                worldTarget = new Vec3(pos.x, 0, pos.z);\r\n\r\n                this._assignedGuardrail = nearestGuardrail;\r\n                this._assignedGuardrail.attackingMonsterCount = (this._assignedGuardrail.attackingMonsterCount || 0) + 1;\r\n            } else if (this._assignedGuardrail) {\r\n                const guardrailPos: Vec3 = this._assignedGuardrail.node.worldPosition;\r\n                moveTarget = v2(guardrailPos.x, guardrailPos.z);\r\n                worldTarget = new Vec3(guardrailPos.x, 0, guardrailPos.z);\r\n            }\r\n        } else {\r\n            if (this._assignedGuardrail) {\r\n                if (this._hasCountedAttack) {\r\n                    this.rotateTowards(this._assignedGuardrail.node.worldPosition, dt);\r\n                    Simulator.instance.setAgentPrefVelocity(this.agentHandleId, Vec2.ZERO);\r\n                    return;\r\n                }\r\n\r\n                const count = this._assignedGuardrail.attackingMonsterCount || 0;\r\n                const guardrailPos: Vec3 = this._assignedGuardrail.node.worldPosition;\r\n                moveTarget = v2(guardrailPos.x, guardrailPos.z);\r\n                worldTarget = new Vec3(guardrailPos.x, 0, guardrailPos.z);\r\n\r\n                if (count === 0) {\r\n                    const monsterPos = this.node.worldPosition.clone();\r\n                    const dx = playerPos.x - monsterPos.x;\r\n                    const dz = playerPos.z - monsterPos.z;\r\n                    const distSqr = dx * dx + dz * dz;\r\n                    const playerRange = 0.3;\r\n\r\n                    if (distSqr <= playerRange * playerRange) {\r\n                        this._assignedGuardrail = null;\r\n                        this._hasCountedAttack = false;\r\n                        this._noMove = false;\r\n                        moveTarget = v2(playerPos.x, playerPos.z);\r\n                        worldTarget = new Vec3(playerPos.x, 0, playerPos.z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const agentAid = this.agentHandleId;\r\n        const agent = Simulator.instance.getAgentByAid(agentAid);\r\n        const agentPos = Simulator.instance.getAgentPosition(agentAid);\r\n\r\n        if (this._isHit) {\r\n            return;\r\n        }\r\n\r\n        if (agent && agentPos) {\r\n            const goalVector = moveTarget.subtract2f(agentPos.x, agentPos.y);\r\n            const distSqr = goalVector.lengthSqr();\r\n            const distanceToTargetSquared = Vec3.squaredDistance(this.node.worldPosition, worldTarget);\r\n            const hasArrived = distanceToTargetSquared <= 16;\r\n\r\n            if (hasArrived) {\r\n                if (this.currentState !== MonsterStateEnum.Attack) {\r\n                    this.changState(MonsterStateEnum.Attack);\r\n\r\n                    if (\r\n                        Vec3.equals(worldTarget, DataManager.Instance.player.node.worldPosition) &&\r\n                        !this._isDead &&\r\n                        this.node.name === \"Mantis\"\r\n                    ) {\r\n                        this._isAttackPlayer = true;\r\n                    }\r\n                }\r\n\r\n                Simulator.instance.setAgentPrefVelocity(agentAid, Vec2.ZERO);\r\n\r\n                if (this._assignedGuardrail) {\r\n                    this.rotateTowards(this._assignedGuardrail.node.worldPosition, dt);\r\n                    this._hasCountedAttack = true;\r\n                }\r\n\r\n                return;\r\n            } else {\r\n                // ✅ 确保正在追击时状态是 Walk\r\n                if (this.currentState !== MonsterStateEnum.Walk) {\r\n                    this.changState(MonsterStateEnum.Walk);\r\n                }\r\n            }\r\n\r\n            if (distSqr < RVOMath.RVO_EPSILON) {\r\n                Simulator.instance.setAgentPrefVelocity(agentAid, Vec2.ZERO);\r\n            } else {\r\n                Simulator.instance.setAgentPrefVelocity(agentAid, goalVector);\r\n            }\r\n\r\n            const forward = new Vec3(goalVector.x, 0, goalVector.y).normalize();\r\n            if (forward.lengthSqr() > 0.0001) {\r\n                const currentRotation = this.node.worldRotation.clone();\r\n                const targetRotation = new Quat();\r\n                Quat.fromViewUp(targetRotation, forward, Vec3.UP);\r\n\r\n                const rotateSpeed = 8;\r\n                const slerped = new Quat();\r\n                Quat.slerp(slerped, currentRotation, targetRotation, Math.min(1, dt * rotateSpeed));\r\n\r\n                this.node.worldRotation = slerped;\r\n            }\r\n        } else {\r\n            console.error(\"RVO异常::\", agent, agentPos, agentAid);\r\n        }\r\n    }\r\n\r\n    private rotateTowards(targetWorldPos: Vec3, dt: number) {\r\n        const currentPos = this.node.worldPosition.clone();\r\n        const dir = new Vec3();\r\n        Vec3.subtract(dir, targetWorldPos, currentPos);\r\n        dir.y = 0;\r\n        dir.normalize();\r\n\r\n        if (dir.lengthSqr() < 0.0001) return;\r\n\r\n        const targetQuat = new Quat();\r\n        Quat.fromViewUp(targetQuat, dir, Vec3.UP);\r\n\r\n        const currentQuat = this.node.worldRotation.clone();\r\n        const resultQuat = new Quat();\r\n        Quat.slerp(resultQuat, currentQuat, targetQuat, Math.min(1, dt * 40));\r\n        this.node.worldRotation = resultQuat;\r\n    }\r\n\r\n    /**\r\n     * 在此之前 请确保Simulator run执行完毕\r\n     */\r\n    moveByRvo(dt) {\r\n        if (this._isDead) return;\r\n        if (this._noMove) {\r\n            return;\r\n        }\r\n\r\n        //栅栏边上的怪不移动\r\n        if (this._hasCountedAttack) {\r\n            this._noMove = true;\r\n        }\r\n\r\n        if (this.agentHandleId == -1) return;\r\n\r\n        const p = Simulator.instance.getAgentPosition(this.agentHandleId);\r\n        const targetPos = new Vec3(p.x, 0, p.y);\r\n        const currentPos = this.node.worldPosition.clone();\r\n\r\n        const dist = Vec3.distance(currentPos, targetPos);\r\n        if (dist > 0.01) {\r\n            const smoothFactor = 10;\r\n            Vec3.lerp(currentPos, currentPos, targetPos, dt * smoothFactor);\r\n            this.node.setWorldPosition(currentPos);\r\n            DataManager.Instance.gridSystem?.updateNode(this.node);\r\n        }\r\n\r\n        //同步更新血条位置\r\n        if (this._bloodNode) {\r\n            let bloodPos: Vec3 = new Vec3();\r\n            Vec3.add(bloodPos, currentPos, this._bloodOffset);\r\n            this._bloodNode.setWorldPosition(bloodPos);\r\n        }\r\n\r\n    }\r\n\r\n    changState(state: MonsterStateEnum | string) {\r\n        if (state == this.currentState) {\r\n            return;\r\n        }\r\n        if (state === MonsterStateEnum.Die) {\r\n            // 播放一次动画以初始化动画状态\r\n            this.skeletalAnimation.play(MonsterStateEnum.Attack);\r\n\r\n            const state = this.skeletalAnimation.getState(MonsterStateEnum.Attack);\r\n            if (!state) return;\r\n\r\n            state.update(0); // 强制立即应用该时间的骨骼姿势\r\n            state.pause();\r\n        } else {\r\n            this.skeletalAnimation?.crossFade(state as string, 0.1)\r\n        }\r\n\r\n        this.currentState = state;\r\n    }\r\n\r\n    private attack() {\r\n        if (this._isAttackPlayer) {\r\n            DataManager.Instance.uiWarnManager.playWarnFadeAnimation();\r\n        }\r\n        //打护栏\r\n        if (this._assignedGuardrail) {\r\n            //护栏掉血\r\n            if (this._assignedGuardrail.blood > 0) {\r\n                this._assignedGuardrail.blood -= 1;\r\n                let bloodNode = this._assignedGuardrail.node.getChildByName(\"FenceBloodBar\");\r\n                if (!bloodNode) {\r\n                    bloodNode = instantiate(DataManager.Instance.prefabMap.get(EntityTypeEnum.FenceBloodBar));\r\n                    if (!bloodNode) {\r\n                        return;\r\n                    }\r\n                    bloodNode.parent = this._assignedGuardrail.node;\r\n                }\r\n                bloodNode.active = true;\r\n                let bloodBar: ProgressBar = bloodNode.getComponent(ProgressBar);\r\n                if (bloodBar) {\r\n                    bloodBar.progress = this._assignedGuardrail.blood / DataManager.Instance.guardrailBlood;\r\n                }\r\n            }\r\n\r\n            //闪白\r\n            if (this._assignedGuardrail.node.name.includes(\"Door\")) {\r\n                //门\r\n                let leftNode = this._assignedGuardrail.node.getChildByPath(\"Door_Left/WeiLan/WeiLan\");\r\n                if (leftNode) {\r\n                    let leftMesh: MeshRenderer = leftNode.getComponent(MeshRenderer);\r\n                    if (leftMesh) {\r\n                        leftMesh.setMaterial(DataManager.Instance.sceneManager.doorMaterials[1], 0);\r\n                        setTimeout(() => {\r\n                            leftMesh.setMaterial(DataManager.Instance.sceneManager.doorMaterials[0], 0);\r\n                        }, 50);\r\n                    }\r\n                }\r\n                let rightNode = this._assignedGuardrail.node.getChildByPath(\"Door_Right/WeiLan/WeiLan\");\r\n                if (rightNode) {\r\n                    let rightMesh: MeshRenderer = rightNode.getComponent(MeshRenderer);\r\n                    if (rightMesh) {\r\n                        rightMesh.setMaterial(DataManager.Instance.sceneManager.doorMaterials[1], 0);\r\n                        setTimeout(() => {\r\n                            rightMesh.setMaterial(DataManager.Instance.sceneManager.doorMaterials[0], 0);\r\n                        }, 50);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                //围栏\r\n                let fenceNode = this._assignedGuardrail.node.getChildByName(\"B\");\r\n                if (fenceNode) {\r\n                    let fenceMesh: MeshRenderer = fenceNode.getComponent(MeshRenderer);\r\n                    if (fenceMesh) {\r\n                        fenceMesh.setMaterial(DataManager.Instance.sceneManager.guardrailMaterials[1], 0);\r\n                        setTimeout(() => {\r\n                            fenceMesh.setMaterial(DataManager.Instance.sceneManager.guardrailMaterials[0], 0);\r\n                        }, 50);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 如果是打人，检测人是否远离，远离动画切换成走路\r\n     */\r\n    private attackOver() {\r\n        if (this._isAttackPlayer) {\r\n            const playerPos = DataManager.Instance.player.node.getWorldPosition();\r\n            const monsterPos = this.node.getWorldPosition();\r\n            const distSqr = Vec3.squaredDistance(playerPos, monsterPos);\r\n            if (distSqr > 16) {\r\n                this.changState(MonsterStateEnum.Walk);\r\n                this._isAttackPlayer = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isDead() {\r\n        return this._isDead;\r\n    }\r\n}\r\n\r\n\r\n\r\n"]}