{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Actor/ArrowManager.ts"],"names":["_decorator","Component","instantiate","Node","Quat","Vec3","DataManager","EntityTypeEnum","ccclass","property","ArrowManager","arrowNodes","start","Instance","arrowTargetNode","target","update","deltaTime","player","guideTargetList","guideTargetIndex","nearestMonster","getNearMonster","node","createArrowPathTo","worldPosition","arrow3DManager","active","playFloatingEffect","conditionalJudgment","setArrowCount","length","targetData","find","item","isDisplay","isFind","backpack1","getChildByName","children","targetPos","dir","subtract","totalLength","count","Math","floor","spacing","normalize","i","arrow","pos","scaleAndAdd","y","setWorldPosition","rot","fromViewUp","UP","setWorldRotation","targetCount","prefab","prefabMap","get","PathArrow","setParent","push","pop","destroy","monsterParent","monsterManager","minDistSqr","Infinity","playerPos","monster","isValid","monsterPos","dx","x","dz","z","distSqr"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, math, Node, Quat, Vec3 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport { EntityTypeEnum } from '../Enum/Index';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ArrowManager')\r\nexport class ArrowManager extends Component {\r\n    @property(Node)\r\n    arrowNode: Node = null;\r\n\r\n    @property(Node)\r\n    target: Node = null;\r\n\r\n    @property\r\n    spacing: number = 2.0;\r\n\r\n    arrowNodes: Node[] = [];\r\n    start() {\r\n        // 临时\r\n        DataManager.Instance.arrowTargetNode = this.target;\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if (!DataManager.Instance.arrowTargetNode && !DataManager.Instance.player && !DataManager.Instance.guideTargetList) return;\r\n\r\n        if (DataManager.Instance.guideTargetIndex == -1) {\r\n            const nearestMonster = this.getNearMonster(DataManager.Instance.player.node);\r\n            if (nearestMonster) {\r\n                this.createArrowPathTo(nearestMonster.worldPosition);\r\n                DataManager.Instance.arrow3DManager.node.active = true;\r\n                DataManager.Instance.arrow3DManager.playFloatingEffect(deltaTime, nearestMonster.worldPosition)\r\n\r\n                this.conditionalJudgment();\r\n            } else {\r\n                this.setArrowCount(0); // 没有怪，清空箭头\r\n                DataManager.Instance.arrow3DManager.node.active = false;\r\n            }\r\n            return;\r\n        } else {\r\n            // 不在找怪\r\n            if (DataManager.Instance.guideTargetList && DataManager.Instance.guideTargetList.length > 0) {\r\n                const targetData = DataManager.Instance.guideTargetList.find(item => {\r\n                    return item.isDisplay && item.isFind\r\n                })\r\n\r\n                if (targetData) {\r\n                    DataManager.Instance.arrow3DManager.node.active = true;\r\n                    this.createArrowPathTo(targetData.node.worldPosition);\r\n                    DataManager.Instance.arrow3DManager.playFloatingEffect(deltaTime, targetData.node.worldPosition)\r\n                } else {\r\n                    this.setArrowCount(0); // 没有怪，清空箭头\r\n                    DataManager.Instance.arrow3DManager.node.active = false;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // const end = DataManager.Instance.guideTargetList[DataManager.Instance.guideTargetIndex].worldPosition;\r\n\r\n        // const dir = new Vec3();\r\n        // Vec3.subtract(dir, end, start);\r\n        // const totalLength = dir.length();\r\n\r\n        // if (totalLength < 0.01) {\r\n        //     this.setArrowCount(0);\r\n        //     return;\r\n        // }\r\n\r\n        // const count = Math.floor(totalLength / this.spacing);\r\n        // this.setArrowCount(count);\r\n\r\n        // dir.normalize();\r\n\r\n        // if (this.arrowNodes.length <= 0) return;\r\n\r\n        // for (let i = 0; i < count; i++) {\r\n        //     const arrow = this.arrowNodes[i];\r\n        //     const pos = new Vec3();\r\n        //     Vec3.scaleAndAdd(pos, start, dir, this.spacing * i);\r\n        //     arrow.setWorldPosition(pos);\r\n\r\n        //     const rot = new Quat();\r\n        //     Quat.fromViewUp(rot, dir, Vec3.UP);\r\n        //     arrow.setWorldRotation(rot);\r\n        // }\r\n    }\r\n\r\n    // 条件判断\r\n    conditionalJudgment() {\r\n        const player = DataManager.Instance.player.node;\r\n        if (DataManager.Instance.guideTargetIndex == -1) {\r\n            const backpack1 = player.getChildByName(\"Backpack1\");\r\n\r\n            if (backpack1 && backpack1.children.length >= 5) {\r\n                DataManager.Instance.guideTargetIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    createArrowPathTo(targetPos: Vec3) {\r\n        const player = DataManager.Instance.player?.node;\r\n        if (!player) return;\r\n\r\n        const start = player.worldPosition;\r\n        const dir = new Vec3();\r\n        Vec3.subtract(dir, targetPos, start);\r\n        const totalLength = dir.length();\r\n\r\n        if (totalLength < 0.01) {\r\n            this.setArrowCount(0);\r\n            return;\r\n        }\r\n\r\n        const count = Math.floor(totalLength / this.spacing);\r\n        this.setArrowCount(count);\r\n\r\n        dir.normalize();\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const arrow = this.arrowNodes[i];\r\n            let pos = new Vec3();\r\n            Vec3.scaleAndAdd(pos, start, dir, this.spacing * (i + 1)); // 避免从脚下起始\r\n            pos.y = 1;\r\n            arrow.setWorldPosition(pos);\r\n\r\n            const rot = new Quat();\r\n            Quat.fromViewUp(rot, dir, Vec3.UP);\r\n            arrow.setWorldRotation(rot);\r\n        }\r\n    }\r\n\r\n    setArrowCount(targetCount: number) {\r\n        const prefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.PathArrow);\r\n        if (!prefab) return;\r\n\r\n        while (this.arrowNodes.length < targetCount) {\r\n            const arrow = instantiate(prefab);\r\n            arrow.setParent(this.node);\r\n            this.arrowNodes.push(arrow);\r\n        }\r\n\r\n        while (this.arrowNodes.length > targetCount) {\r\n            const arrow = this.arrowNodes.pop()!;\r\n            arrow.destroy();\r\n        }\r\n    }\r\n\r\n    //  动态获取离主角最近的怪\r\n    getNearMonster(player: Node): Node | null {\r\n        const monsterParent = DataManager.Instance.monsterManager.monsterParent;\r\n        if (!monsterParent || monsterParent.children.length === 0) return null;\r\n\r\n        let nearestMonster: Node | null = null;\r\n        let minDistSqr = Infinity;\r\n\r\n        const playerPos = player.worldPosition;\r\n\r\n        for (let i = 0; i < monsterParent.children.length; i++) {\r\n            const monster = monsterParent.children[i];\r\n            if (!monster || !monster.isValid) continue;\r\n\r\n            const monsterPos = monster.worldPosition;\r\n\r\n            const dx = monsterPos.x - playerPos.x;\r\n            const dz = monsterPos.z - playerPos.z;\r\n            const distSqr = dx * dx + dz * dz;\r\n\r\n            if (distSqr < minDistSqr) {\r\n                minDistSqr = distSqr;\r\n                nearestMonster = monster;\r\n            }\r\n        }\r\n\r\n        return nearestMonster;\r\n    }\r\n}\r\n\r\n\r\n"]}