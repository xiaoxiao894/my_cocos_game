{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Grid/GridSystem.ts"],"names":["GridSystem","constructor","gridSize","gridMap","Map","nodeGridKey","getGridKey","pos","gx","Math","floor","x","gz","z","updateNode","node","worldPosition","newKey","lastKey","get","has","delete","set","Set","add","getNearbyNodes","centerPos","range","result","cx","cz","r","ceil","dx","dz","key","push","removeNode"],"mappings":"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","sourcesContent":["import { Vec3, Node } from 'cc';\r\n\r\nexport class GridSystem {\r\n    private gridSize: number;\r\n    private gridMap: Map<string, Set<Node>> = new Map();\r\n    private nodeGridKey: Map<Node, string> = new Map();\r\n\r\n    constructor(gridSize: number = 5) {\r\n        this.gridSize = gridSize;\r\n    }\r\n\r\n    private getGridKey(pos: Vec3): string {\r\n        const gx = Math.floor(pos.x / this.gridSize);\r\n        const gz = Math.floor(pos.z / this.gridSize);\r\n        return `${gx}_${gz}`;\r\n    }\r\n\r\n    // 注册或更新怪物位置\r\n    public updateNode(node: Node) {\r\n        if (!node || !node.worldPosition) return;\r\n\r\n        const newKey = this.getGridKey(node.worldPosition);\r\n        const lastKey = this.nodeGridKey.get(node);\r\n\r\n        if (lastKey === newKey) return; // 没移动出格子\r\n\r\n        // 1. 旧格子移除\r\n        if (lastKey && this.gridMap.has(lastKey)) {\r\n            this.gridMap.get(lastKey)?.delete(node);\r\n        }\r\n\r\n        // 2. 新格子添加\r\n        if (!this.gridMap.has(newKey)) {\r\n            this.gridMap.set(newKey, new Set());\r\n        }\r\n        this.gridMap.get(newKey)!.add(node);\r\n\r\n        // 3. 记录新位置\r\n        this.nodeGridKey.set(node, newKey);\r\n    }\r\n\r\n    // 获取攻击范围内的怪物（粗略）\r\n    public getNearbyNodes(centerPos: Vec3, range: number): Node[] {\r\n        const result: Node[] = [];\r\n        const cx = Math.floor(centerPos.x / this.gridSize);\r\n        const cz = Math.floor(centerPos.z / this.gridSize);\r\n        const r = Math.ceil(range / this.gridSize);\r\n\r\n        for (let dx = -r; dx <= r; dx++) {\r\n            for (let dz = -r; dz <= r; dz++) {\r\n                const key = `${cx + dx}_${cz + dz}`;\r\n                const set = this.gridMap.get(key);\r\n                if (set) {\r\n                    for (const node of set) {\r\n                        result.push(node);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // 移除节点\r\n    public removeNode(node: Node) {\r\n        const key = this.nodeGridKey.get(node);\r\n        if (key && this.gridMap.has(key)) {\r\n            this.gridMap.get(key)?.delete(node);\r\n        }\r\n        this.nodeGridKey.delete(node);\r\n    }\r\n}\r\n"]}