{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Monster/MonsterManager.ts"],"names":["_decorator","Component","director","find","geometry","Node","PhysicsSystem","tween","Vec2","Vec3","view","ItemPool","EntityTypeEnum","EventNames","MonsterItem","DataManager","Util","Simulator","EventManager","Vector2","ccclass","property","MonsterManager","_monsterPools","_monsterTypes","Spider","Mantis","_dropPool","_bloodPool","_bornSpeed","_bornTimeLimit","_bornTime","_dropList","initMonsterPos","pos","_speedCfg","_radiusCfg","_createCounter","_smallMonsterRatio","_bigMonsterRatio","selectLocationIndex","monsterBirthPointCon","_framTimes","start","Instance","monsterManager","init","i","length","push","dropItem","MonsterBloodBar","instance","setAgentDefaults","creatMonster","isDissolveOnce","isAfferentPos","rad","pool","console","warn","node","getItem","monster","getComponent","validPos","setWorldPosition","birthPoints","children","birthPoint","getWorldPosition","bloodNode","monkeyBloodParent","addChild","setScale","newNode","getScene","to","scale","easing","call","monsterParent","removeFromParent","mass","agentId","addAgent","v3t2","agentObj","getAgentByAid","neighborDist","agentHandleId","getWorldBornPos","fixedY","radAngle","Math","random","PI","cameraMain","mainCamera","camera","uiPos","getRayRectangleIntersection","ray","Ray","screenPointToRay","x","y","mask","maxDistance","queryTrigger","raycastClosestResult","hitPoint","angle","cosA","cos","sinA","sin","screen","getVisibleSize","bounder","xMin","xMax","width","yMin","yMax","height","epsilon","rayOrigin","nearestT","Infinity","intersection","abs","tRight","yRight","tLeft","yLeft","tTop","xTop","tBottom","xBottom","update","dt","isStartGame","currentMonsterCount","maxMonsterCount","spawnCount","min","run","index","moveByRvo","inst","emit","ArmyMoveByRVO","killMonsters","nodes","isPlayer","deathAni","recycleMonster","putItem","recycleBlood","startY","peakY","bounceY","position","z","getDrops","newList","splice","recycleDrop","getSurroundedMonsters","monsterList","sceneManager","isNodeInsideDoorArea"],"mappings":"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","sourcesContent":["import { _decorator, Camera, Component, director, find, geometry, Node, PhysicsSystem, tween, Vec2, Vec3, view } from 'cc';\r\nimport ItemPool from \"../Common/ItemPool\";\r\nimport { EntityTypeEnum, EventNames } from \"../Enum/Index\";\r\nimport { MonsterItem } from './MonsterItem';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport Util from '../Common/Util';\r\nimport { Simulator } from '../RVO/Simulator';\r\nimport MonsterBorn from './MonsterBorn';\r\nimport { EventManager } from '../Global/EventManager';\r\nimport { Vector2 } from '../RVO/Common';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterManager')\r\nexport default class MonsterManager extends Component {\r\n\r\n    @property(Node)\r\n    monsterParent: Node = null;\r\n    @property(Node)\r\n    monkeyBloodParent: Node = null;\r\n\r\n    //怪物节点池\r\n    private _monsterPools: ItemPool[] = [];\r\n    private _monsterTypes: EntityTypeEnum[] = [EntityTypeEnum.Spider, EntityTypeEnum.Mantis];\r\n    private _dropPool: ItemPool;\r\n    private _bloodPool: ItemPool;\r\n    private _bornSpeed: number = 1;\r\n    private _bornTimeLimit: number = 1;\r\n    private _bornTime: number = 0;\r\n\r\n    private _dropList: Node[] = [];\r\n\r\n    private initMonsterPos = [\r\n        { pos: new Vec3(-11.775, 0, -22.134) },\r\n        { pos: new Vec3(-20.051, 0, -20.939) },\r\n        { pos: new Vec3(-14.659, 0, -28.843) },\r\n        { pos: new Vec3(-22.969, 0, -25.307) },\r\n        { pos: new Vec3(-28.471, 0, -18.303) },\r\n    ]\r\n    //rvo\r\n    private _speedCfg = [10, 8, 8, 8];\r\n    private _radiusCfg = [1.5, 1.5];\r\n\r\n    // 计数器/ 控制怪物生成比例\r\n    private _createCounter: number = 0;\r\n\r\n    // smallMonsterRatio   怪物生成的比例\r\n    private _smallMonsterRatio: number = 10;\r\n    private _bigMonsterRatio: number = 1;\r\n\r\n    private selectLocationIndex = 0;\r\n    private monsterBirthPointCon = null;\r\n    protected start(): void {\r\n        DataManager.Instance.monsterManager = this;\r\n\r\n        this.monsterBirthPointCon = find('ThreeDNode/MonsterBirthPointCon');\r\n    }\r\n\r\n    //初始化\r\n    public init() {\r\n        this._monsterPools = [];\r\n        for (let i = 0; i < this._monsterTypes.length; i++) {\r\n            this._monsterPools.push(new ItemPool(this._monsterTypes[i]));\r\n        }\r\n        this._dropPool = new ItemPool(EntityTypeEnum.dropItem);\r\n        this._bloodPool = new ItemPool(EntityTypeEnum.MonsterBloodBar);\r\n\r\n        Simulator.instance.setAgentDefaults(60, 3, 1, 0.1, 14, 80, new Vector2(0, 0));\r\n\r\n        for (let i = 0; i < this.initMonsterPos.length; i++) {\r\n            const { pos } = this.initMonsterPos[i];\r\n\r\n            DataManager.Instance.monsterManager.creatMonster(true,true, pos);\r\n        }\r\n    }\r\n\r\n    creatMonster(isDissolveOnce,isAfferentPos = false, pos = new Vec3(0, 0, 0)) {\r\n        let rad = 0;\r\n\r\n        if (this._createCounter >= this._smallMonsterRatio) {\r\n            rad = 1;\r\n            this._createCounter = 0;\r\n        } else {\r\n            rad = 0;\r\n            this._createCounter++;\r\n        }\r\n\r\n        const pool = this._monsterPools[rad];\r\n        if (!pool) {\r\n            console.warn(`No monster pool found for type ${rad}`);\r\n            return;\r\n        }\r\n\r\n        const node: Node = pool.getItem();\r\n        const monster: MonsterItem = node.getComponent(MonsterItem);\r\n        if (!monster) return;\r\n\r\n        let validPos: Vec3 = null;\r\n        if (isAfferentPos) {\r\n            validPos = pos;\r\n            node.setWorldPosition(validPos);\r\n        } else {\r\n            const birthPoints = this.monsterBirthPointCon.children;\r\n            if (this.selectLocationIndex >= birthPoints.length) {\r\n                this.selectLocationIndex = 0;\r\n            }\r\n\r\n            const birthPoint = birthPoints[this.selectLocationIndex];\r\n            validPos = birthPoint.getWorldPosition();\r\n            node.setWorldPosition(validPos);\r\n            this.selectLocationIndex++;\r\n        }\r\n\r\n        // 初始化怪物\r\n        // if (rad === 1) {\r\n        const bloodNode = this._bloodPool.getItem();\r\n        this.monkeyBloodParent.addChild(bloodNode);\r\n        if (rad == 1) {\r\n            bloodNode.setScale(0.015, 0.015, 0.015)\r\n        } else {\r\n            bloodNode.setScale(0.012, 0.012, 0.012)\r\n        }\r\n        monster.init(rad, bloodNode,isDissolveOnce);\r\n\r\n        // } else {\r\n        // monster.init(rad);\r\n        // }\r\n\r\n        const newNode = new Node(\"tempNode\");\r\n        newNode.setScale(1, 0, 1);\r\n        director.getScene().addChild(newNode);\r\n        newNode.addChild(node)\r\n        tween(newNode)\r\n            .to(0.15, { scale: new Vec3(1, 1.1, 1) }, { easing: 'quadOut' })\r\n            .to(0.05, { scale: new Vec3(1, 1, 1) }, { easing: 'quadOut' })\r\n            .call(() => {\r\n                this.monsterParent.addChild(node);\r\n                newNode.removeFromParent();\r\n                const mass = 1;\r\n                const agentId = Simulator.instance.addAgent(\r\n                    Util.v3t2(validPos),\r\n                    this._radiusCfg[rad],\r\n                    this._speedCfg[rad],\r\n                    null,\r\n                    mass\r\n                );\r\n\r\n                const agentObj = Simulator.instance.getAgentByAid(agentId);\r\n                agentObj.neighborDist = this._radiusCfg[rad] * 2;\r\n\r\n                monster.agentHandleId = agentId;\r\n            })\r\n            .start();\r\n\r\n        // // 初始 scale 为 y=0\r\n        // tween(node)\r\n        //     .to(0.3, { position: new Vec3(validPos.x, validPos.y, validPos.z) }, { easing: 'quadOut' })\r\n        //     .call(() => {\r\n\r\n        //     })\r\n        //     .start();\r\n    }\r\n\r\n\r\n    //怪出生世界坐标\r\n    private getWorldBornPos(): Vec3 {\r\n        //有效范围\r\n        let fixedY: number = 1;\r\n        //欠地图边界判断\r\n        //随机角度\r\n        let radAngle: number = Math.random() * 2 * Math.PI;\r\n        //console.log(`monster radAngle ${radAngle}`);\r\n        let cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        let uiPos: Vec2 = this.getRayRectangleIntersection(radAngle);\r\n        if (uiPos) {\r\n            //console.log(`monster sceenPos ${uiPos.x} ${uiPos.y}`);\r\n            let ray: geometry.Ray = new geometry.Ray();\r\n            cameraMain.screenPointToRay(uiPos.x, uiPos.y, ray);\r\n            //cameraMain.screenPointToRay(view.getViewportRect().width/2,view.getViewportRect().height/2,ray);\r\n            // 以下参数可选\r\n            const mask = 0xffffffff;\r\n            const maxDistance = 10000000;\r\n            const queryTrigger = true;\r\n\r\n            // if (PhysicsSystem.instance.raycastClosest(ray, mask, maxDistance, queryTrigger)) {\r\n            const raycastClosestResult = PhysicsSystem.instance.raycastClosestResult;\r\n            const hitPoint = raycastClosestResult.hitPoint;\r\n            //console.log(`monster worldPos ${hitPoint}`);   \r\n            //pos.y = fixedY;\r\n            return hitPoint;\r\n            // } else {\r\n            // console.log(\"no raycastClosest\");\r\n            // }\r\n        } else {\r\n            // console.log(\"no sceenPos\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getRayRectangleIntersection(angle: number): Vec2 | null {\r\n        //x cos y sin\r\n        const cosA = Math.cos(angle);\r\n        const sinA = Math.sin(angle);\r\n        const screen = view.getVisibleSize();\r\n        // 矩形边界范围（假设矩形是轴对齐的）\r\n        const bounder: number = 10;\r\n        const xMin = 0 - bounder;\r\n        const xMax = screen.width + bounder;\r\n        const yMin = 0 - bounder;\r\n        const yMax = screen.height + bounder;\r\n\r\n        // 处理极端情况\r\n        const epsilon = 0.0001;\r\n\r\n        // 从屏幕中心发射射线\r\n        const rayOrigin = new Vec2(screen.width / 2, screen.height / 2);\r\n        let nearestT = Infinity;\r\n        let intersection: Vec2 | null = null;\r\n\r\n        // 处理完全垂直或水平的射线\r\n        if (Math.abs(cosA) < epsilon) { // 垂直射线\r\n            return new Vec2(0, sinA > 0 ? yMax : yMin);\r\n        }\r\n        if (Math.abs(sinA) < epsilon) { // 水平射线\r\n            return new Vec2(cosA > 0 ? xMax : xMin, 0);\r\n        }\r\n\r\n        // 右边界 x = xMax\r\n        const tRight = (xMax - rayOrigin.x) / cosA;\r\n        const yRight = rayOrigin.y + tRight * sinA;\r\n        if (tRight > epsilon && yRight >= yMin && yRight <= yMax && tRight < nearestT) {\r\n            nearestT = tRight;\r\n            intersection = new Vec2(xMax, yRight);\r\n        }\r\n        // 左边界 x = xMin\r\n        const tLeft = (xMin - rayOrigin.x) / cosA;\r\n        const yLeft = rayOrigin.y + tLeft * sinA;\r\n        if (tLeft > epsilon && yLeft >= yMin && yLeft <= yMax) {\r\n            nearestT = tLeft;\r\n            intersection = new Vec2(xMin, yLeft);\r\n        }\r\n        // 上边界 y = yMax\r\n        const tTop = (yMax - rayOrigin.y) / sinA;\r\n        const xTop = rayOrigin.x + tTop * cosA;\r\n        if (tTop > epsilon && xTop >= xMin && xTop <= xMax && tTop < nearestT) {\r\n            nearestT = tTop;\r\n            intersection = new Vec2(xTop, yMax);\r\n        }\r\n\r\n        // 下边界 y = yMin\r\n        const tBottom = (yMin - rayOrigin.y) / sinA;\r\n        const xBottom = rayOrigin.x + tBottom * cosA;\r\n        if (tBottom > epsilon && xBottom >= xMin && xBottom <= xMax && tBottom < nearestT) {\r\n            nearestT = tBottom;\r\n            intersection = new Vec2(xBottom, yMin);\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n\r\n    private _framTimes = 0\r\n    protected update(dt: number): void {\r\n        if (DataManager.Instance.isStartGame) {\r\n            if (this._monsterPools.length > 0) {\r\n                const currentMonsterCount = this.monsterParent.children.length;\r\n                const maxMonsterCount = 80;\r\n\r\n                if (currentMonsterCount < maxMonsterCount) {\r\n                    this._bornTime += dt;\r\n                    if (this._bornTime > this._bornTimeLimit) {\r\n                        this._bornTime = 0;\r\n\r\n                        // 可创建的数量不超过最大限制\r\n                        const spawnCount = Math.min(this._bornSpeed, maxMonsterCount - currentMonsterCount);\r\n                        for (let i = 0; i < spawnCount; i++) {\r\n                            this.creatMonster(false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // rvo 更新逻辑坐标\r\n            Simulator.instance.run(dt);\r\n\r\n            this._framTimes = 0;\r\n            for (let index = 0; index < this.monsterParent.children.length; index++) {\r\n                const monster = this.monsterParent.children[index];\r\n                monster?.getComponent(MonsterItem)?.moveByRvo(dt);\r\n            }\r\n            EventManager.inst.emit(EventNames.ArmyMoveByRVO, dt);\r\n        }\r\n    }\r\n\r\n    public killMonsters(nodes: Node[], isPlayer = false) {\r\n        for (let node of nodes) {\r\n            let monster: MonsterItem = node.getComponent(MonsterItem);\r\n            if (monster) {\r\n                monster.deathAni(isPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    public recycleMonster(index: number, node: Node) {\r\n        if (this._monsterPools[index]) {\r\n            this._monsterPools[index].putItem(node);\r\n        }\r\n    }\r\n\r\n    public recycleBlood(node: Node) {\r\n        this._bloodPool.putItem(node);\r\n    }\r\n\r\n    // 金币掉落\r\n    public dropItem(pos: Vec3) {\r\n        let node = this._dropPool.getItem();\r\n        this.monsterParent.addChild(node);\r\n        node.setWorldPosition(pos);\r\n\r\n        // 原始位置\r\n        const startY = pos.y;\r\n        const peakY = startY + 3;     // 第一次跃起高度\r\n        const bounceY = startY + 0.7;   // 回落后的弹跳高度\r\n\r\n        tween(node)\r\n            .to(0.25, { position: new Vec3(pos.x, peakY, pos.z) }, { easing: 'quadOut' })   // 向上弹起\r\n            .to(0.2, { position: new Vec3(pos.x, startY, pos.z) }, { easing: 'quadIn' })    // 回落\r\n            .to(0.15, { position: new Vec3(pos.x, bounceY, pos.z) }, { easing: 'quadOut' }) // 二次弹起\r\n            .to(0.15, { position: new Vec3(pos.x, startY, pos.z) }, { easing: 'quadIn' })   // 回到地面\r\n            .call(() => {\r\n                this._dropList.push(node);\r\n            })\r\n            .start();\r\n    }\r\n\r\n    //获取掉落物\r\n    public getDrops() {\r\n        let newList = this._dropList.splice(0, this._dropList.length);\r\n        return newList;\r\n    }\r\n\r\n    //回收掉落物\r\n    public recycleDrop(node: Node) {\r\n        this._dropPool.putItem(node);\r\n    }\r\n\r\n    // 开始场景2，3的时候，检查哪些怪被包围在场景中了\r\n    getSurroundedMonsters() {\r\n        const monsterList = [];\r\n        for (let i = 0; i < this.monsterParent.children.length; i++) {\r\n            const monster = this.monsterParent.children[i];\r\n\r\n            if (!monster) continue;\r\n\r\n            if (DataManager.Instance.sceneManager.isNodeInsideDoorArea(monster)) {\r\n                monsterList.push(monster);\r\n            }\r\n        }\r\n\r\n        return monsterList;\r\n    }\r\n\r\n}"]}