{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_DefendTheCup/assets/JavaScript/Scene/SceneManager.ts"],"names":["_decorator","Component","Prefab","Node","find","Material","Pool","instantiate","EntityTypeEnum","PathEnum","PrefabPathEnum","ResourceManager","DataManager","Platform","GridSystem","FlowField","Simulator","Vector2","RVOObstacles","super_html_playable","ccclass","property","SceneManager","hitEffectPrefabPool","_frames","onLoad","google_play","appstore","set_google_play_url","set_app_store_url","start","Instance","sceneManager","Promise","all","loadRes","initGame","initGrid","list","type","p","then","prefabMap","set","push","soundManager","playLoopAudio","instance","init","monsterManager","obstacles","children","setAgentDefaults","addRvoObstacle","fencesScene1","FencesScene1","collectGuardrails","initAddScene1DoorFun","poolCount","prefab","get","TX_Attack_hit","node","removeFromParent","updateGuidanceData","gridSystem","deliveryAreas","guideList","guideTargetList","i","length","guideData","name","isDisplay","isFind","worldPos","worldPosition","unshift","plot","getChildByName","isZeroScale","scale","x","y","z","tempList","scene1Physics","Scene1Physics","left","right","top","bottom","obstacle","outSide1","OutSide1","outSide2","OutSide2","outSide3","OutSide3","outSide4","OutSide4","obstacleArr","excludedNames","indexOf","addOneObstacle","processObstacles","scene","j","guardrailArr","attackingMonsterCount","blood","guardrailBlood","scene1","Scene1","doorConfigs","side","doorName","direction","forEach","cfg","sideNode","console","warn","doorNode","child","addDoor","addSceneDoorFun","path","index","doors","findIndex","item","splice","scene2","rSide","rDoor","door","isNodeInsideDoorArea","minX","Infinity","maxX","minZ","maxZ","doorLeft","pos","Math","min","max","update","dt","guardrail","bloodNode","FenceBloodBar","active"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Node, director, find, math, Material, Pool, instantiate } from 'cc';\r\nimport { EntityTypeEnum, GamePlayNameEnum, PathEnum, PrefabPathEnum } from '../Enum/Index';\r\nimport { ResourceManager } from '../Global/ResourceManager';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport Platform from '../Common/Platform';\r\nimport { GridSystem } from '../Grid/GridSystem';\r\nimport { FlowField } from '../Monster/FlowField';\r\nimport { Simulator } from '../RVO/Simulator';\r\nimport { Vector2 } from '../RVO/Common';\r\nimport RVOObstacles from '../Global/RVOObstacles';\r\nimport super_html_playable from '../Common/super_html_playable';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SceneManager')\r\nexport class SceneManager extends Component {\r\n    @property(Node)\r\n    obstacles: Node = null;\r\n\r\n    @property(Material)\r\n    doorMaterials: Material[] = [];\r\n\r\n    @property(Material)\r\n    guardrailMaterials: Material[] = [];\r\n\r\n    hitEffectPrefabPool: Pool<Node> | null = null;\r\n\r\n    onLoad(): void {\r\n        //跳转链接\r\n        const google_play = \"https://play.google.com/store/apps/details?gl=US&hl=en-US&id=com.gzgroup.lproject3\";\r\n        const appstore = \"https://play.google.com/store/apps/details?gl=US&hl=en-US&id=com.gzgroup.lproject3\";\r\n\r\n        super_html_playable.set_google_play_url(google_play);\r\n        super_html_playable.set_app_store_url(appstore);\r\n    }\r\n\r\n    async start() {\r\n        DataManager.Instance.sceneManager = this;\r\n\r\n        await Promise.all([this.loadRes()]);\r\n        this.initGame();\r\n        this.initGrid();\r\n    }\r\n\r\n    async loadRes() {\r\n        const list = [];\r\n        for (const type in PrefabPathEnum) {\r\n            const p = ResourceManager.Instance.loadRes(PrefabPathEnum[type], Prefab).then((Prefab) => {\r\n                DataManager.Instance.prefabMap.set(type, Prefab)\r\n            })\r\n\r\n            list.push(p);\r\n        }\r\n\r\n        await Promise.all(list);\r\n    }\r\n\r\n    initGame() {\r\n        DataManager.Instance.soundManager.playLoopAudio();\r\n\r\n        Platform.instance.init();\r\n        if (DataManager.Instance.monsterManager) DataManager.Instance.monsterManager.init();\r\n        if (this.obstacles) {\r\n            FlowField.Instance.init(this.obstacles.children);\r\n        }\r\n\r\n        //rvo\r\n        Simulator.instance.setAgentDefaults(60, 3, 1, 0.1, 14, 80, new Vector2(0, 0));\r\n\r\n        // 添加静态障碍物\r\n        this.addRvoObstacle();\r\n\r\n        // 收集护栏\r\n        const fencesScene1 = find(PathEnum.FencesScene1);\r\n        this.collectGuardrails(fencesScene1);\r\n\r\n        // 添加门\r\n        this.initAddScene1DoorFun();\r\n\r\n        const poolCount = 5;\r\n\r\n        this.hitEffectPrefabPool = new Pool(() => {\r\n            const prefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.TX_Attack_hit)\r\n            return instantiate(prefab!)\r\n        }, poolCount, (node: Node) => {\r\n            node.removeFromParent();\r\n        })\r\n\r\n        this.updateGuidanceData();\r\n    }\r\n\r\n    initGrid() {\r\n        DataManager.Instance.gridSystem = new GridSystem(5);\r\n    }\r\n\r\n    // 更新指引数据\r\n    updateGuidanceData() {\r\n        const deliveryAreas = find(\"ThreeDNode/Map/DeliveryAreas\");\r\n\r\n        if (deliveryAreas) {\r\n            const guideList = DataManager.Instance.guideTargetList;\r\n\r\n            for (let i = 0; i < deliveryAreas.children.length; i++) {\r\n                const node = deliveryAreas.children[i];\r\n                if (!node) continue;\r\n\r\n                const guideData = {\r\n                    name: node.name,\r\n                    isDisplay: true,\r\n                    isFind: true,\r\n                    node: node,\r\n                    worldPos: node.worldPosition,\r\n                };\r\n\r\n                // 最后两个插入数组开头，其余插入末尾\r\n                if (i >= deliveryAreas.children.length - 2) {\r\n                    guideData.isDisplay = false;\r\n                    guideList.unshift(guideData); // 插入开头\r\n                } else {\r\n                    const plot = node.getChildByName(\"Plot\");\r\n                    if (plot) {\r\n                        const isZeroScale = plot && plot.scale.x !== 0 && plot.scale.y !== 0 && plot.scale.z !== 0;\r\n\r\n                        if (isZeroScale) {\r\n                            guideData.isDisplay = true;\r\n                        } else {\r\n                            guideData.isDisplay = false;\r\n                        }\r\n                    }\r\n                    guideList.push(guideData); // 插入末尾\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // 添加障碍物\r\n    addRvoObstacle() {\r\n        let tempList = [];\r\n        const scene1Physics = find(PathEnum.Scene1Physics);\r\n        const left = scene1Physics.getChildByName(\"Left\");\r\n        const right = scene1Physics.getChildByName(\"Right\");\r\n        const top = scene1Physics.getChildByName(\"Top\");\r\n        const bottom = scene1Physics.getChildByName(\"Bottom\");\r\n        const obstacle = scene1Physics.getChildByName(\"obstacle\");\r\n        const outSide1 = find(PathEnum.OutSide1);\r\n        const outSide2 = find(PathEnum.OutSide2);\r\n        const outSide3 = find(PathEnum.OutSide3);\r\n        const outSide4 = find(PathEnum.OutSide4);\r\n\r\n        tempList.push(...left.children, ...right.children, ...bottom.children, ...top.children);\r\n        DataManager.Instance.obstacleArr.push(obstacle, ...outSide1.children, ...outSide2.children, ...outSide3.children, ...outSide4.children);\r\n\r\n        var excludedNames = [\"Scene1_T_Door\", \"Scene1_L_Door\", \"Scene1_R_Door\", \"Scene1_B_Door\"];\r\n        for (var i = 0; i < tempList.length; i++) {\r\n            var node = tempList[i];\r\n            if (excludedNames.indexOf(node.name) === -1) {\r\n                RVOObstacles.addOneObstacle(node);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < DataManager.Instance.obstacleArr.length; i++) {\r\n            const node = DataManager.Instance.obstacleArr[i];\r\n            RVOObstacles.addOneObstacle(node);\r\n        }\r\n\r\n        Simulator.instance.processObstacles();\r\n    }\r\n\r\n    // 收集护栏\r\n    collectGuardrails(scene) {\r\n        for (let i = 0; i < scene.children.length; i++) {\r\n            for (let j = 0; j < scene.children[i].children.length; j++) {\r\n                const node = scene.children[i].children[j];\r\n\r\n                if (!node) continue;\r\n                DataManager.Instance.guardrailArr.push({\r\n                    node: node,\r\n                    attackingMonsterCount: 0,\r\n                    blood: DataManager.Instance.guardrailBlood\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // 添加门\r\n    initAddScene1DoorFun() {\r\n        const scene1 = find(PathEnum.Scene1);\r\n\r\n        const doorConfigs = [\r\n            { side: \"LSide\", doorName: \"L_Door\", direction: \"Left\" },\r\n            { side: \"TSide\", doorName: \"T_Door\", direction: \"Top\" },\r\n            { side: \"RSide\", doorName: \"R_Door\", direction: \"Right\" },\r\n            { side: \"BSide\", doorName: \"B_Door\", direction: \"Bottom\" },\r\n        ];\r\n\r\n        doorConfigs.forEach(cfg => {\r\n            const sideNode = scene1.getChildByName(cfg.side);\r\n            if (!sideNode) {\r\n                console.warn(`未找到 ${cfg.side}`);\r\n                return;\r\n            }\r\n\r\n            const doorNode = sideNode.children.find(child => child.name === cfg.doorName);\r\n            if (!doorNode) {\r\n                console.warn(`未找到 ${cfg.doorName} in ${cfg.side}`);\r\n                return;\r\n            }\r\n\r\n            this.addDoor({ direction: cfg.direction, doorNode });\r\n        });\r\n    }\r\n\r\n    // 添加场景2\r\n    addSceneDoorFun(path) {\r\n        const index = DataManager.Instance.doors.findIndex(item => {\r\n            return item.direction == \"Right\";\r\n        })\r\n\r\n        if (index >= 0) {\r\n            DataManager.Instance.doors.splice(index, 1);\r\n\r\n            const scene2 = find(path);\r\n            const rSide = scene2.getChildByName(\"RSide\");\r\n\r\n            if (rSide) {\r\n                const rDoor = rSide.getChildByName(\"R_Door\")\r\n                if (rDoor) {\r\n                    DataManager.Instance.doors.push({\r\n                        direction: \"Right\",\r\n                        doorNode: rDoor\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 添加门\r\n    addDoor(door) {\r\n        DataManager.Instance.doors.push(door);\r\n    }\r\n\r\n    // 判断一个节点是否在门围城的区域内\r\n    isNodeInsideDoorArea(node: Node): boolean {\r\n        const doors = DataManager.Instance.doors;\r\n        if (!doors || doors.length < 4) {\r\n            // console.log(\"门数量不足， 无法判断区域\")\r\n            return false;\r\n        }\r\n\r\n        let minX = Infinity, maxX = -Infinity;\r\n        let minZ = Infinity, maxZ = -Infinity;\r\n\r\n        for (const { doorNode } of doors) {\r\n            const doorLeft = doorNode.getChildByName(\"Door_Left\");\r\n\r\n            const pos = doorLeft.worldPosition;\r\n            minX = Math.min(minX, pos.x);\r\n            maxX = Math.max(maxX, pos.x);\r\n            minZ = Math.min(minZ, pos.z);\r\n            maxZ = Math.max(maxZ, pos.z);\r\n        }\r\n\r\n        const pos = node.worldPosition;\r\n\r\n        return pos.x >= minX && pos.x <= maxX && pos.z >= minZ && pos.z <= maxZ;\r\n    }\r\n\r\n    // 栅栏血条消失逻辑\r\n    private _frames = 0;\r\n    protected update(dt: number): void {\r\n        if (this._frames++ > 10) {\r\n            this._frames = 0\r\n            DataManager.Instance.guardrailArr.forEach(guardrail => {\r\n                if (guardrail.attackingMonsterCount <= 0) {\r\n                    let bloodNode: Node = guardrail.node.getChildByName(EntityTypeEnum.FenceBloodBar);\r\n                    if (bloodNode) {\r\n                        bloodNode.active = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n"]}