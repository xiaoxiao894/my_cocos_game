{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/core/MapBeast/PoolManager.ts"],"names":["PoolManager","_decorator","NodePool","director","instantiate","isValid","Director","ccclass","property","_poolDict","Map","_prefabDict","_resetFuncDict","instance","_instance","on","EVENT_BEFORE_SCENE_LOADING","clearAll","initPool","poolName","prefab","initSize","resetFunc","has","console","warn","pool","set","_expandPool","getNode","error","get","size","log","putNode","node","destroy","parent","removeFromParent","put","expandSize","i","newNode","getPoolSize","clearPool","clear","delete","forEach","name","printPoolsStatus","poolManager"],"mappings":"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","sourcesContent":["import { _decorator, Node, Prefab, NodePool, director, instantiate, isValid, Director } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Cocos Creator 3.8.0 专用节点池管理器\r\n * 功能：\r\n * 1. 多对象池管理\r\n * 2. 自动扩容机制\r\n * 3. 内存安全检测\r\n * 4. 节点回收重置\r\n */\r\nexport class PoolManager {\r\n    private static _instance: PoolManager | null = null;\r\n    private _poolDict: Map<string, NodePool> = new Map();\r\n    private _prefabDict: Map<string, Prefab> = new Map();\r\n    private _resetFuncDict: Map<string, (node: Node) => void> = new Map();\r\n\r\n    public static get instance(): PoolManager {\r\n        if (!this._instance) {\r\n            this._instance = new PoolManager();\r\n            // 使用新的 game 事件系统\r\n                director.on(Director.EVENT_BEFORE_SCENE_LOADING, () => {\r\n                this._instance?.clearAll();\r\n            });\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 初始化对象池\r\n     * @param poolName 对象池名称\r\n     * @param prefab 预制体\r\n     * @param initSize 初始大小\r\n     * @param resetFunc (可选)节点回收时的重置函数\r\n     */\r\n    public initPool(poolName: string, prefab: Prefab, initSize: number, resetFunc?: (node: Node) => void): void {\r\n        if (this._poolDict.has(poolName)) {\r\n            console.warn(`对象池 ${poolName} 已存在!`);\r\n            return;\r\n        }\r\n\r\n        // 创建新对象池（3.8.0 不需要传递组件类型）\r\n        const pool = new NodePool();\r\n        this._poolDict.set(poolName, pool);\r\n        this._prefabDict.set(poolName, prefab);\r\n\r\n        // 保存重置函数\r\n        if (resetFunc) {\r\n            this._resetFuncDict.set(poolName, resetFunc);\r\n        }\r\n\r\n        // 预生成节点\r\n        this._expandPool(poolName, initSize);\r\n    }\r\n\r\n    /**\r\n     * 从对象池获取节点\r\n     * @param poolName 对象池名称\r\n     * @returns 节点或null(如果对象池未初始化)\r\n     */\r\n    public getNode(poolName: string): Node | null {\r\n        if (!this._poolDict.has(poolName)) {\r\n            console.error(`对象池 ${poolName} 未初始化!`);\r\n            return null;\r\n        }\r\n\r\n        const pool = this._poolDict.get(poolName);\r\n        const prefab = this._prefabDict.get(poolName);\r\n\r\n        // 对象池中有可用节点\r\n        if (pool && pool.size() > 0) {\r\n            return pool.get()!;\r\n        }\r\n\r\n        // 对象池为空，动态扩容\r\n        console.log(`对象池 ${poolName} 为空，自动扩容`);\r\n        this._expandPool(poolName, 1);\r\n        return instantiate(prefab);\r\n    }\r\n\r\n    /**\r\n     * 将节点放回对象池\r\n     * @param poolName 对象池名称\r\n     * @param node 要回收的节点\r\n     */\r\n    public putNode(poolName: string, node: Node): void {\r\n        if (!isValid(node)) {\r\n            return;\r\n        }\r\n\r\n        if (!this._poolDict.has(poolName)) {\r\n            console.warn(`对象池 ${poolName} 不存在，直接销毁节点`);\r\n            node.destroy();\r\n            return;\r\n        }\r\n\r\n        // 确保节点从父节点中移除\r\n        if (node.parent) {\r\n            node.removeFromParent();\r\n        }\r\n\r\n        // 执行重置函数\r\n        if (this._resetFuncDict.has(poolName)) {\r\n            this._resetFuncDict.get(poolName)!(node);\r\n        }\r\n\r\n        // 回收节点\r\n        const pool = this._poolDict.get(poolName);\r\n        pool && pool.put(node);\r\n    }\r\n\r\n    /**\r\n     * 动态扩容对象池 (私有方法)\r\n     */\r\n    private _expandPool(poolName: string, expandSize: number): void {\r\n        const pool = this._poolDict.get(poolName);\r\n        const prefab = this._prefabDict.get(poolName);\r\n\r\n        if (!pool || !prefab) return;\r\n\r\n        for (let i = 0; i < expandSize; i++) {\r\n            const newNode = instantiate(prefab);\r\n            pool.put(newNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取对象池当前大小\r\n     * @param poolName 对象池名称\r\n     */\r\n    public getPoolSize(poolName: string): number {\r\n        return this._poolDict.get(poolName)?.size() || 0;\r\n    }\r\n\r\n    /**\r\n     * 清空指定对象池\r\n     * @param poolName 对象池名称\r\n     */\r\n    public clearPool(poolName: string): void {\r\n        if (!this._poolDict.has(poolName)) {\r\n            return;\r\n        }\r\n\r\n        const pool = this._poolDict.get(poolName);\r\n        pool?.clear();\r\n        this._poolDict.delete(poolName);\r\n        this._prefabDict.delete(poolName);\r\n        this._resetFuncDict.delete(poolName);\r\n    }\r\n\r\n    /**\r\n     * 清空所有对象池\r\n     */\r\n    public clearAll(): void {\r\n        this._poolDict.forEach((pool, name) => {\r\n            pool.clear();\r\n        });\r\n\r\n        this._poolDict.clear();\r\n        this._prefabDict.clear();\r\n        this._resetFuncDict.clear();\r\n    }\r\n\r\n    /**\r\n     * 打印所有对象池状态 (调试用)\r\n     */\r\n    public printPoolsStatus(): void {\r\n        console.log('===== 对象池状态 =====');\r\n        this._poolDict.forEach((pool, name) => {\r\n            const prefab = this._prefabDict.get(name);\r\n            console.log(`[${name}]: 可用 ${pool.size()}个, Prefab: ${prefab?.name || 'Unknown'}`);\r\n        });\r\n        console.log('=====================');\r\n    }\r\n}\r\n\r\n// 导出单例\r\nexport const poolManager = PoolManager.instance;\r\n"]}