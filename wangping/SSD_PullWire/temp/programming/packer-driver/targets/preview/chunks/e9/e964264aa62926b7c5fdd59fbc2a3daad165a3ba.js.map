{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/core/MapBeast/EnemyBase.ts"],"names":["_decorator","Component","Node","SkeletalAnimation","Vec3","Animation","Collider","eventMgr","EventType","TopShakeEffect","DissolveEffect","DataManager","ccclass","property","EnemyBase","isAlive","moveCollider","attackEnder","isParticle","targetPosition","initPos","enmeyDie","enemyTimeDie","collidPaling","attackEffect","setDie","start","init","once","MapBeast_start","beastStartCallBack","scheduleOnce","skeletalAnim","node","getComponent","setupCollisionCallbacks","movePost","attackEvent","shake","collider","console","warn","isTrigger","on","onTriggerEnter","onTriggerStay","other","self","log","event","otherCollider","attack","onTriggerExit","moveTo","position","clone","playAnimation","update","deltaTime","posz","z","setPosition","x","y","takeDamage","damage","health","die","electricParticle","active","name","Instance","soundManager","playElephantSound","playDogSound","playBearSound","dissovleNode","play","dis","removeFromParent","destroy","loop","onFinished","stop","state","getState","speed","FINISHED","target","isMapBesastSatr","playAttackPalingSound"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, SkeletalAnimation, Vec3, Animation, AnimationState, Collider, BoxCollider, ITriggerEvent } from 'cc';\r\nimport { eventMgr } from '../EventManager';\r\nimport { EventType } from '../EventType';\r\nimport { TopShakeEffect } from './TopShakeEffect';\r\nimport { DissolveEffect } from 'db://assets/Res/DissolveEffect/scripts/DissolveEffect';\r\nimport { DataManager } from '../../Global/DataManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('EnemyBase')\r\nexport class EnemyBase extends Component {\r\n\r\n    @property(SkeletalAnimation) // 绑定骨骼动画组件\r\n    protected skeletalAnim: SkeletalAnimation | null = null;\r\n\r\n    @property\r\n    protected moveSpeed: number = 2; // 移动速度\r\n\r\n    @property\r\n    protected health: number = 100; // 生命值\r\n\r\n    @property(Node)\r\n    electricParticle: Node = null;\r\n\r\n    protected isAlive: boolean = true;\r\n    protected moveCollider = false;\r\n    protected attackEnder = false;\r\n    protected isParticle = true;\r\n    protected targetPosition: Vec3 | null = null; // 移动目标位置\r\n    protected initPos: Vec3 | null = null;//目标初始位置\r\n    private enmeyDie: boolean = false; //通电后怪物攻击一次后 几秒死亡 \r\n    private enemyTimeDie: number = 2\r\n    private collidPaling: Node;\r\n\r\n    private attackEffect: boolean = false;\r\n\r\n    @property(Node)\r\n    dissovleNode: Node = null;\r\n\r\n    setDie() {\r\n\r\n        this.enmeyDie = true;\r\n        this.attackEffect = true;\r\n    }\r\n    start() {\r\n        this.init();\r\n        eventMgr.once(EventType.MapBeast_start, this.beastStartCallBack, this);\r\n        //  this.onInitEvent();\r\n    }\r\n    beastStartCallBack() {\r\n        this.scheduleOnce(() => {\r\n            this.attackEffect = true;\r\n        }, 1)\r\n    }\r\n    protected init() {\r\n        // 初始化骨骼动画\r\n        if (!this.skeletalAnim) {\r\n            this.skeletalAnim = this.node.getComponent(SkeletalAnimation);\r\n        }\r\n        // if (this.skeletalAnim) {\r\n        //     this.playAnimation('walk', true); // 默认播放待机动画\r\n        // }\r\n        this.setupCollisionCallbacks();\r\n        this.movePost();\r\n\r\n    }\r\n    attackEvent() {\r\n        this.collidPaling.getComponent(TopShakeEffect).shake(2);\r\n    }\r\n\r\n    protected setupCollisionCallbacks() {\r\n        const collider = this.node.getComponent(Collider);\r\n        if (!collider) {\r\n            console.warn('没有找到碰撞矩阵');\r\n            return;\r\n        }\r\n        if (!collider) return;\r\n\r\n        collider.isTrigger = true; // \r\n\r\n        // 注册触发器回调\r\n        collider.on('onTriggerEnter', this.onTriggerEnter, this);\r\n        collider.on('onTriggerStay', this.onTriggerStay, this);\r\n        // collider.on('onTriggerExit', this.onTriggerExit, this);\r\n\r\n    }\r\n    onTriggerEnter(other: Collider, self: Collider) {\r\n        console.log(\"onTriggerEnter\")\r\n\r\n\r\n    }\r\n    onTriggerStay(event: ITriggerEvent) {\r\n\r\n        // console.log(\"onTriggerStay\")\r\n        const otherCollider = event.otherCollider;\r\n        //console.log(otherCollider)\r\n\r\n        this.moveCollider = false;\r\n        if (!this.attackEnder) {\r\n            this.attack(otherCollider.node)\r\n            this.collidPaling = otherCollider.node;\r\n            this.attackEnder = true;\r\n        }\r\n    }\r\n    onTriggerExit(other: Collider, self: Collider) {\r\n        console.log(\"onTriggerExit\")\r\n    }\r\n    // 通用移动方法\r\n    public moveTo(position: Vec3) {\r\n        if (!this.isAlive) return;\r\n\r\n        this.targetPosition = position.clone();\r\n        this.playAnimation('walk', true);\r\n    }\r\n    // 通用移动方法\r\n    public movePost() {\r\n        if (!this.isAlive) return;\r\n        this.moveCollider = true;\r\n        this.playAnimation('walk', true);\r\n    }\r\n\r\n\r\n    update(deltaTime: number) {\r\n        if (!this.isAlive || !this.moveCollider) return;\r\n        let posz = this.node.position.z - deltaTime * 2;\r\n        this.node.setPosition(new Vec3(this.node.position.x, this.node.position.y, posz))\r\n\r\n\r\n        // // 计算移动方向\r\n        // const currentPos = this.node.worldPosition;\r\n        // const direction = new Vec3();\r\n        // Vec3.subtract(direction, this.targetPosition, currentPos);\r\n\r\n        // // 判断是否到达目标\r\n        // if (direction.lengthSqr() < 0.1) {\r\n        //     this.targetPosition = null;\r\n        //     this.playAnimation('Idle', true);\r\n        //     return;\r\n        // }\r\n\r\n        // // 标准化方向向量并移动\r\n        // direction.normalize();\r\n        // direction.multiplyScalar(this.moveSpeed * deltaTime);\r\n        // Vec3.add(currentPos, currentPos, direction);\r\n        // this.node.worldPosition = currentPos;\r\n\r\n        // // 面向移动方向\r\n        // this.faceDirection(direction);\r\n    }\r\n\r\n    // // 转向移动方向\r\n    // protected faceDirection(direction: Vec3) {\r\n    //     direction.y = 0; // 保持水平旋转\r\n    //     if (direction.lengthSqr() > 0) {\r\n    //         this.node.lookAt(Vec3.add(new Vec3(), this.node.worldPosition, direction));\r\n    //     }\r\n    // }\r\n\r\n    // 通用受伤方法\r\n    public takeDamage(damage: number) {\r\n        if (!this.isAlive) return;\r\n\r\n        this.health -= damage;\r\n        if (this.health <= 0) {\r\n            this.die();\r\n        }\r\n\r\n    }\r\n\r\n    // 死亡处理\r\n    public die() {\r\n         this.electricParticle.active = false;\r\n        if (!this.isAlive) return;\r\n        this.isAlive = false;\r\n       \r\n        if (this.node.name == \"ElephantPrefab\" || this.node.name == \"ElephantPrefab-001\") {\r\n            DataManager.Instance.soundManager.playElephantSound()\r\n        } else if (this.node.name == \"DogPrefab\" || this.node.name == \"DogPrefab-001\") {\r\n            DataManager.Instance.soundManager.playDogSound()\r\n        } else if (this.node.name == \"BearPrefab\" || this.node.name == \"BearPrefab-001\") {\r\n            DataManager.Instance.soundManager.playBearSound()\r\n        }\r\n        this.scheduleOnce(() => {\r\n\r\n            if (this.dissovleNode.getComponent(DissolveEffect))\r\n                this.dissovleNode.getComponent(DissolveEffect).play(0.8);\r\n\r\n        }, 0.5)\r\n\r\n        this.playAnimation('die', false, () => {\r\n            if (this.dissovleNode) {\r\n                let dis = this.dissovleNode;\r\n\r\n\r\n\r\n                this.scheduleOnce(() => {\r\n                    this.electricParticle.active = true;\r\n                    this.node.removeFromParent();\r\n                    this.node.destroy(); // 动画结束后销毁\r\n                }, 1)\r\n\r\n            } else {\r\n                // if (this.node.name == \"ElephantPrefab\" || this.node.name == \"ElephantPrefab-001\") {\r\n                //     DataManager.Instance.soundManager.playElephantSound()\r\n                // } else if (this.node.name == \"DogPrefab\" || this.node.name == \"DogPrefab-001\") {\r\n                //     DataManager.Instance.soundManager.playDogSound()\r\n                // } else if (this.node.name == \"BearPrefab\" || this.node.name == \"BearPrefab-001\") {\r\n                //     DataManager.Instance.soundManager.playBearSound()\r\n                // }\r\n                this.scheduleOnce(() => {\r\n                    this.isParticle = true;\r\n                    this.node.removeFromParent();\r\n                    this.node.destroy(); // 动画结束后销毁\r\n                }, 1)\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    // 骨骼动画控制方法\r\n    protected playAnimation(\r\n        name: string,\r\n        loop: boolean = false,\r\n        onFinished?: () => void\r\n    ) {\r\n        if (!this.skeletalAnim) return;\r\n\r\n        // 停止当前动画\r\n        this.skeletalAnim.stop();\r\n\r\n        // 播放新动画\r\n        const state = this.skeletalAnim.getState(name);\r\n        if (state) {\r\n\r\n            //console.log(`state===== ${state}`)\r\n            //state.wrapMode = loop ? AnimationState.WrapMode.Loop : AnimationState.WrapMode.Normal;\r\n            state.speed = 1.0;\r\n\r\n            this.skeletalAnim.play(name);\r\n\r\n            // 设置单次动画结束回调\r\n            if (!loop && onFinished) {\r\n                this.skeletalAnim.once(Animation.EventType.FINISHED, onFinished);\r\n            }\r\n        } else {\r\n            console.warn(`Animation clip ${name} not found!`);\r\n        }\r\n    }\r\n\r\n    // 攻击方法 (需子类实现具体逻辑)\r\n    public attack(target: any) {\r\n        if (!this.isAlive) return;\r\n        // this.scheduleOnce(() => {\r\n        //     target.getComponent(TopShakeEffect).shake(2);\r\n        // }, 0.5);\r\n\r\n        if(this.electricParticle?.active == false){\r\n            if(DataManager.Instance.isMapBesastSatr)\r\n            this.electricParticle.active = true;\r\n        }\r\n        this.playAnimation('attack', false, () => {\r\n\r\n            DataManager.Instance.soundManager.playAttackPalingSound();\r\n            if (this.attackEffect) {\r\n                if (this.electricParticle) {\r\n                   // if (this.isParticle) {\r\n                     //   this.isParticle = false;\r\n                        //if (this.electricParticle.active == false) {\r\n                        //this.electricParticle.active = true;\r\n                        //  }\r\n                  //  }\r\n\r\n                }\r\n            }\r\n            \r\n            if (target)\r\n                this.scheduleOnce(() => {\r\n                    this.attackEnder = false;\r\n                }, 0.2);\r\n            if (this.enmeyDie) {\r\n                this.scheduleOnce(() => {\r\n\r\n                    this.die();\r\n                }, this.enemyTimeDie);\r\n            }\r\n            // this.playAnimation('Idle', true);\r\n            // 子类可在此添加攻击逻辑\r\n        });\r\n    }\r\n}"]}