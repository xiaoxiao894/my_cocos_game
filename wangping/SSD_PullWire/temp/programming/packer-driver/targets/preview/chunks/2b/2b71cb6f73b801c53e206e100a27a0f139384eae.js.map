{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/core/FruitScript.ts"],"names":["_decorator","CCFloat","Component","Material","MeshRenderer","tween","Vec3","ccclass","property","FruitScript","type","visible","enableBounce","tooltip","fruitNode","isRedState","meshRenderers","originalScale","onLoad","initFruitState","node","getChildByName","active","scale","clone","cacheMeshRenderers","children","forEach","child","fanqieNode","meshRenderer","getComponent","push","getFruitState","setFruitState","state","isFirst","materialRed","materialGreen","targetMaterial","setMaterial","startBounce","addScaleEffect","to","scaleTime","multiplyScalar","scaleNumber","start","startPos","position","x","y","z","peakPos","bounceHeight","overshootPos","overshootDistance","totalDuration","upPhaseRatio","easing","downPhaseRatio","bounceBackRatio"],"mappings":"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","sourcesContent":["import { _decorator, CCFloat, Component, Material, MeshRenderer, Node, tween, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('FruitScript')\r\nexport class FruitScript extends Component {\r\n    @property(Material)\r\n    private materialRed: Material | null = null; // 红色材质\r\n    @property(Material)\r\n    private materialGreen: Material | null = null; // 绿色材质\r\n    private fruitNode: Node | null = null;\r\n    private isRedState = false; // 当前是否为红色状态\r\n    private meshRenderers: MeshRenderer[] = []; // 缓存 MeshRenderer 组件\r\n    private originalScale:any = null;\r\n    protected onLoad(): void {\r\n        this.initFruitState();\r\n    }\r\n\r\n    initFruitState() {\r\n        this.fruitNode = this.node.getChildByName(\"fruitNode\") || this.node;\r\n        this.fruitNode.active = false;\r\n        this.originalScale = this.fruitNode.scale.clone();\r\n        // 缓存所有需要渲染的 MeshRenderer 组件\r\n        this.cacheMeshRenderers();\r\n    }\r\n    \r\n    // 缓存所有需要渲染的 MeshRenderer 组件\r\n    private cacheMeshRenderers() {\r\n        this.meshRenderers = [];\r\n        \r\n        // 遍历 fruitNode 的所有子节点\r\n        this.fruitNode.children.forEach(child => {\r\n            const fanqieNode = child.getChildByName(\"fanqie\");\r\n            if (fanqieNode) {\r\n                const meshRenderer = fanqieNode.getComponent(MeshRenderer);\r\n                if (meshRenderer) {\r\n                    this.meshRenderers.push(meshRenderer);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getFruitState() {\r\n        return this.isRedState;\r\n    }\r\n\r\n    // 设置水果状态（红色或绿色）\r\n    setFruitState(state: 'red' | 'green',isFirst:boolean = false) {\r\n        if (!this.fruitNode.active) {\r\n            this.fruitNode.active = true;\r\n        }\r\n        if (!this.materialRed || !this.materialGreen) return;\r\n\r\n        const targetMaterial = state === 'red' ? this.materialRed : this.materialGreen;\r\n        this.isRedState = state === 'red';\r\n\r\n        // 一次性应用材质到所有缓存的 MeshRenderer\r\n        this.meshRenderers.forEach(meshRenderer => {\r\n            meshRenderer.setMaterial(targetMaterial, 0);\r\n        });\r\n\r\n        // 根据状态播放动画\r\n        if (this.enableBounce && state === 'green' && isFirst) {\r\n            this.startBounce();\r\n        } else if (state === 'red') {\r\n            this.addScaleEffect();\r\n        }\r\n    }\r\n\r\n    @property({ type: CCFloat, visible() { return !this.enableBounce; }, tooltip: '缩放动画时常 ' })\r\n    public scaleTime: number = 0.2;\r\n\r\n    @property({ type: CCFloat, visible() { return !this.enableBounce; }, tooltip: '缩放成度' })\r\n    public scaleNumber: number = 1.1;\r\n    \r\n    // 对整个 fruitNode 添加缩放效果，而不是每个子节点\r\n    private addScaleEffect() {\r\n        \r\n        tween(this.fruitNode)\r\n            .to(this.scaleTime, { scale: this.fruitNode.scale.multiplyScalar(this.scaleNumber) })\r\n            .to(this.scaleTime, { scale: this.originalScale })\r\n            .start();\r\n    }\r\n\r\n    @property({ tooltip: '跳跃效果开始参数调节 只有跳跃效果生效' })\r\n    public enableBounce: boolean = false;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '弹跳动画总时长 ' })\r\n    public totalDuration: number = 1.0;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '弹跳高度 跳跃效果生效' })\r\n    public bounceHeight: number = 1;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '下落时超过起始点的距离 ' })\r\n    public overshootDistance: number = 0.5;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '上升阶段占总时间的比例 ' })\r\n    public upPhaseRatio: number = 0.4;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '下降阶段占总时间的比例 ' })\r\n    public downPhaseRatio: number = 0.5;\r\n\r\n    @property({ type: CCFloat, visible() { return this.enableBounce; }, tooltip: '回弹阶段占总时间的比例 ' })\r\n    public bounceBackRatio: number = 0.1;\r\n\r\n    startBounce() {\r\n        // 确保节点处于激活状态\r\n        this.fruitNode.active = true;\r\n\r\n        // 获取当前位置作为起始点\r\n        const startPos = new Vec3(this.fruitNode.position.x, this.fruitNode.position.y, this.fruitNode.position.z);\r\n\r\n        // 计算弹跳的最高点\r\n        const peakPos = new Vec3(startPos.x, startPos.y + this.bounceHeight, startPos.z);\r\n\r\n        // 计算下落时超过起始点的位置\r\n        const overshootPos = new Vec3(startPos.x, startPos.y - this.overshootDistance, startPos.z);\r\n\r\n        // 对整个 fruitNode 应用弹跳动画\r\n        tween(this.fruitNode)\r\n            // 上升阶段\r\n            .to(this.totalDuration * this.upPhaseRatio, { position: peakPos }, {\r\n                easing: \"backOut\"\r\n            })\r\n            // 下降阶段\r\n            .to(this.totalDuration * this.downPhaseRatio, { position: overshootPos }, {\r\n                easing: \"bounceOut\"\r\n            })\r\n            // 回弹到起始位置\r\n            .to(this.totalDuration * this.bounceBackRatio, { position: startPos }, {\r\n                easing: \"quadOut\"\r\n            })\r\n            .start();\r\n    }\r\n}\r\n"]}