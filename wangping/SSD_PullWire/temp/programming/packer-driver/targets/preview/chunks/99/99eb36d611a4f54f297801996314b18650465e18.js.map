{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/UI/RepoTouchComponent.ts"],"names":["_decorator","CCInteger","Component","geometry","Input","Node","PhysicsSystem","Quat","tween","Vec2","Vec3","DataManager","TransformPositionUtil","PlugItem","MathUtil","EventManager","EventName","eventMgr","PlotName","RopeUtils","ccclass","property","RepoTouchComponent","_plugStartPos","_plugStartRot","_nowSocketIndex","_plugRotateSpeed","_plugTartetRot","_lastTouchPos","_movingPlug","_movingCamera","_plugBacking","_pluglinking","_checkTowerBtn","_lastPlotIndex","cameraMoveSpeed","start","onEnable","node","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","inst","PlugStateUpdate","onPlugStateUpdate","TowerUpgradeButtonShow","onTowerUpgradeBtnShow","onDisable","off","event","console","log","emit","TouchSceenStart","Instance","isGameOver","checkTowerBtnClick","TowerUpgradeBtnClick","mainCamera","stopTweenAni","cameraMain","camera","ray","Ray","touchPos","getLocation","screenPointToRay","x","y","mask","maxDistance","queryTrigger","instance","raycastClosest","raycastClosestResult","plug","collider","plugItem","getComponent","state","nowPlug","worldPosition","clone","getRotation","soundManager","playPlugSound","movePlug","moveCamera","deltaPos","subtract","moveDir","screenToWorldDirection","normalize","moveDistance","length","sensitivity","cameraPos","getWorldPosition","scaleAndAdd","cameraLimit","Math","min","max","z","w","setWorldPosition","getPosition","cameraFoollowPlug","minMoveDistance","maxMoveDistance","checkTargetSocket","endWorldPos","worldToLocal","nowSocket","sceneManger","nowPlugPos","distance","plugConnectDistance","leftSocket","indexOf","to","plugLinkSocket","plot","getPlotIndexByPos","getPlugPos","eulerAngles","plugMoveAngles","fromEuler","equals","moveLen","maxAngle","PI","currentRot","slerp","getAngleBetweenQuats","setRotation","endPos","rotation","easing","call","cleanNowPlug","ropeManager","getDepthByPos","pos","startWorldPos","startDepth","getDepthRatio","endDepth","startSceenPos","worldToScreen","endSceenPos","ropePosRatio","getProjectionRatio","lastPos","closestPoint","getClosestPointOnRay","calculateHeight","targetPoint","rayDirection","d","rayToPoint","o","projection","dot","add","multiplyScalar","sqrt","normalizedDistance","height","index","abs","socketNodes","screenDelta","cameraNode","cameraRight","transformQuat","RIGHT","worldRotation","cameraForward","FORWARD","worldDir"],"mappings":"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","sourcesContent":["import { _decorator, Camera, CCInteger, Collider, Component, EventTouch, geometry, Input, Node, PhysicsSystem, Quat, tween, Vec2, Vec3, Vec4 } from 'cc';\r\nimport { DataManager } from '../Global/DataManager';\r\nimport TransformPositionUtil from '../Utils/TransformPositionUtil';\r\nimport { PlugItem } from '../Repo/PlugItem';\r\nimport { MathUtil } from '../Utils/MathUtils';\r\nimport { EventManager } from '../Global/EventManager';\r\nimport { EventName } from '../Common/Enum';\r\nimport { eventMgr } from '../core/EventManager';\r\nimport { PlotName } from '../core/EventType';\r\nimport RopeUtils from '../Repo/RopeUtils';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('RepoTouchComponent')\r\nexport class RepoTouchComponent extends Component {\r\n    @property(Node)\r\n    touchNode: Node = null;\r\n\r\n    //相机滑动灵敏度\r\n    @property(CCInteger)\r\n    sensitivity: number = 0.05;\r\n\r\n    //插头初始位置\r\n    private _plugStartPos: Vec3 = null;\r\n    //插头初始方向\r\n    private _plugStartRot: Quat = null;\r\n\r\n    //当前插座 index\r\n    private _nowSocketIndex: number = 0;\r\n\r\n    //插头旋转速度\r\n    private _plugRotateSpeed: number = 3;\r\n    //插头最终旋转方向\r\n    private _plugTartetRot: Quat = null;\r\n\r\n    private _lastTouchPos: Vec2 = null;\r\n\r\n    //是否正在移动插头\r\n    private _movingPlug: boolean = false;\r\n    //是否正在移动摄像机\r\n    private _movingCamera: boolean = false;\r\n\r\n\r\n\r\n    //插头是否正在回弹\r\n    private _plugBacking: boolean = false;\r\n\r\n    //插头正在插入\r\n    private _pluglinking: boolean = false;\r\n\r\n    //检测点击升级\r\n    private _checkTowerBtn: boolean = false;\r\n\r\n    private _lastPlotIndex: number = -1;\r\n\r\n    start() {\r\n        this._movingPlug = false;\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.node.on(Input.EventType.TOUCH_START, this.onTouchStart, this);;\r\n        this.node.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(Input.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n\r\n        EventManager.inst.on(EventName.PlugStateUpdate, this.onPlugStateUpdate, this);\r\n        EventManager.inst.on(EventName.TowerUpgradeButtonShow, this.onTowerUpgradeBtnShow, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        this.node.off(Input.EventType.TOUCH_START, this.onTouchStart, this);;\r\n        this.node.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.off(Input.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n\r\n        EventManager.inst.off(EventName.PlugStateUpdate, this.onPlugStateUpdate, this);\r\n        EventManager.inst.off(EventName.TowerUpgradeButtonShow, this.onTowerUpgradeBtnShow, this);\r\n    }\r\n\r\n    onTouchStart(event: EventTouch) {\r\n        console.log(\"touch start\");\r\n        EventManager.inst.emit(EventName.TouchSceenStart);\r\n\r\n        this._lastTouchPos = null;\r\n        if (DataManager.Instance.isGameOver) {\r\n            return;\r\n        }\r\n\r\n        //  if(this._checkTowerBtn){\r\n        if (this.checkTowerBtnClick(event)) {\r\n            EventManager.inst.emit(EventName.TowerUpgradeBtnClick);\r\n            return;\r\n        }\r\n        // }\r\n\r\n        DataManager.Instance.mainCamera.stopTweenAni();\r\n\r\n        if (this._plugBacking || this._pluglinking) {\r\n            this._movingCamera = true;\r\n            return;\r\n        }\r\n\r\n        let cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        let ray: geometry.Ray = new geometry.Ray();\r\n        const touchPos = event.getLocation();\r\n        console.log(\"touchPos:\", touchPos);\r\n        cameraMain.screenPointToRay(touchPos.x, touchPos.y, ray);\r\n        // 以下参数可选\r\n        const mask = 1 << 1;\r\n        const maxDistance = 10000000;\r\n        const queryTrigger = true;\r\n\r\n        if (PhysicsSystem.instance.raycastClosest(ray, mask, maxDistance, queryTrigger)) {\r\n            const raycastClosestResult = PhysicsSystem.instance.raycastClosestResult;\r\n            const plug: Collider = raycastClosestResult.collider;\r\n            if (plug) {\r\n                let plugItem: PlugItem = plug.node.getComponent(PlugItem);\r\n                if (plugItem && plugItem.state == 0) {\r\n                    this._movingPlug = true;\r\n                    DataManager.Instance.nowPlug = plug.node;\r\n                    this._plugStartPos = plug.node.worldPosition.clone();\r\n                    this._plugStartRot = plug.node.getRotation().clone();\r\n                    DataManager.Instance.soundManager.playPlugSound();\r\n                    //更新状态\r\n                    plugItem.state = 1;\r\n                    console.log(\"move start\");\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n            console.log(\"raycastClosest success\");\r\n        } else {\r\n            console.log(\"no raycastClosest\");\r\n        }\r\n        console.log(\"move camera\");\r\n        this._movingCamera = true;\r\n    }\r\n\r\n    onTouchMove(event: EventTouch) {\r\n        if (this._lastTouchPos) {\r\n            if (this._movingPlug) {\r\n                this.movePlug(event);\r\n            } else if (this._movingCamera) {\r\n                this.moveCamera(event);\r\n            }\r\n        }\r\n\r\n        this._lastTouchPos = event.getLocation();\r\n    }\r\n\r\n    //滑动摄像机\r\n    private moveCamera(event: EventTouch) {\r\n        const touchPos = event.getLocation();\r\n        if (!this._lastTouchPos) {\r\n            return;\r\n        }\r\n        let deltaPos = touchPos.clone();\r\n        deltaPos.subtract(this._lastTouchPos);\r\n        deltaPos.x = -deltaPos.x;\r\n        const cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        // 1. 将屏幕滑动向量转换为世界空间移动方向\r\n        const moveDir = this.screenToWorldDirection(deltaPos, cameraMain.node);\r\n        // 2. 保持Y轴不变\r\n        moveDir.y = 0;\r\n        moveDir.normalize();\r\n        // 3. 计算移动距离(应用灵敏度)\r\n        const moveDistance = deltaPos.length() * this.sensitivity;\r\n        // 4. 更新摄像机位置\r\n        let cameraPos = cameraMain.node.getWorldPosition().clone();\r\n        Vec3.scaleAndAdd(cameraPos, cameraPos, moveDir, moveDistance);\r\n        let cameraLimit: Vec4 = DataManager.Instance.cameraLimit;\r\n        cameraPos.x = Math.min(Math.max(cameraPos.x, cameraLimit.y), cameraLimit.x);\r\n        cameraPos.z = Math.min(Math.max(cameraPos.z, cameraLimit.w), cameraLimit.z);\r\n        cameraMain.node.setWorldPosition(cameraPos);\r\n        console.log(`像机的位置 ${cameraMain.node.getPosition()}`)\r\n        //console.log(`camera newPos ${String(cameraPos)}  moveDir ${String(moveDir)}  moveDistance ${moveDistance}`);\r\n    }\r\n    private cameraMoveSpeed: number = 1; // 相机移动速度\r\n\r\n    private cameraFoollowPlug(event: EventTouch) {\r\n        const touchPos = event.getLocation();\r\n        if (!this._lastTouchPos) {\r\n            this._lastTouchPos = touchPos.clone();\r\n            // return; // 初始化后不移动摄像机，等待下一次触摸移动\r\n        }\r\n\r\n        let deltaPos = touchPos.clone();\r\n        deltaPos.subtract(this._lastTouchPos);\r\n        deltaPos.y = -deltaPos.y;\r\n        const cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        const moveDir = this.screenToWorldDirection(deltaPos, cameraMain.node);\r\n        moveDir.y = 0;\r\n        moveDir.normalize();\r\n        console.log(`this._lastTouchPos ${this._lastTouchPos}`);\r\n        // const minMoveDistance = 1.5; \r\n        // const moveDistance = Math.max(deltaPos.length() * this.sensitivity * 4, minMoveDistance);\r\n        const minMoveDistance = 0.5;\r\n        const maxMoveDistance = 1; // 限制最大移动距离，防止飞出\r\n        let moveDistance = deltaPos.length() * this.sensitivity * 1;\r\n        moveDistance = Math.min(Math.max(moveDistance, minMoveDistance), maxMoveDistance);\r\n\r\n        console.log(`moveDistance ${moveDistance}`);\r\n        let cameraPos = cameraMain.node.getWorldPosition().clone();\r\n        Vec3.scaleAndAdd(cameraPos, cameraPos, moveDir, moveDistance);\r\n        let cameraLimit: Vec4 = DataManager.Instance.cameraLimit;\r\n        cameraPos.x = Math.min(Math.max(cameraPos.x, cameraLimit.y), cameraLimit.x);\r\n        cameraPos.z = Math.min(Math.max(cameraPos.z, cameraLimit.w), cameraLimit.z);\r\n        cameraMain.node.setWorldPosition(cameraPos);\r\n        console.log(`像机的位置111111 ${cameraMain.node.getPosition()}`);\r\n\r\n        // 更新_lastTouchPos，保证下一次计算deltaPos正确\r\n        this._lastTouchPos = touchPos.clone();\r\n    }\r\n\r\n\r\n\r\n    //移动插头\r\n    private movePlug(event: EventTouch) {\r\n       \r\n        this.checkTargetSocket();\r\n        //如果足够近直接播动画插上去\r\n        let endWorldPos: Vec3 = MathUtil.worldToLocal(DataManager.Instance.nowSocket.worldPosition, DataManager.Instance.sceneManger.node)//DataManager.Instance.nowSocket.worldPosition;\r\n        let nowPlugPos: Vec3 = MathUtil.worldToLocal(DataManager.Instance.nowPlug.worldPosition, DataManager.Instance.sceneManger.node)\r\n        let distance: number = Vec3.distance(nowPlugPos, endWorldPos);\r\n        //    let endWorldPos: Vec3 = DataManager.Instance.nowSocket.worldPosition;\r\n        //     let distance: number = Vec3.distance(DataManager.Instance.nowPlug.worldPosition, endWorldPos);\r\n        // 4 是最后一个地块，不允许手动解锁\r\n        if(this._nowSocketIndex == 3){\r\n            DataManager.Instance.plugConnectDistance = 3.5;\r\n        }else{\r\n            DataManager.Instance.plugConnectDistance = 6;\r\n        }\r\n        if (distance < DataManager.Instance.plugConnectDistance && DataManager.Instance.leftSocket.indexOf(this._nowSocketIndex) != -1 && this._nowSocketIndex !== 4) {\r\n\r\n            console.log(\"this._nowSocketIndex == \", this._nowSocketIndex);\r\n            let cameraLimit: Vec4 = DataManager.Instance.cameraLimit;\r\n            if (this._nowSocketIndex == 2) { //野兽\r\n                let cameraPos = DataManager.Instance.mainCamera.node.getWorldPosition();\r\n                if (cameraPos.x < cameraLimit.x) {\r\n                    // 使用 tween 实现平滑移动到 x=14，持续时间0.5秒\r\n                    tween(DataManager.Instance.mainCamera.node)\r\n                        .to(0.8, { worldPosition: new Vec3(cameraLimit.x - 1, cameraPos.y, cameraPos.z) })\r\n                        .start();\r\n                }\r\n            } else if (this._nowSocketIndex == 3) {//野兽 油桶\r\n                let cameraPos = DataManager.Instance.mainCamera.node.getWorldPosition();\r\n                if (cameraPos.x > cameraLimit.y + 5) {\r\n                    // 使用 tween 实现平滑移动到 x=14，持续时间0.5秒\r\n                    tween(DataManager.Instance.mainCamera.node)\r\n                        .to(0.8, { worldPosition: new Vec3(cameraLimit.y + 5, cameraPos.y, cameraPos.z) })\r\n                        .start();\r\n                }\r\n            } else if (this._nowSocketIndex == 1) {//矿场\r\n                let cameraPos = DataManager.Instance.mainCamera.node.getWorldPosition();\r\n                if (cameraPos.x < cameraLimit.x) {\r\n                    // 使用 tween 实现平滑移动到 x=14，持续时间0.5秒\r\n                    tween(DataManager.Instance.mainCamera.node)\r\n                        .to(0.8, { worldPosition: new Vec3(cameraLimit.x - 1, cameraPos.y, cameraPos.z) })\r\n                        .start();\r\n                }\r\n            } else if (this._nowSocketIndex == 0) {//农场\r\n                let cameraPos = DataManager.Instance.mainCamera.node.getWorldPosition();\r\n                if (cameraPos.x > cameraLimit.y + 5) {\r\n                    // 使用 tween 实现平滑移动到 x=14，持续时间0.5秒\r\n                    tween(DataManager.Instance.mainCamera.node)\r\n                        .to(0.8, { worldPosition: new Vec3(cameraLimit.y + 5, cameraPos.y, cameraPos.z) })\r\n                        .start();\r\n                }\r\n            }\r\n            this.plugLinkSocket();\r\n            return;\r\n        }\r\n        let plot: number = RopeUtils.getPlotIndexByPos(DataManager.Instance.nowPlug.worldPosition);\r\n        if (plot !== this._lastPlotIndex) {\r\n          //  eventMgr.emit(PlotName[this._lastPlotIndex] + \"_cloudFadeIn\");\r\n            if (plot === -1) {\r\n\r\n            } else {\r\n                eventMgr.emit(PlotName[plot] + \"_cloudFadeOut\");\r\n            }\r\n            this._lastPlotIndex = plot;\r\n        }\r\n        //屏幕坐标转3d坐标,拖动插头移动\r\n        const touchPos = event.getLocation();\r\n\r\n        \r\n        // const cameraMain:Camera = DataManager.Instance.mainCamera.camera;\r\n        // const z:number= this.getDepthByPos(touchPos);\r\n        // let outPos:Vec3 = new Vec3();\r\n        // cameraMain.screenToWorld(new Vec3(touchPos.x,touchPos.y,z),outPos);\r\n        DataManager.Instance.nowPlug.setWorldPosition(this.getPlugPos(touchPos));\r\n        //console.log(\"move plug\",outPos);\r\n\r\n        //插头移动方向\r\n        let eulerAngles: Vec3 = DataManager.Instance.plugMoveAngles[this._nowSocketIndex];\r\n        this._plugTartetRot = new Quat();\r\n        Quat.fromEuler(this._plugTartetRot, eulerAngles.x, eulerAngles.y, eulerAngles.z);\r\n        //console.log(`euler ${String(eulerAngles)}  tartetRot ${String(this._plugTartetRot)}`);\r\n        \r\n        if (DataManager.Instance.nowPlug.getRotation().equals(this._plugTartetRot)) {\r\n            this.cameraFoollowPlug(event);\r\n            return;\r\n        }\r\n       \r\n        //转动插头方向\r\n        let moveLen: number = Vec2.distance(touchPos, this._lastTouchPos);\r\n        // 计算旋转步长（转换为弧度）\r\n        const maxAngle = this._plugRotateSpeed * moveLen * Math.PI / 180;\r\n        // 使用球面线性插值(Slerp)\r\n        let currentRot: Quat = DataManager.Instance.nowPlug.getRotation();\r\n        Quat.slerp(\r\n            currentRot,\r\n            currentRot,\r\n            this._plugTartetRot,\r\n            Math.min(1, maxAngle / MathUtil.getAngleBetweenQuats(currentRot, this._plugTartetRot))\r\n        );\r\n        DataManager.Instance.nowPlug.setRotation(currentRot);\r\n         this.cameraFoollowPlug(event);\r\n        \r\n    }\r\n\r\n    onTouchEnd(event: EventTouch) {\r\n        console.log(\"touch end\");\r\n        if (this._movingPlug) {\r\n            this._movingPlug = false;\r\n            //处理插头、插座 弹回去 在此期间不能操作插头\r\n            this._plugBacking = true;\r\n            let endPos: Vec3 = this._plugStartPos.clone();\r\n            tween(DataManager.Instance.nowPlug).to(1, { worldPosition: endPos, rotation: this._plugStartRot }, { easing: \"cubicOut\" }).call(() => {\r\n                let plugItem: PlugItem = DataManager.Instance.nowPlug.getComponent(PlugItem);\r\n                if (plugItem) {\r\n                    plugItem.state = 0;\r\n                }\r\n                this.cleanNowPlug();\r\n                this._plugBacking = false;\r\n            }).start();\r\n\r\n            if (this._lastPlotIndex !== -1) {\r\n                //云恢复\r\n              //  eventMgr.emit(PlotName[this._lastPlotIndex] + \"_cloudFadeIn\");\r\n                this._lastPlotIndex = -1;\r\n            }\r\n        } else {\r\n            this._movingCamera = false;\r\n        }\r\n    }\r\n\r\n    private plugLinkSocket() {\r\n        this._movingPlug = false;\r\n        this._pluglinking = true;\r\n        let nowPlug: Node = DataManager.Instance.nowPlug;\r\n        DataManager.Instance.ropeManager.plugLinkSocket(this._nowSocketIndex, nowPlug);\r\n    }\r\n\r\n\r\n\r\n    private cleanNowPlug() {\r\n        DataManager.Instance.nowPlug = null;\r\n        this._plugStartPos = null;\r\n        this._plugStartRot = null;\r\n        DataManager.Instance.nowSocket = null;\r\n        this._nowSocketIndex = -1;\r\n        this._plugTartetRot = null;\r\n        this._lastPlotIndex = -1;\r\n    }\r\n\r\n    private getDepthByPos(pos: Vec2): number {\r\n        let z: number = 0;\r\n        //世界坐标\r\n        let startWorldPos: Vec3 = this._plugStartPos.clone();\r\n        let endWorldPos: Vec3 = DataManager.Instance.nowSocket.getWorldPosition().clone();\r\n\r\n        if (startWorldPos && endWorldPos) {\r\n            const cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n            //相机深度比值\r\n            const startDepth: number = TransformPositionUtil.getDepthRatio(cameraMain, startWorldPos);\r\n            const endDepth: number = TransformPositionUtil.getDepthRatio(cameraMain, endWorldPos);\r\n            //屏幕坐标\r\n            const startSceenPos: Vec3 = cameraMain.worldToScreen(startWorldPos);\r\n            const endSceenPos: Vec3 = cameraMain.worldToScreen(endWorldPos);\r\n            //插头距离比值\r\n            const ropePosRatio: number = TransformPositionUtil.getProjectionRatio(\r\n                new Vec2(startSceenPos.x, startSceenPos.y),\r\n                new Vec2(endSceenPos.x, endSceenPos.y),\r\n                new Vec2(pos.x, pos.y));\r\n            //插头深度\r\n            z = ropePosRatio * (endDepth - startDepth) + startDepth;\r\n        } else {\r\n            console.log(\"socketPos or plugStartPos is null\", startWorldPos, endWorldPos);\r\n        }\r\n        return z;\r\n    }\r\n\r\n\r\n\r\n    //计算Y轴高度，基于距离原点的水平距离\r\n    // public calculateHeight(x: number, z: number): number {\r\n\r\n    //     let maxDistance = 13;\r\n    //     let minDistance = 4;\r\n\r\n    //     // 计算水平距离（忽略y轴）\r\n    //     const distance = Math.sqrt(x * x + z * z);\r\n    //     if(distance<minDistance){\r\n    //         return 11;\r\n    //     }\r\n    //     // 限制最大距离为10\r\n    //     const normalizedDistance = Math.min(distance, maxDistance);\r\n\r\n    //     // 高度计算：距离0时最高，距离10时最低(3)\r\n    //     // 你可以调整这个公式来改变高度曲线\r\n    //     const height = 11 - (7 * (normalizedDistance - minDistance) / (maxDistance-minDistance));\r\n\r\n    //     return height;\r\n    // }\r\n\r\n    //2d 转3d坐标\r\n    private getPlugPos(pos: Vec2): Vec3 {\r\n        const camera: Camera = DataManager.Instance.mainCamera.camera;\r\n        const ray: geometry.Ray = camera.screenPointToRay(pos.x, pos.y);\r\n        const lastPos = DataManager.Instance.nowPlug.worldPosition.clone();\r\n\r\n        // 计算射线上距离lastPos最近的点\r\n        const closestPoint = this.getClosestPointOnRay(ray, lastPos);\r\n\r\n        // 应用高度计算\r\n        closestPoint.y = this.calculateHeight(closestPoint.x, closestPoint.z);\r\n\r\n        console.log(\"closestPoint == \", new Vec3(\r\n            (closestPoint.x - lastPos.x) * 0.3,\r\n            (closestPoint.y - lastPos.y) * 0.3,\r\n            (closestPoint.z - lastPos.z) * 0.3\r\n        ))\r\n\r\n        // 添加平滑过渡 (可选)\r\n        return new Vec3(\r\n            lastPos.x + (closestPoint.x - lastPos.x) * 0.5,\r\n            lastPos.y + (closestPoint.y - lastPos.y) * 0.5,\r\n            lastPos.z + (closestPoint.z - lastPos.z) * 0.5\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 计算射线上距离目标点最近的点\r\n     */\r\n    private getClosestPointOnRay(ray: geometry.Ray, targetPoint: Vec3): Vec3 {\r\n        // 计算射线方向向量\r\n        const rayDirection = ray.d.normalize();\r\n\r\n        // 计算从射线起点到目标点的向量\r\n        const rayToPoint = Vec3.subtract(new Vec3(), targetPoint, ray.o);\r\n\r\n        // 计算投影长度\r\n        const projection = Vec3.dot(rayToPoint, rayDirection);\r\n\r\n        // 如果投影为负，说明最近点是射线起点\r\n        if (projection <= 0) {\r\n            return ray.o.clone();\r\n        }\r\n\r\n        // 返回射线上最近的点\r\n        return ray.o.add(rayDirection.multiplyScalar(projection));\r\n    }\r\n\r\n    /**\r\n     * 改进的高度计算函数\r\n     */\r\n    private calculateHeight(x: number, z: number): number {\r\n        const distance = Math.sqrt(x * x + z * z);\r\n        const normalizedDistance = Math.min(distance, 15);\r\n        //console.log(\"distance\",distance,\"normalizedDistance\",normalizedDistance);\r\n        // 使用平滑的曲线过渡\r\n        const height = 4 + (6 * (1 - normalizedDistance / 15) * (1 - normalizedDistance / 15));\r\n        return height;\r\n    }\r\n\r\n\r\n\r\n    //检查范围内插座、更新目标插头\r\n    private checkTargetSocket() {\r\n        //  let pos: Vec3 = DataManager.Instance.nowPlug.worldPosition.clone();\r\n        let pos: Vec3 = MathUtil.worldToLocal(DataManager.Instance.nowPlug.worldPosition.clone(), DataManager.Instance.sceneManger.node)//DataManager.Instance.nowSocket.worldPosition;\r\n\r\n        // pos.x -= 5;\r\n        // pos.z += 5;\r\n        let index: number = 0;\r\n        if (pos.x > Math.abs(pos.z)) {\r\n            index = 1;\r\n        } else if (pos.z > Math.abs(pos.x)) {\r\n            index = 2;\r\n        } else if (-pos.x > Math.abs(pos.z)) {\r\n            index = 3;\r\n        }\r\n        DataManager.Instance.nowSocket = DataManager.Instance.socketNodes[index];\r\n        this._nowSocketIndex = index;\r\n        //console.log(\"find socket\",DataManager.Instance.nowSocket.worldPosition);\r\n    }\r\n\r\n    /**\r\n     * 将屏幕滑动方向转换为世界空间方向\r\n     */\r\n    private screenToWorldDirection(screenDelta: Vec2, cameraNode: Node): Vec3 {\r\n        // 获取摄像机变换方向\r\n\r\n        // 屏幕右方向对应世界空间的摄像机右方向\r\n        const cameraRight = new Vec3();\r\n        Vec3.transformQuat(cameraRight, Vec3.RIGHT, cameraNode.worldRotation);\r\n        cameraRight.y = 0;\r\n        cameraRight.normalize();\r\n\r\n        // 屏幕上方向对应世界空间的摄像机前方向(去掉Y分量)\r\n        const cameraForward = new Vec3();\r\n        Vec3.transformQuat(cameraForward, Vec3.FORWARD, cameraNode.worldRotation);\r\n        cameraForward.y = 0;\r\n        cameraForward.normalize();\r\n\r\n        // 组合世界空间移动方向\r\n        const worldDir = new Vec3();\r\n        Vec3.scaleAndAdd(worldDir, worldDir, cameraRight, screenDelta.x);\r\n        Vec3.scaleAndAdd(worldDir, worldDir, cameraForward, -screenDelta.y); // 屏幕Y轴与世界Z轴相反\r\n\r\n        return worldDir;\r\n    }\r\n\r\n    private onPlugStateUpdate(state: number) {\r\n        if (state === 2 && this._pluglinking) {\r\n            this.cleanNowPlug();\r\n            this._pluglinking = false;\r\n        }\r\n    }\r\n\r\n    private onTowerUpgradeBtnShow() {\r\n        this._checkTowerBtn = true;\r\n    }\r\n\r\n    private checkTowerBtnClick(event: EventTouch) {\r\n        let cameraMain: Camera = DataManager.Instance.mainCamera.camera;\r\n        let ray: geometry.Ray = new geometry.Ray();\r\n        const touchPos = event.getLocation();\r\n        console.log(\"touchPos:\", touchPos);\r\n        cameraMain.screenPointToRay(touchPos.x, touchPos.y, ray);\r\n        // 以下参数可选\r\n        const mask = 1 << 2;\r\n        const maxDistance = 10000000;\r\n        const queryTrigger = true;\r\n\r\n        if (PhysicsSystem.instance.raycastClosest(ray, mask, maxDistance, queryTrigger)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n"]}