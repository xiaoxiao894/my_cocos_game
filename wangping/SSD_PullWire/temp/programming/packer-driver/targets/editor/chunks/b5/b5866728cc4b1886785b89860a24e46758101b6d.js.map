{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/Repo/CompleteRopeItem.ts"],"names":["_decorator","Component","instantiate","Node","Quat","RopeGeneratorNew","RopeBatch","ccclass","property","CompleteRopeItem","_state","_index","_ropeLen","_rope","headNode","endNode","_reopIndex","_timeAccumulator","_yOffset","_yDirection","state","value","startMove","unschedule","batchStaticModel","node","getComponent","unbatchStaticModel","stopMove","scheduleOnce","init","index","startNode","effectNode","active","creatRope","ropeNode","parent","ropeParent","createRope","update","deltaTime","children","length","newPos","Math","floor","worldPosition","clone","y","x","rotation","fromEuler","setWorldRotation","setWorldPosition","shackRope"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Material, MeshRenderer, Node, Quat, Vec3 } from 'cc';\r\nimport { RopeGeneratorNew } from './RopeGeneratorNew';\r\nimport { RopeBatch } from './RopeBatch';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CompleteRopeItem')\r\nexport class CompleteRopeItem extends Component {\r\n\r\n    @property(Node)\r\n    ropeNode: Node = null;\r\n\r\n    @property(Node)\r\n    private effectNode: Node = null;\r\n\r\n    @property(Node)\r\n    ropeParent: Node = null;\r\n\r\n    /** 状态 0未连接 1连接中 2已连接 */\r\n    private _state: number = 0;\r\n\r\n    private _index: number = 0;\r\n\r\n    private _ropeLen: number = 120;\r\n\r\n    private _rope: RopeGeneratorNew = null;\r\n\r\n    private headNode: Node = null;\r\n    private endNode: Node = null;\r\n\r\n\r\n    public set state(value: number) {\r\n        this._state = value;\r\n        if (this._state === 1) {\r\n            this._rope.startMove();\r\n            //取消合批\r\n            this.unschedule(this.batchStaticModel);\r\n            this.node.getComponent(RopeBatch).unbatchStaticModel();\r\n        } else {\r\n            if (this._state === 2) {\r\n                this._rope.stopMove();\r\n            } else {\r\n                this._rope.stopMove();\r\n            }\r\n            //合批\r\n            this.scheduleOnce(this.batchStaticModel, 6);\r\n        }\r\n    }\r\n\r\n    public get state() {\r\n        return this._state;\r\n    }\r\n\r\n    public init(index: number, startNode: Node, endNode: Node) {\r\n        this._index = index;\r\n        this._state = 0;\r\n        this.headNode = startNode;\r\n        this.endNode = endNode;\r\n        this.effectNode.active = false;\r\n        this.creatRope();\r\n\r\n    }\r\n\r\n    private creatRope(): void {\r\n\r\n        let ropeNode = instantiate(this.ropeNode);\r\n        ropeNode.active = true;\r\n        ropeNode.parent = this.ropeParent;\r\n        ropeNode.getComponent(RopeGeneratorNew).createRope(this._ropeLen, this.headNode, this.endNode);\r\n        this._rope = ropeNode.getComponent(RopeGeneratorNew);\r\n\r\n        //8秒后合批\r\n        this.scheduleOnce(this.batchStaticModel, 8);\r\n    }\r\n\r\n    private _reopIndex: number = 0;\r\n    private _timeAccumulator: number = 0;\r\n    private _yOffset: number = -2;\r\n    private _yDirection: number = 1; // 1表示递增，-1表示递减\r\n    update(deltaTime: number) {\r\n        if (this._state === 2) {\r\n            if (this._reopIndex < 0) {\r\n                this._reopIndex = this.ropeParent.children.length - 1;\r\n            }\r\n            let newPos: Vec3 = this.ropeParent.children[Math.floor(this._reopIndex)].worldPosition.clone();\r\n             newPos.y += 2;\r\n             newPos.x -= -0.3;\r\n             \r\n            // // 累积时间\r\n            // this._timeAccumulator += deltaTime;\r\n            // if (this._timeAccumulator >= 0.01) {\r\n            //     // 每0.01秒更新y偏移，范围-2到2循环\r\n            //     this._yOffset += this._yDirection * 0.1; // 每次变化0.1，可调节速度\r\n                \r\n            //     if (this._yOffset >= 2) {\r\n            //         this._yOffset = 2;\r\n            //         this._yDirection = -1;\r\n            //     } else if (this._yOffset <= -0.5) {\r\n            //         this._yOffset = -0.5;\r\n            //         this._yDirection = 1;\r\n            //     }\r\n            //     this._timeAccumulator = 0;\r\n            // }\r\n            // newPos.x += this._yOffset;\r\n            // newPos.y += this._yOffset;\r\n            if (!this.effectNode.active) {\r\n                this.effectNode.active = true;\r\n            }\r\n             const rotation = Quat.fromEuler(new Quat(), 0, -90, 0);\r\n             this.effectNode.setWorldRotation(rotation);\r\n            this.effectNode.setWorldPosition(newPos);\r\n\r\n            // 每帧减少一个索引，使用累积速度实现加速\r\n            this._reopIndex -= deltaTime * 60 * 2.8; // 5为加速倍数，60为假设帧率，调节加速速度\r\n            if (this._reopIndex < 0) {\r\n                this._reopIndex += this.ropeParent.children.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    public shackRope() {\r\n        this._rope.shackRope();\r\n    }\r\n\r\n    public batchStaticModel() {\r\n        this.node.getComponent(RopeBatch).batchStaticModel();\r\n    }\r\n    public unbatchStaticModel() {\r\n        this.unschedule(this.batchStaticModel);\r\n        this.node.getComponent(RopeBatch).unbatchStaticModel();\r\n        this._rope.startMove();\r\n    }\r\n}\r\n\r\n\r\n"]}