{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/Repo/TowerComponent.ts"],"names":["_decorator","Component","Label","Node","Sprite","tween","Vec3","Animation","EventManager","EventName","DataManager","ccclass","property","TowerComponent","animationTime","upgradeAnimationType","upgradeTween","_rotationProgress","_rotateSpeed","_nowNum","_updateNum","_delayTime","_timeCount","isOkUp","addTime","onEnable","inst","on","GiveTowerCoin","onGiveTowerCoin","TowerUpgradeButtonShow","showProgress","coinNumUpLimit","coinNumUpLimitCallBack","hand_sprite","active","getComponent","play","Instance","stop","upgradeNode","to","eulerAngles","easing","union","repeatForever","start","onDisable","off","scale","updateProgress","coinEndNode","coinFlyEndNode","update","deltaTime","coinNum","Number","progressLabel","string","upgradeCoinNum","towerCoinNum","scheduleOnce","isGameOver","emit","GameOver","upGradeBtn","upgradeEffect","progressLabelaMax","String","need","progressBar","fillRange","setScale","delay","mapAnimation","endNode1","ropeMovePoint","once","EventType","FINISHED","mapParticleAnimation","node"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Node, Sprite, tween, Vec3, Animation, Tween, Quat } from 'cc';\r\nimport { EventManager } from '../Global/EventManager';\r\nimport { EventName } from '../Common/Enum';\r\nimport { DataManager } from '../Global/DataManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TowerComponent')\r\nexport class TowerComponent extends Component {\r\n\r\n    @property(Node)\r\n    upGradeBtn: Node = null;\r\n    @property(Sprite)\r\n    progressBar: Sprite = null;\r\n    @property(Label)\r\n    progressLabel: Label = null;\r\n\r\n    @property(Label)\r\n    progressLabelaMax: Label = null;\r\n\r\n    @property(Node)\r\n    coinFlyEndNode: Node = null;\r\n\r\n    @property(Node)\r\n    upgradeEffectNode: Node = null; //塔升级效果\r\n\r\n    @property(Animation)\r\n    EffectNode: Animation = null; //未升级效果\r\n\r\n    @property(Animation)\r\n    mapAnimation: Animation = null; //升级动画\r\n\r\n    @property(Animation)\r\n    mapParticleAnimation: Animation = null; //升级动画\r\n\r\n    @property(Node)\r\n    hand_sprite: Node = null;\r\n\r\n    @property(Node)\r\n    endNode: Node = null;\r\n\r\n    @property(Node)\r\n    endNode1: Node = null;\r\n\r\n    @property(Node)\r\n    upgradeNode: Node = null;\r\n\r\n    @property(Node)\r\n    ropeParent: Node = null;\r\n\r\n    private animationTime:number = 0.5\r\n\r\n    private upgradeAnimationType = 1; // 1 缩放 2 左右旋转抖动 3 \r\n\r\n    private upgradeTween: Tween<Node> = null;\r\n\r\n    private _rotationProgress: number = 0;\r\n    private _rotateSpeed: number = 90; // 每秒旋转角度\r\n\r\n\r\n\r\n    private _nowNum: number = 0;\r\n    private _updateNum: boolean = false;\r\n    private _delayTime: number = 0.5;\r\n    private _timeCount: number = 0;\r\n\r\n    private isOkUp = false;\r\n\r\n    protected onEnable(): void {\r\n        EventManager.inst.on(EventName.GiveTowerCoin, this.onGiveTowerCoin, this);\r\n        EventManager.inst.on(EventName.TowerUpgradeButtonShow, this.showProgress, this);\r\n        EventManager.inst.on(EventName.coinNumUpLimit, this.coinNumUpLimitCallBack, this);\r\n    }\r\n    coinNumUpLimitCallBack() {\r\n        if(this.isOkUp)return\r\n        this.isOkUp = true;\r\n        this.hand_sprite.active = true;\r\n        this.hand_sprite.getComponent(Animation).play();\r\n       // this.upgradeAnimationType = 2;\r\n       DataManager.Instance.upgradeAnimationType = 2\r\n       \r\n        if (DataManager.Instance.upgradeTween) {\r\n            DataManager.Instance.upgradeTween.stop();  // 停止动画\r\n            DataManager.Instance.upgradeTween = null;  // 释放引用，方便GC回收\r\n        }\r\n        // this.scheduleOnce(() => {\r\n\r\n        // }, 0.2)\r\n\r\n        // tween(this.hand_sprite)\r\n        //     .repeatForever(\r\n        //         tween()\r\n        //             .to(0.3, { position: new Vec3(-1.953, 21.117, 4.964) })  // 修改 pos 为 position\r\n        //             .to(0.3, { position: new Vec3(-1.953, 21.117, 3.964) })  // 修改 pos 为 position\r\n        //             .to(0.3, { scale: new Vec3(0.01, 0.01, 0.01) })\r\n        //             .to(0.3, { scale: new Vec3(0.012, 0.012, 0.012) })\r\n\r\n        //     )\r\n        //     .start();\r\n        if (DataManager.Instance.upgradeAnimationType == 2) {\r\n            DataManager.Instance.upgradeTween = tween(this.upgradeNode)\r\n                .to(0.25, { eulerAngles: new Vec3(0, 15, 0) }, { easing: \"linear\" })  // 绕Y轴向右旋转15度\r\n                .to(0.5, { eulerAngles: new Vec3(0, -15, 0) }, { easing: \"linear\" })  // 绕Y轴向左旋转15度\r\n                .to(0.25, { eulerAngles: new Vec3(0, 0, 0) }, { easing: \"linear\" })  // 回到初始角度\r\n                .union()\r\n                .repeatForever()\r\n                .start();\r\n        }\r\n\r\n        // let rotateAxis: Vec3 = new Vec3(0, 1, 0); // 默认绕Y轴旋转\r\n        // let _rotationProgress: number = 0; // 当前旋转角度（度）\r\n        // // 创建旋转四元数\r\n        // const rotationQuat = new Quat();\r\n\r\n        // Quat.fromEuler(rotationQuat,\r\n        //     rotateAxis.x * _rotationProgress,\r\n        //     rotateAxis.y * _rotationProgress,\r\n        //     rotateAxis.z * _rotationProgress\r\n        // );\r\n\r\n        // // 应用旋转\r\n        // this.node.setRotation(rotationQuat);\r\n    }\r\n    protected onDisable(): void {\r\n        EventManager.inst.on(EventName.GiveTowerCoin, this.onGiveTowerCoin, this);\r\n        EventManager.inst.off(EventName.TowerUpgradeButtonShow, this.showProgress, this);\r\n    }\r\n\r\n    start() {\r\n        DataManager.Instance.upgradeNode = this.upgradeNode\r\n        this.hand_sprite.active = false;\r\n        if (DataManager.Instance.upgradeAnimationType == 1) {\r\n            DataManager.Instance.upgradeTween = tween(this.upgradeNode)\r\n                .to(this.animationTime, { scale: new Vec3(1.1, 1.1, 1.1) }, { easing: \"quadOut\" })\r\n                .to(this.animationTime, { scale: new Vec3(1, 1, 1) }, { easing: \"quadIn\" })\r\n                .union()\r\n                .repeatForever()\r\n                .start()\r\n\r\n        }\r\n\r\n        this.updateProgress();\r\n        //this.upGradeBtn.active = false;\r\n        DataManager.Instance.coinEndNode = this.coinFlyEndNode;\r\n    }\r\n\r\n    private addTime: number = 0;\r\n    update(deltaTime: number) {\r\n        // if (this.upgradeAnimationType == 2) {\r\n        //     // 累加旋转角度\r\n        //     this._rotationProgress += this._rotateSpeed * deltaTime;\r\n        //     if (this._rotationProgress >= 360) {\r\n        //         this._rotationProgress -= 360;\r\n        //     }\r\n\r\n        //     let rotateAxis: Vec3 = new Vec3(1, 0, 1); // 默认绕Y轴旋转\r\n        //     const rotationQuat = new Quat();\r\n\r\n        //     Quat.fromEuler(rotationQuat,\r\n        //         rotateAxis.x * this._rotationProgress,\r\n        //         rotateAxis.y * this._rotationProgress,\r\n        //         rotateAxis.z * this._rotationProgress\r\n        //     );\r\n\r\n        //     // 应用旋转\r\n        //     this.upgradeNode.setRotation(rotationQuat);\r\n        // }\r\n        if(DataManager.Instance.coinNum + Number(this.progressLabel.string) >= DataManager.Instance.upgradeCoinNum){\r\n            this.coinNumUpLimitCallBack()\r\n        }\r\n\r\n        if (this._updateNum) {\r\n            // this.addTime += deltaTime;\r\n            //if (this.addTime >= 0.02) {\r\n            this.addTime = 0;\r\n            if (this._nowNum < DataManager.Instance.towerCoinNum) {\r\n                this._nowNum += 10;\r\n                this.updateProgress();\r\n               \r\n            } else {\r\n                this._updateNum = false;\r\n          \r\n                if (this._nowNum >= DataManager.Instance.upgradeCoinNum) {\r\n                    //游戏结束\r\n                    this.scheduleOnce(() => {\r\n                        DataManager.Instance.isGameOver = true;\r\n                        EventManager.inst.emit(EventName.GameOver);\r\n                        this.upGradeBtn.active = false;\r\n                        this.upgradeEffect();\r\n                    }, 0.5)\r\n\r\n                }\r\n            }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    private updateProgress() {\r\n\r\n        this.progressLabelaMax.string = \"/ \" + DataManager.Instance.upgradeCoinNum;\r\n        this.progressLabel.string = String(DataManager.Instance.towerCoinNum);\r\n        let need: number = DataManager.Instance.upgradeCoinNum;\r\n        // if(need - this._nowNum < 0){\r\n        //     this._nowNum = need; \r\n        // }\r\n        // this.progressLabel.string = String(need - this._nowNum);\r\n        this.progressBar.fillRange = this._nowNum / need;\r\n\r\n\r\n    }\r\n\r\n    private onGiveTowerCoin(): void {\r\n        this._updateNum = true;\r\n        this._timeCount = 0;\r\n    }\r\n\r\n    private showProgress(): void {\r\n        if (!this.upGradeBtn.active) {\r\n            // this.upGradeBtn.active = true;\r\n            this.upGradeBtn.setScale(0, 0, 0);\r\n            tween(this.upGradeBtn)\r\n                .delay(5)\r\n                .to(0.1, { scale: new Vec3(1.1, 1.1, 1.1) }, { easing: 'quadOut' })\r\n                .to(0.05, { scale: new Vec3(1, 1, 1) }, { easing: 'quadIn' })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    private upgradeEffect(): void {\r\n\r\n        this.hand_sprite.active = false;\r\n        this.scheduleOnce(() => {\r\n            if (this.upgradeTween) {\r\n                this.upgradeTween.stop();  // 停止动画\r\n                this.upgradeTween = null;  // 释放引用，方便GC回收\r\n            }\r\n            this.mapAnimation.play();\r\n            // let nodes: Node[] = [];\r\n            // console.log(\"DataManager.Instance.leftSocket.length == \" + DataManager.Instance.leftSocket.length);\r\n            // for (let i = 0; i < DataManager.Instance.leftSocket.length; i++) {\r\n\r\n            //     console.log(\"i == \" + i);\r\n\r\n            //     console.log(\"ChaTou == \" + DataManager.Instance.leftSocket[i] );\r\n            //     let str = \"ChaTou\" + (DataManager.Instance.leftSocket[i]) ;\r\n            //      console.log(str );\r\n            //     nodes[i] = this.endNode.getChildByName(str);\r\n            //     console.log(nodes)\r\n            //     nodes[i].active = false;\r\n            // }\r\n\r\n            // this.endNode.active = false;\r\n            this.endNode1.active = true;\r\n            this.scheduleOnce(() => {\r\n                EventManager.inst.emit(EventName.ropeMovePoint);\r\n            }, 0.8)\r\n            this.mapAnimation.once(Animation.EventType.FINISHED, () => {\r\n                // for (let i = 0; i < nodes.length; i++) {\r\n                //     // nodes[i] = this.endNode.getChildByName(\"ChaTou\"+DataManager.Instance.leftSocket[i]+1);\r\n                //     nodes[i].active = true;\r\n                // }\r\n                // EventManager.inst.emit(EventName.ropeMovePoint);\r\n                // this.ropeParent.setPosition(this.ropeParent.position.add(new Vec3(0,1,0)));\r\n                // for(let i = 0; i < this.startNodes.length;i++){\r\n                //     this.startNodes[i].active = true;\r\n                // }\r\n                //this.endNode1.active = false;\r\n            }, this);\r\n            //欠塔升级的动画\r\n            this.upGradeBtn.active = false;\r\n\r\n            //升级的动画\r\n            this.scheduleOnce(() => {\r\n                this.mapParticleAnimation.node.active = true;\r\n                this.mapParticleAnimation.play();\r\n                this.mapParticleAnimation.once(Animation.EventType.FINISHED, () => {\r\n                    this.mapParticleAnimation.node.active = false;\r\n                }, this);\r\n            }, 0.6)\r\n\r\n        }, 0.5)\r\n\r\n        // this.scheduleOnce(() => {\r\n        //     this.mapParticleAnimation.node.active = true;\r\n        //     this.mapParticleAnimation.play();\r\n        //     this.mapParticleAnimation.once(Animation.EventType.FINISHED, () => {\r\n        //         this.mapParticleAnimation.node.active = false;\r\n        //     }, this);\r\n        //     this.mapAnimation.play();\r\n        //     //欠塔升级的动画\r\n        //     this.upGradeBtn.active = false;\r\n        //     //升级的动画\r\n        //     //this.scheduleOnce(() => {\r\n        //     this.EffectNode.node.active = false;\r\n        //     this.upgradeEffectNode.active = true;\r\n        //     this.upgradeEffectNode.getComponent(Animation).play();\r\n        //     //}, 1);\r\n        // }, 0.5)\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}