{"version":3,"sources":["file:///D:/Cocos/PlayAble/SSD_PullWire/assets/JavaScript/core/MapBeast/TopShakeEffect.ts"],"names":["_decorator","Component","tween","Vec3","easing","UITransform","Vec2","Material","MeshRenderer","ccclass","property","TopShakeEffect","tooltip","meshRender","_originalRotation","_isShaking","_shakeCompleteCallback","onLoad","set","node","eulerAngles","getComponent","anchorPoint","pivotPoint","start","autoStart","shake","autoShakeCount","count","isMaterial","callback","children","redMaterial","setMaterial","stopShake","targetRot1","targetRot2","shakeAxis","x","angleAmplitude","y","z","singleShake","to","duration","sineOut","sineIn","union","repeatForever","call","repeat","baseMaterial","stop","isShaking"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, tween, Vec3, easing, UITransform, Vec2, Material, MeshRenderer } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TopShakeEffect')\r\nexport class TopShakeEffect extends Component {\r\n    @property(Material)\r\n    public baseMaterial:Material = null;\r\n    @property(Material)\r\n    public redMaterial:Material = null;\r\n\r\n    meshRender:MeshRenderer = null;\r\n    // 晃动幅度（角度）\r\n    @property({ tooltip: '晃动角度幅度' })\r\n    public angleAmplitude: number = 8;\r\n\r\n    @property({ tooltip: '单次晃动周期（秒）' })\r\n    public duration: number = 0.2;\r\n\r\n    @property({ tooltip: '是否自动开始晃动' })\r\n    public autoStart: boolean = true;\r\n\r\n    @property({ tooltip: '自动启动时的晃动次数，0表示无限循环' })\r\n    public autoShakeCount: number = 0;\r\n\r\n    @property({ tooltip: '晃动轴（通常是X或Z）' })\r\n    public shakeAxis: 'X' | 'Y' | 'Z' = 'Z';\r\n\r\n    // 晃动中心点（0表示底部，1表示顶部）\r\n    @property({ tooltip: '晃动中心点（0-1）' })\r\n    public pivotPoint: number = 0.0;\r\n\r\n    // 初始旋转\r\n    private _originalRotation: Vec3 = new Vec3();\r\n    // 当前是否正在晃动\r\n    private _isShaking: boolean = false;\r\n    // 晃动完成回调\r\n    private _shakeCompleteCallback: Function = null;\r\n\r\n    onLoad() {\r\n        // 记录初始旋转\r\n        this._originalRotation.set(this.node.eulerAngles);\r\n        \r\n        // 设置锚点以控制旋转中心\r\n        if (this.node.getComponent(UITransform)) {\r\n            this.node.getComponent(UITransform).anchorPoint = new Vec2(0.5, this.pivotPoint);\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if (this.autoStart) {\r\n            this.shake(this.autoShakeCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始晃动\r\n     * @param count 晃动次数，0表示无限循环\r\n     * @param callback 晃动完成回调\r\n     */\r\n    public shake(count: number = 0, isMaterial?:Boolean,callback?: Function) {\r\n       this.meshRender =  this.node.children[0].getComponent(MeshRenderer)\r\n       if (this.redMaterial){\r\n             this.meshRender.setMaterial(this.redMaterial,0);\r\n       }\r\n      \r\n        // 如果正在晃动，先停止\r\n        if (this._isShaking) {\r\n            this.stopShake();\r\n        }\r\n        \r\n        this._isShaking = true;\r\n        this._shakeCompleteCallback = callback;\r\n        \r\n        // 创建一个左右晃动的补间动画\r\n        let targetRot1 = new Vec3();\r\n        let targetRot2 = new Vec3();\r\n        \r\n        // 根据选择的轴设置旋转角度\r\n        switch (this.shakeAxis) {\r\n            case 'X':\r\n                targetRot1.set(this._originalRotation.x + this.angleAmplitude, this._originalRotation.y, this._originalRotation.z);\r\n                targetRot2.set(this._originalRotation.x - this.angleAmplitude, this._originalRotation.y, this._originalRotation.z);\r\n                break;\r\n            case 'Y':\r\n                targetRot1.set(this._originalRotation.x, this._originalRotation.y + this.angleAmplitude, this._originalRotation.z);\r\n                targetRot2.set(this._originalRotation.x, this._originalRotation.y - this.angleAmplitude, this._originalRotation.z);\r\n                break;\r\n            case 'Z':\r\n            default:\r\n                targetRot1.set(this._originalRotation.x, this._originalRotation.y, this._originalRotation.z + this.angleAmplitude);\r\n                targetRot2.set(this._originalRotation.x, this._originalRotation.y, this._originalRotation.z - this.angleAmplitude);\r\n                break;\r\n        }\r\n\r\n        // 创建单次晃动的tween\r\n        const singleShake = tween(this.node)\r\n            .to(this.duration / 2, { eulerAngles: targetRot1 }, { easing: easing.sineOut })\r\n            .to(this.duration / 2, { eulerAngles: targetRot2 }, { easing: easing.sineIn })\r\n            .to(this.duration / 4, { eulerAngles: this._originalRotation }, { easing: easing.sineOut });\r\n        \r\n        // 根据次数决定是循环还是执行有限次\r\n        if (count <= 0) {\r\n            // 无限循环\r\n            singleShake.union().repeatForever().start();\r\n        } else {\r\n            // 有限次数\r\n            tween(this.node)\r\n                .call(() => {\r\n                    this._isShaking = true;\r\n                })\r\n                .repeat(count, singleShake)\r\n                .call(() => {\r\n                    this._isShaking = false;\r\n                    if(this.baseMaterial){\r\n                         this.meshRender.setMaterial(this.baseMaterial,0);\r\n                    }\r\n                    \r\n                    if (this._shakeCompleteCallback) {\r\n                        this._shakeCompleteCallback();\r\n                        this._shakeCompleteCallback = null;\r\n                    }\r\n                })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止晃动，回到初始位置\r\n     */\r\n    public stopShake() {\r\n        \r\n        tween(this.node).stop();\r\n        this.node.eulerAngles = this._originalRotation;\r\n        this._isShaking = false;\r\n        \r\n        if (this._shakeCompleteCallback) {\r\n            this._shakeCompleteCallback();\r\n            this._shakeCompleteCallback = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查是否正在晃动\r\n     */\r\n    public isShaking(): boolean {\r\n        return this._isShaking;\r\n    }\r\n}"]}