{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/core/ResourceManager.ts"],"names":["ResourceManager","resources","SpriteFrame","Prefab","AudioClip","Texture2D","constructor","_resourceCache","Map","_loadingTasks","instance","_instance","load","path","type","onProgress","cachedAsset","get","Promise","resolve","existingTask","loadPromise","reject","err","asset","delete","console","error","set","loadAudioDir","loadDir","loadSpriteFrame","loadPrefab","loadAudio","loadTexture","loadMultiple","paths","promises","map","all","release","log","releaseMultiple","forEach","releaseAll","_","clear","isLoaded","has","getLoadedAsset"],"mappings":"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","sourcesContent":["import { resources, Asset, AssetManager, SpriteFrame, Prefab, AudioClip, Texture2D } from 'cc';\r\n\r\n/**\r\n * 资源加载管理器\r\n * 提供资源的动态加载、缓存和释放功能\r\n */\r\nexport class ResourceManager {\r\n    private static _instance: ResourceManager = null;\r\n    private _resourceCache: Map<string, Asset> = new Map();\r\n    private _loadingTasks: Map<string, Promise<Asset>> = new Map();\r\n\r\n    /** 私有构造函数，确保单例 */\r\n    private constructor() { }\r\n\r\n    /** 获取单例实例 */\r\n    public static get instance(): ResourceManager {\r\n        if (!this._instance) {\r\n            this._instance = new ResourceManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 加载资源\r\n     * @param path 资源路径\r\n     * @param type 资源类型\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的资源Promise\r\n     */\r\n    public load<T extends Asset>(path: string, type: typeof Asset, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<T> {\r\n        // 检查缓存\r\n        const cachedAsset = this._resourceCache.get(path) as T;\r\n        if (cachedAsset) {\r\n            return Promise.resolve(cachedAsset);\r\n        }\r\n\r\n        // 检查是否已有加载任务\r\n        const existingTask = this._loadingTasks.get(path) as Promise<T>;\r\n        if (existingTask) {\r\n            return existingTask;\r\n        }\r\n\r\n        // 创建新的加载任务\r\n        const loadPromise = new Promise<T>((resolve, reject) => {\r\n            resources.load(path, type, onProgress, (err: Error, asset: T) => {\r\n                this._loadingTasks.delete(path);\r\n\r\n                if (err) {\r\n                    console.error(`资源加载失败: ${path}`, err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                // 缓存加载的资源\r\n                this._resourceCache.set(path, asset);\r\n                resolve(asset);\r\n            });\r\n        });\r\n\r\n        this._loadingTasks.set(path, loadPromise as Promise<Asset>);\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * 加载一个路径下所有音频资源\r\n     * @param path 资源路径\r\n     * @param type 资源类型\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的资源Promise\r\n     */\r\n    public loadAudioDir(path: string,  onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<AudioClip[]> {\r\n\r\n        // 创建新的加载任务\r\n        const loadPromise = new Promise<AudioClip[]>((resolve, reject) => {\r\n            resources.loadDir(path, AudioClip, onProgress, (err: Error, asset: AudioClip[]) => {\r\n                this._loadingTasks.delete(path);\r\n\r\n                if (err) {\r\n                    console.error(`资源加载失败: ${path}`, err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                resolve(asset);\r\n            });\r\n        });\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * 加载精灵帧\r\n     * @param path 精灵帧路径\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的精灵帧Promise\r\n     */\r\n    public loadSpriteFrame(path: string, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<SpriteFrame> {\r\n        return this.load<SpriteFrame>(path, SpriteFrame, onProgress);\r\n    }\r\n\r\n    /**\r\n     * 加载预制体\r\n     * @param path 预制体路径\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的预制体Promise\r\n     */\r\n    public async loadPrefab(path: string, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<Prefab> {\r\n        return await this.load<Prefab>(path, Prefab, onProgress);\r\n    }\r\n    //使用示例\r\n    // 加载场景时显示进度\r\n    // ResourceManager.instance.loadPrefab(\"scenes/MainScene\", (completed, total, item) => {\r\n    //     // 计算总体进度百分比\r\n    //     const progress = (completed / total) * 100;\r\n\r\n    //     // 更新UI（假设this.progressBar是你的进度条节点）\r\n    //     this.progressBar.progress = progress / 100;\r\n\r\n    //     // 显示当前加载的资源信息\r\n    //     this.statusLabel.string = `加载中: ${item.path} (${progress.toFixed(1)}%)`;\r\n    // })\r\n    // .then(prefab => {\r\n    //     // 加载完成后实例化场景\r\n    //     const sceneNode = instantiate(prefab);\r\n    //     director.getScene().addChild(sceneNode);\r\n    // })\r\n    // .catch(err => {\r\n    //     console.error(\"场景加载失败:\", err);\r\n    //     this.statusLabel.string = \"加载失败，请重试\";\r\n    // });\r\n\r\n    /**\r\n     * 加载音频\r\n     * @param path 音频路径\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的音频Promise\r\n     */\r\n    public loadAudio(path: string, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<AudioClip> {\r\n        return this.load<AudioClip>(path, AudioClip, onProgress);\r\n    }\r\n\r\n    /**\r\n     * 加载纹理\r\n     * @param path 纹理路径\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的纹理Promise\r\n     */\r\n    public loadTexture(path: string, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<Texture2D> {\r\n        return this.load<Texture2D>(path, Texture2D, onProgress);\r\n    }\r\n\r\n    /**\r\n     * 加载多个资源\r\n     * @param paths 资源路径数组\r\n     * @param type 资源类型\r\n     * @param onProgress 加载进度回调\r\n     * @returns 加载完成的资源数组Promise\r\n     */\r\n    public loadMultiple<T extends Asset>(paths: string[], type: typeof Asset, onProgress?: (completedCount: number, totalCount: number, item: AssetManager.RequestItem) => void): Promise<T[]> {\r\n        const promises = paths.map(path => this.load<T>(path, type, onProgress));\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     * @param path 资源路径\r\n     */\r\n    public release(path: string): void {\r\n        const asset = this._resourceCache.get(path);\r\n        if (asset) {\r\n            resources.release(path);\r\n            this._resourceCache.delete(path);\r\n            console.log(`资源已释放: ${path}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放多个资源\r\n     * @param paths 资源路径数组\r\n     */\r\n    public releaseMultiple(paths: string[]): void {\r\n        paths.forEach(path => this.release(path));\r\n    }\r\n\r\n    /**\r\n     * 释放所有缓存的资源\r\n     */\r\n    public releaseAll(): void {\r\n        this._resourceCache.forEach((_, path) => {\r\n            resources.release(path);\r\n        });\r\n        this._resourceCache.clear();\r\n        console.log('所有资源已释放');\r\n    }\r\n\r\n    /**\r\n     * 检查资源是否已加载\r\n     * @param path 资源路径\r\n     * @returns 如果资源已加载则返回true，否则返回false\r\n     */\r\n    public isLoaded(path: string): boolean {\r\n        return this._resourceCache.has(path);\r\n    }\r\n\r\n    /**\r\n     * 获取已加载的资源\r\n     * @param path 资源路径\r\n     * @returns 已加载的资源，如果未加载则返回undefined\r\n     */\r\n    public getLoadedAsset<T extends Asset>(path: string): T | undefined {\r\n        return this._resourceCache.get(path) as T;\r\n    }\r\n}    "]}