{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/Entitys/PlayerTrigger.ts"],"names":["_decorator","Collider","Component","Label","Sprite","Animation","Color","HandOver","App","GlobeVariable","SoundManager","ccclass","property","PlayerTrigger","player","handOver","spriteFrame","colliderNode","time","intervalTime","initTrigger","collider","node","getComponent","console","warn","on","onTriggerEnter","onTriggerStay","onTriggerExit","event","otherCollider","name","nodeName","playerController","getPlayer","coinNum","mapShowController","bubbleAniSpeed","callBack","log","handOverArea","indexOf","curCoin","cur","maxCoin","max","handVoer","backpack","children","length","lastItem","pos","worldPosition","clone","subtractCoin","setParent","sceneNode","effectParent","setWorldPosition","handOverLevelPos","allPos","getChildByName","showProgressLevel","showProgressBubbleLevel","removeFromParent","destroy","Instance","playAudio","coinItem","goldMineController","playerGetCoin","getGoldMineCoin","coin","passData","showCoin","remaining","Math","setBubbleLable","active","showUIBuiding","sp","lb","string","toString","fillRange","color","stop"],"mappings":"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","sourcesContent":["// import { _decorator, Collider, Component, ITriggerEvent, Label, native, Node, Sprite } from 'cc';\r\n// import { Player } from './Player';\r\n// import { HandOver } from './HandOver';\r\n// import { App } from '../App';\r\n// import { GlobeVariable } from '../core/GlobeVariable';\r\n// import { SoundManager } from '../core/SoundManager';\r\n// const { ccclass, property } = _decorator;\r\n\r\n// @ccclass('Trigger')\r\n// export class PlayerTrigger extends Component {\r\n\r\n//     private player = null;\r\n//     private handOver: HandOver = new HandOver();\r\n//     private isTrigger: boolean = false;\r\n//     private _isInGoldMineArea: boolean = false;\r\n//     private index: number = 0;\r\n\r\n//     private testGuidStep: number = 0;\r\n//     private testGuidStep1: number = 0;\r\n//     private isIndex6: boolean = false;\r\n//     private index3: boolean = false;\r\n//     private index4: boolean = false;\r\n//     initTrigger(player) {\r\n//         //this.triggerNode = node;\r\n//         this.player = player;\r\n\r\n//         const collider = this.player.node.getComponent(Collider);\r\n//         if (!collider) {\r\n//             console.warn('没有找到碰撞矩阵');\r\n//             return;\r\n//         }\r\n//         if (!collider) return;\r\n\r\n//         //   collider.isTrigger = true; // 只是触发事件 不触发物理效果\r\n//         // 注册触发器回调\r\n//         collider.on('onTriggerEnter', this.onTriggerEnter, this);\r\n//         collider.on('onTriggerStay', this.onTriggerStay, this);\r\n//         collider.on('onTriggerExit', this.onTriggerExit, this);\r\n//     }\r\n//     onTriggerEnter(event: ITriggerEvent) {\r\n//         if (event.otherCollider.node.name == \"DeliverWoodArea\") {\r\n//             //this.isTrigger = true;\r\n//         }\r\n//     }\r\n//     callBack() {\r\n//         console.log(\"回调函数\")\r\n//     }\r\n\r\n\r\n//     //事件监听触发\r\n//     onTriggerStay(event: ITriggerEvent) {\r\n//         const nodeName = event.otherCollider.node.name;\r\n\r\n\r\n//         if (GlobeVariable.handOverArea.indexOf(nodeName) != -1) {\r\n\r\n//             console.log(\"交付区域\")\r\n\r\n//             const tnode = event.otherCollider.node;\r\n//             let { curCoin: cur, maxCoin: max } = GlobeVariable.handVoer[event.otherCollider.node.name];\r\n\r\n//             // 检查交付条件\r\n//             if (this.player.backpack?.children.length && !this.isTrigger && cur < max) {\r\n//                  const lastItem = this.player.backpack.children[this.player.backpack.children.length - 1];\r\n//                 // // 通过 [] 访问对象属性\r\n//                  let handOverLevelPos = App.sceneNode.allPos.getChildByName(nodeName);\r\n\r\n//                 this.handOver.handOver(lastItem, handOverLevelPos, () => {\r\n\r\n//                     this.player.subtractCoin(1);\r\n//                     GlobeVariable.handVoer[event.otherCollider.node.name].curCoin++;\r\n//                    // this.showProgressLevel(tnode);\r\n//                     lastItem.removeFromParent();\r\n//                     lastItem.destroy();\r\n//                     this.isTrigger = false;\r\n\r\n//                 });\r\n\r\n//                 this.isTrigger = true;\r\n//                // SoundManager.inst.playAudio(\"YX_jiaofu\");\r\n//             }\r\n//         } else if (event.otherCollider.node.name == \"coinArea\") {\r\n//             let coinItem = App.goldMineController.playerGetCoin();\r\n//             if (coinItem) {\r\n//                 this.player.getGoldMineCoin(coinItem.coin, coinItem.pos);\r\n//             }\r\n//         }\r\n\r\n//         // // 简化碰撞检测与处理逻辑\r\n//         // if (event.otherCollider.node.name.match(/DeliverWoodArea-(10|[1-9])/)) {\r\n//         //     // 提取区域编号\r\n//         // //    GlobeVariable.handOverArea = true;\r\n//         //     console.log(\"交付区域\")\r\n\r\n//         //     let num = parseInt(event.otherCollider.node.name.match(/DeliverWoodArea-(\\d+)/)[1], 10);\r\n//         //     console.log(`DeliverWoodArea == ${num}`);\r\n//         //     GlobeVariable.g_curArea = num;\r\n//         //     const tnode = event.otherCollider.node;\r\n//         //     let { curCoin: cur, maxCoin: max } = GlobeVariable.handVoer[`pass_${GlobeVariable.g_curArea}`];\r\n\r\n//         //     // 检查交付条件\r\n//         //     if (this.player.backpack?.children.length && !this.isTrigger && cur < max) {\r\n//         //         const lastItem = this.player.backpack.children[this.player.backpack.children.length - 1];\r\n\r\n//         //         const propName = `handOverPosLevel_${num}`;\r\n//         //         // 通过 [] 访问对象属性\r\n//         //         let handOverLevelPos = App.sceneNode[propName];\r\n//         //         this.handOver.handOver(lastItem, handOverLevelPos, () => {\r\n\r\n//         //             this.player.subtractCoin(1);\r\n//         //             GlobeVariable.handVoer[`pass_${GlobeVariable.g_curArea}`].curCoin++;\r\n//         //             this.showProgressLevel(tnode);\r\n//         //             lastItem.removeFromParent();\r\n//         //             lastItem.destroy();\r\n//         //             this.isTrigger = false;\r\n\r\n//         //         });\r\n\r\n//         //         this.isTrigger = true;\r\n//         //         SoundManager.inst.playAudio(\"YX_jiaofu\");\r\n//         //     }\r\n//         // } else if (event.otherCollider.node.name == \"coinArea\") {\r\n//         //     let coinItem = App.goldMineController.playerGetCoin();\r\n//         //     if (coinItem) {\r\n//         //         this.player.getGoldMineCoin(coinItem.coin, coinItem.pos);\r\n//         //     }\r\n//         // }\r\n//     }\r\n\r\n//     showProgressLevel(node) {\r\n//         // 简化组件获取\r\n//         const sp = node.getChildByName(\"progress\").getComponent(Sprite);\r\n//         const lb = node.getChildByName(\"UnlockTileLabel\").getComponent(Label);\r\n\r\n//         // 缓存当前关卡数据\r\n//         const passData = GlobeVariable.handVoer[`pass_${GlobeVariable.g_curArea}`];\r\n//         let remaining = passData.maxCoin - passData.curCoin;\r\n\r\n//         // 处理边界值\r\n//         remaining = Math.max(0, remaining);\r\n//         lb.string = remaining.toString();\r\n\r\n//         // 隐藏节点并处理关卡切换\r\n//         if (remaining === 0) {\r\n//             node.active = false;\r\n//            // this.guidProcess();\r\n//            // App.mapShowController.showLevelPylon(GlobeVariable.g_curArea);\r\n//         }\r\n//         // 设置进度条\r\n//         sp.fillRange = passData.curCoin / passData.maxCoin;\r\n//     }\r\n\r\n\r\n\r\n\r\nimport { _decorator, Collider, Component, ITriggerEvent, Label, native, Node, Sprite, Animation, Color } from 'cc';\r\nimport { Player } from './Player';\r\nimport { HandOver } from './HandOver';\r\nimport { App } from '../App';\r\nimport { GlobeVariable } from '../core/GlobeVariable';\r\nimport { SoundManager } from '../core/SoundManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Trigger')\r\nexport class PlayerTrigger extends Component {\r\n\r\n    private player = null;\r\n    private handOver: HandOver = new HandOver();\r\n\r\n\r\n\r\n    private spriteFrame: Sprite = null;\r\n    private colliderNode: Node = null;\r\n\r\n    initTrigger(player) {\r\n        //this.triggerNode = node;\r\n        this.player = player;\r\n\r\n        const collider = this.player.node.getComponent(Collider);\r\n        if (!collider) {\r\n            console.warn('没有找到碰撞矩阵');\r\n            return;\r\n        }\r\n        if (!collider) return;\r\n\r\n        //   collider.isTrigger = true; // 只是触发事件 不触发物理效果\r\n        // 注册触发器回调\r\n        collider.on('onTriggerEnter', this.onTriggerEnter, this);\r\n        collider.on('onTriggerStay', this.onTriggerStay, this);\r\n        collider.on('onTriggerExit', this.onTriggerExit, this);\r\n    }\r\n    onTriggerEnter(event: ITriggerEvent) {\r\n        if (event.otherCollider.node.name == \"DeliverWoodArea\") {\r\n            //this.isTrigger = true;\r\n        }\r\n        const nodeName = event.otherCollider.node.name;\r\n        if (nodeName == \"UI_jiachong-001\") {\r\n            if (App.playerController.getPlayer().coinNum > 0) {\r\n                App.mapShowController.bubbleAniSpeed(2);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    callBack() {\r\n        console.log(\"回调函数\")\r\n    }\r\n\r\n    private time: number = 0;\r\n    private intervalTime: number = 0.1;\r\n\r\n    //  private curCoin: number = 0;\r\n    //事件监听触发\r\n    onTriggerStay(event: ITriggerEvent) {\r\n\r\n\r\n        const nodeName = event.otherCollider.node.name;\r\n\r\n\r\n        //         if (GlobeVariable.handOverArea.indexOf(nodeName) != -1) {\r\n\r\n        //             console.log(\"交付区域\")\r\n\r\n        //             const tnode = event.otherCollider.node;\r\n        //             let { curCoin: cur, maxCoin: max } = GlobeVariable.handVoer[event.otherCollider.node.name];\r\n\r\n        //             // 检查交付条件\r\n        //             if (this.player.backpack?.children.length && !this.isTrigger && cur < max) {\r\n        //                  const lastItem = this.player.backpack.children[this.player.backpack.children.length - 1];\r\n        //                 // // 通过 [] 访问对象属性\r\n        //                  let handOverLevelPos = App.sceneNode.allPos.getChildByName(nodeName);\r\n\r\n        //                 this.handOver.handOver(lastItem, handOverLevelPos, () => {\r\n\r\n        //                     this.player.subtractCoin(1);\r\n        //                     GlobeVariable.handVoer[event.otherCollider.node.name].curCoin++;\r\n        //                    // this.showProgressLevel(tnode);\r\n        //                     lastItem.removeFromParent();\r\n        //                     lastItem.destroy();\r\n        //                     this.isTrigger = false;\r\n\r\n        //                 });\r\n\r\n        //                 this.isTrigger = true;\r\n        //                // SoundManager.inst.playAudio(\"YX_jiaofu\");\r\n        //             }\r\n        //         } else if (event.otherCollider.node.name == \"coinArea\") {\r\n        //             let coinItem = App.goldMineController.playerGetCoin();\r\n        //             if (coinItem) {\r\n        //                 this.player.getGoldMineCoin(coinItem.coin, coinItem.pos);\r\n        //             }\r\n        //         }\r\n        // 简化碰撞检测与处理逻辑\r\n        if (GlobeVariable.handOverArea.indexOf(nodeName) != -1) {\r\n            // 提取区域编号\r\n\r\n            // this.spriteFrame = event.otherCollider.node.getChildByName(\"kuang-001\")?.getComponent(Sprite);\r\n\r\n            // this.spriteFrame.color = new Color(0, 255, 0); // 设置为白色\r\n\r\n            console.log(\"交付区域\")\r\n            this.colliderNode = event.otherCollider.node\r\n            let { curCoin: cur, maxCoin: max } = GlobeVariable.handVoer[event.otherCollider.node.name];\r\n            // 检查交付条件\r\n            if (nodeName == \"UI_jiachong-001\") {\r\n                if (App.playerController.getPlayer().coinNum <= 0) {\r\n                    App.mapShowController.bubbleAniSpeed(0.7);\r\n                }\r\n\r\n            }\r\n            if (this.player.backpack?.children.length && cur < max) {\r\n                this.time += 0.1;\r\n                if (this.time < this.intervalTime) {\r\n                    return;\r\n                }\r\n                this.time = 0;\r\n\r\n                const lastItem = this.player.backpack.children[this.player.backpack.children.length - 1];\r\n                let pos = lastItem.worldPosition.clone();\r\n                this.player.subtractCoin(1);\r\n                GlobeVariable.handVoer[event.otherCollider.node.name].curCoin++;\r\n\r\n                lastItem.setParent(App.sceneNode.effectParent);\r\n                lastItem.setWorldPosition(pos);\r\n\r\n                // 通过 [] 访问对象属性\r\n                let handOverLevelPos = App.sceneNode.allPos.getChildByName(nodeName + \"Pos\");\r\n\r\n                this.handOver.handOver(lastItem, handOverLevelPos, () => {\r\n                    if (nodeName != \"UI_jiachong-001\") {\r\n                        this.showProgressLevel(this.colliderNode);\r\n                    } else {\r\n                        this.showProgressBubbleLevel(this.colliderNode);\r\n                    }\r\n\r\n                    lastItem.removeFromParent();\r\n                    lastItem.destroy();\r\n                });\r\n                SoundManager.Instance.playAudio(\"jinbi_jiaofu\");\r\n            } else if (this.player.backpack?.children.length <= 0) {\r\n                //  this.colliderNode.getComponent(Animation)?.stop()\r\n            }\r\n        } else if (event.otherCollider.node.name == \"coinArea\") {\r\n            let coinItem = App.goldMineController.playerGetCoin();\r\n            if (coinItem) {\r\n                this.player.getGoldMineCoin(coinItem.coin, coinItem.pos);\r\n            }\r\n        }\r\n    }\r\n    showProgressBubbleLevel(node) {\r\n        // const sp = node.getChildByName(\"qipao-001\").getComponent(Sprite);\r\n        // const lb = node.getChildByName(\"UnlockTileLabel-001\").getComponent(Label);\r\n\r\n        // 缓存当前关卡数据\r\n        const passData = GlobeVariable.handVoer[node.name];\r\n        passData.showCoin++;\r\n        let remaining = passData.maxCoin - passData.showCoin;//passData.curCoin;\r\n\r\n\r\n        // 处理边界值\r\n        remaining = Math.max(0, remaining);\r\n        // lb.string = remaining.toString();\r\n        App.mapShowController.setBubbleLable();\r\n\r\n\r\n        // 隐藏节点并处理关卡切换\r\n        if (remaining === 0) {\r\n            node.active = false;\r\n            App.mapShowController.showUIBuiding(node.name);\r\n        }\r\n        // 设置进度条\r\n        // sp.fillRange = passData.showCoin / passData.maxCoin; \r\n    }\r\n    showProgressLevel(node) {\r\n        // this.curCoin++;\r\n        // 简化组件获取\r\n        const sp = node.getChildByName(\"progress\").getComponent(Sprite);\r\n        const lb = node.getChildByName(\"UnlockTileLabel\").getComponent(Label);\r\n\r\n        // 缓存当前关卡数据\r\n        const passData = GlobeVariable.handVoer[node.name];\r\n        passData.showCoin++;\r\n        let remaining = passData.maxCoin - passData.showCoin;//passData.curCoin;\r\n\r\n\r\n        // 处理边界值\r\n        remaining = Math.max(0, remaining);\r\n        lb.string = remaining.toString();\r\n\r\n        // 隐藏节点并处理关卡切换\r\n        if (remaining === 0) {\r\n            node.active = false;\r\n            App.mapShowController.showUIBuiding(node.name);\r\n        }\r\n        // 设置进度条\r\n        sp.fillRange = passData.showCoin / passData.maxCoin;\r\n\r\n    }\r\n\r\n\r\n    onTriggerExit(event: ITriggerEvent) {\r\n        console.log(\"onTriggerExit\")\r\n        App.mapShowController.bubbleAniSpeed(0.7);\r\n        //    this.curCoin = 0;\r\n        if (this.spriteFrame) {\r\n            this.spriteFrame.color = new Color(255, 255, 255); // 设置为白色\r\n        }\r\n        if (this.colliderNode) {\r\n            this.colliderNode.getComponent(Animation)?.stop()\r\n        }\r\n        //  GlobeVariable.handOverArea = false;\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}