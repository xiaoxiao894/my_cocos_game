{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/RVO/Simulator.ts"],"names":["Simulator","Agent","Obstacle","RVOMath","KdTree","agentId","agentIdLst","aid2agent","Object","create","obstacles","kdTree","defaultAgent","time","instance","_inst","getAgent","idx","getAgentByAid","aid","getGlobalTime","getNumAgents","length","getAgentAidByIdx","setAgentPrefVelocity","velocity","prefVelocity_","copy","getAgentPosition","position_","getAgentPrefVelocity","getAgentVelocity","velocity_","getAgentRadius","radius_","getAgentOrcaLines","orcaLines_","addAgent","position","radius","maxSpeed","mass","Error","agent","maxNeighbors_","maxSpeed_","neighborDist","timeHorizon","timeHorizonObst","id","push","removeAgent","hasAgent","indexOf","setAgentMass","agentNo","getAgentMass","setAgentRadius","setAgentDefaults","maxNeighbors","run","dt","buildAgentTree","agentNum","i","computeNeighbors","computeNewVelocity","update","addObstacle","vertices","obstacleNo","obstacle","point","previous","next","direction","normalize","minus","convex","leftOf","processObstacles","buildObstacleTree","queryVisibility","point1","point2","getObstacles","clear"],"mappings":"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","sourcesContent":["import { Vec2 } from \"cc\";\r\nimport { Agent } from \"./Agent\";\r\nimport { Obstacle, RVOMath, Vector2 } from \"./Common\";\r\nimport { KdTree } from \"./kdtree\";\r\n\r\nexport class Simulator {\r\n    private agentId: number = 0;\r\n    private agentIdLst: number[] = [];\r\n    aid2agent: { [key: string]: Agent } = Object.create(null);\r\n\r\n    obstacles: Obstacle[] = [];\r\n    kdTree: KdTree = new KdTree();\r\n\r\n\r\n    defaultAgent: Agent; // Agent\r\n    time: number = 0.0;\r\n\r\n    private static _inst: Simulator;\r\n    static get instance(): Simulator {\r\n        if (!Simulator._inst) {\r\n            Simulator._inst = new Simulator();\r\n        }\r\n        return Simulator._inst;\r\n    }\r\n\r\n    getAgent(idx: number) {\r\n        return this.aid2agent[this.agentIdLst[idx]];\r\n    }\r\n\r\n    getAgentByAid(aid: number) {\r\n        return this.aid2agent[aid];\r\n    }\r\n\r\n    getGlobalTime() {\r\n        return this.time;\r\n    };\r\n\r\n    getNumAgents() {\r\n        // console.log(\"getNumAgents ::\", this.agentIdLst.length, this.agentIdLst)\r\n        return this.agentIdLst.length;\r\n    };\r\n\r\n    getAgentAidByIdx(idx: number) {\r\n        return this.agentIdLst[idx]\r\n    }\r\n\r\n\r\n    setAgentPrefVelocity(aid: number, velocity: Vector2 | Vec2) {\r\n        this.aid2agent[aid].prefVelocity_.copy(velocity);\r\n    }\r\n\r\n    getAgentPosition(aid: number) {\r\n        if (this.aid2agent[aid]) {//为什么移除了 还会进入这个aid的检测\r\n            return this.aid2agent[aid].position_;\r\n        }\r\n        return null\r\n\r\n    }\r\n\r\n    getAgentPrefVelocity(aid: number) {\r\n        return this.aid2agent[aid].prefVelocity_;\r\n    }\r\n\r\n    getAgentVelocity(aid: number) {\r\n        return this.aid2agent[aid].velocity_;\r\n    }\r\n\r\n    getAgentRadius(aid: number) {\r\n        return this.aid2agent[aid].radius_;\r\n    }\r\n\r\n    getAgentOrcaLines(aid: number) {\r\n        return this.aid2agent[aid].orcaLines_;\r\n    }\r\n\r\n    /**\r\n     * 添加动态避障管理对象\r\n     * @param position 初始位置\r\n     * @param radius  检测半径\r\n     * @param maxSpeed  最大速度\r\n     * @param velocity 初始线速度(向量)\r\n     * @param mass 转向质量\r\n     * @returns \r\n     */\r\n    addAgent(position: Vector2 | Vec2, radius: number = null, maxSpeed: number = null, velocity: Vector2 = null, mass: number = null) {\r\n        if (!this.defaultAgent) {\r\n            throw new Error(\"no default agent\");\r\n        }\r\n\r\n        let agent = new Agent();\r\n\r\n        agent.position_.copy(position);\r\n        agent.maxNeighbors_ = this.defaultAgent.maxNeighbors_;\r\n        agent.maxSpeed_ = maxSpeed || this.defaultAgent.maxSpeed_;\r\n        agent.neighborDist = this.defaultAgent.neighborDist;\r\n        agent.radius_ = radius || this.defaultAgent.radius_;\r\n        agent.timeHorizon = this.defaultAgent.timeHorizon;\r\n        agent.timeHorizonObst = this.defaultAgent.timeHorizonObst;\r\n        agent.velocity_.copy(velocity || this.defaultAgent.velocity_);\r\n\r\n        agent.id = this.agentId++;\r\n\r\n        if (mass && mass >= 0) {\r\n            agent.mass = mass\r\n        }\r\n        this.aid2agent[agent.id] = agent;\r\n        this.agentIdLst.push(agent.id);\r\n\r\n        return agent.id;\r\n    }\r\n\r\n    removeAgent(aid: number) {\r\n        if (this.hasAgent(aid)) {\r\n\r\n            let idx = this.agentIdLst.indexOf(aid);\r\n            if (idx >= 0) {\r\n                // this.agentIdLst.splice(idx, 1) //用高效伪移除\r\n                this.agentIdLst[idx] = this.agentIdLst[this.agentIdLst.length - 1];\r\n                this.agentIdLst.length--;\r\n            }\r\n            delete this.aid2agent[aid];\r\n        }\r\n    }\r\n\r\n    hasAgent(aid: number) {\r\n        return !!this.aid2agent[aid];\r\n    }\r\n\r\n    setAgentMass(agentNo: number, mass: number) {\r\n        this.aid2agent[agentNo].mass = mass;\r\n    }\r\n\r\n    getAgentMass(agentNo: number) {\r\n        return this.aid2agent[agentNo].mass;\r\n    }\r\n\r\n    setAgentRadius(agentNo: number, radius: number) {\r\n        this.aid2agent[agentNo].radius_ = radius;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param neighborDist 在寻找周围邻居的搜索距离，这个值设置过大，会让小球在很远距离时做出避障行为\r\n     * @param maxNeighbors 寻找周围邻居的最大数目，这个值设置越大，最终计算的速度越精确，但会增大计算量\r\n     * @param timeHorizon 代表计算动态的物体时的时间窗口\r\n     * @param timeHorizonObst 代表计算静态的物体时的时间窗口，比如在RTS游戏中，小兵向城墙移动时，没必要做出避障，这个值需要 设置得很小\r\n     * @param radius 代表计算ORCA时的小球的半径，这个值不一定与小球实际显示的半径一样，偏小有利于小球移动顺畅\r\n     * @param maxSpeed 小球最大速度值\r\n     * @param velocity 小球初始速度\r\n     */\r\n    setAgentDefaults(neighborDist: number, maxNeighbors: number, timeHorizon: number, timeHorizonObst: number, radius: number, maxSpeed: number, velocity: Vector2) {\r\n        if (!this.defaultAgent) {\r\n            this.defaultAgent = new Agent();\r\n        }\r\n\r\n        this.defaultAgent.maxNeighbors_ = maxNeighbors;\r\n        this.defaultAgent.maxSpeed_ = maxSpeed;\r\n        this.defaultAgent.neighborDist = neighborDist;\r\n        this.defaultAgent.radius_ = radius;\r\n        this.defaultAgent.timeHorizon = timeHorizon;\r\n        this.defaultAgent.timeHorizonObst = timeHorizonObst;\r\n        this.defaultAgent.velocity_ = velocity;\r\n    }\r\n\r\n    run(dt: number) {\r\n        this.kdTree.buildAgentTree(this.getNumAgents());\r\n        let agentNum = this.agentIdLst.length;\r\n        for (let i = 0; i < agentNum; i++) {\r\n            this.aid2agent[this.agentIdLst[i]].computeNeighbors(this);\r\n            this.aid2agent[this.agentIdLst[i]].computeNewVelocity(dt);\r\n        }\r\n        for (let i = 0; i < agentNum; i++) {\r\n            this.aid2agent[this.agentIdLst[i]].update(dt);\r\n        }\r\n\r\n        this.time += dt;\r\n    }\r\n\r\n\r\n    addObstacle(vertices: Vector2[]) {\r\n        if (vertices.length < 2) {\r\n            return -1;\r\n        }\r\n\r\n        let obstacleNo = this.obstacles.length;\r\n\r\n        for (let i = 0; i < vertices.length; ++i) {\r\n            let obstacle = new Obstacle();\r\n            obstacle.point = vertices[i];\r\n            if (i != 0) {\r\n                obstacle.previous = this.obstacles[this.obstacles.length - 1];\r\n                obstacle.previous.next = obstacle;\r\n            }\r\n            if (i == vertices.length - 1) {\r\n                obstacle.next = this.obstacles[obstacleNo];\r\n                obstacle.next.previous = obstacle;\r\n            }\r\n            obstacle.direction = RVOMath.normalize(vertices[(i == vertices.length - 1 ? 0 : i + 1)].minus(vertices[i]));\r\n\r\n            if (vertices.length == 2) {\r\n                obstacle.convex = true;\r\n            }\r\n            else {\r\n                obstacle.convex = (RVOMath.leftOf(vertices[(i == 0 ? vertices.length - 1 : i - 1)], vertices[i], vertices[(i == vertices.length - 1 ? 0 : i + 1)]) >= 0);\r\n            }\r\n\r\n            obstacle.id = this.obstacles.length;\r\n\r\n            this.obstacles.push(obstacle);\r\n        }\r\n\r\n        return obstacleNo;\r\n    }\r\n\r\n    processObstacles() {\r\n        this.kdTree.buildObstacleTree();\r\n    };\r\n\r\n    queryVisibility(point1: Vector2, point2: Vector2, radius: number) {\r\n        return this.kdTree.queryVisibility(point1, point2, radius);\r\n    };\r\n\r\n    getObstacles() {\r\n        return this.obstacles;\r\n    }\r\n\r\n    clear() {\r\n        this.agentIdLst.length = 0;\r\n        this.agentId = 0;\r\n        this.aid2agent = Object.create(null);\r\n        this.defaultAgent = null;\r\n        this.kdTree = new KdTree();\r\n        this.obstacles.length = 0;\r\n    }\r\n}"]}