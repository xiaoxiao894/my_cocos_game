{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/core/NodePoolManager.ts"],"names":["_decorator","instantiate","NodePool","ccclass","property","NodePoolManager","poolMap","Map","Instance","_instance","initPool","prefab","poolSize","poolName","name","data","has","clearPool","nodePool","set","pool","expandPool","getNode","prefabOrName","poolInfo","get","console","warn","node","size","returnNode","destroy","put","error","i","clear","delete","clearAllPools","forEach","value","key","getPoolSize"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,W,OAAAA,W;AAAqBC,MAAAA,Q,OAAAA,Q;;;;;;;;;OACrD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;AAE9B;AACA;AACA;;iCAEaK,e,WADZF,OAAO,CAAC,iBAAD,C,2BAAR,MACaE,eADb,CAC6B;AAAA;AASzB;AATyB,eAUjBC,OAViB,GAapB,IAAIC,GAAJ,EAboB;AAAA;;AAEC,mBAARC,QAAQ,GAAoB;AAC1C,cAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,iBAAKA,SAAL,GAAiB,IAAIJ,eAAJ,EAAjB;AACH;;AACD,iBAAO,KAAKI,SAAZ;AACH;;AAQD;AACJ;AACA;AACA;AACA;AACA;AACWC,QAAAA,QAAQ,CAACC,MAAD,EAAiBC,QAAjB,EAAuCC,QAAvC,EAAgE;AAAA,cAA/CD,QAA+C;AAA/CA,YAAAA,QAA+C,GAA5B,CAA4B;AAAA;;AAC3E,cAAME,IAAI,GAAGD,QAAQ,IAAIF,MAAM,CAACI,IAAP,CAAYD,IAArC,CAD2E,CAG3E;;AACA,cAAI,KAAKR,OAAL,CAAaU,GAAb,CAAiBF,IAAjB,CAAJ,EAA4B;AACxB,iBAAKG,SAAL,CAAeH,IAAf;AACH,WAN0E,CAQ3E;;;AACA,cAAMI,QAAQ,GAAG,IAAIhB,QAAJ,EAAjB;AACA,eAAKI,OAAL,CAAaa,GAAb,CAAiBL,IAAjB,EAAuB;AAAEM,YAAAA,IAAI,EAAEF,QAAR;AAAkBP,YAAAA,MAAM,EAAEA;AAA1B,WAAvB,EAV2E,CAY3E;;AACA,eAAKU,UAAL,CAAgBP,IAAhB,EAAsBF,QAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWU,QAAAA,OAAO,CAACC,YAAD,EAA6C;AACvD,cAAIC,QAAQ,GAAG,IAAf;AACA,cAAIX,QAAQ,GAAG,EAAf,CAFuD,CAIvD;;AACA,cAAI,OAAOU,YAAP,KAAwB,QAA5B,EAAsC;AAClCV,YAAAA,QAAQ,GAAGU,YAAX;AACAC,YAAAA,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAX;AACH,WAHD,MAGO;AACHA,YAAAA,QAAQ,GAAGU,YAAY,CAACR,IAAb,CAAkBD,IAA7B;AACAU,YAAAA,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAX,CAFG,CAIH;;AACA,gBAAI,CAACW,QAAL,EAAe;AACX,mBAAKd,QAAL,CAAca,YAAd;AACAC,cAAAA,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAX;AACH;AACJ;;AAED,cAAI,CAACW,QAAL,EAAe;AACXE,YAAAA,OAAO,CAACC,IAAR,sDAAuCd,QAAvC;AACA,mBAAO,IAAP;AACH;;AAED,cAAIe,IAAU,GAAG,IAAjB;AACA,cAAM;AAAER,YAAAA,IAAF;AAAQT,YAAAA;AAAR,cAAmBa,QAAzB,CAzBuD,CA2BvD;;AACA,cAAIJ,IAAI,CAACS,IAAL,KAAc,CAAlB,EAAqB;AACjBD,YAAAA,IAAI,GAAGR,IAAI,CAACK,GAAL,EAAP;AACH,WAFD,MAEO;AACHG,YAAAA,IAAI,GAAG3B,WAAW,CAACU,MAAD,CAAlB;AACAiB,YAAAA,IAAI,CAACd,IAAL,GAAYH,MAAM,CAACI,IAAP,CAAYD,IAAxB;AACH;;AAED,iBAAOc,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWE,QAAAA,UAAU,CAACF,IAAD,EAAaf,QAAb,EAAsC;AACnD,cAAMC,IAAI,GAAGD,QAAQ,IAAIe,IAAI,CAACd,IAA9B;AACA,cAAMU,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBX,IAAjB,CAAjB;;AAEA,cAAI,CAACU,QAAL,EAAe;AACXE,YAAAA,OAAO,CAACC,IAAR,sDAAuCb,IAAvC,oDAAuDc,IAAI,CAACd,IAA5D;AACAc,YAAAA,IAAI,CAACG,OAAL;AACA;AACH,WARkD,CAUnD;;;AACA,cAAI;AACAP,YAAAA,QAAQ,CAACJ,IAAT,CAAcY,GAAd,CAAkBJ,IAAlB;AACH,WAFD,CAEE,OAAOK,KAAP,EAAc;AACZP,YAAAA,OAAO,CAACO,KAAR,gDAAuCL,IAAI,CAACd,IAA5C,sBAAuDA,IAAvD,2BAAoEmB,KAApE;AACAL,YAAAA,IAAI,CAACG,OAAL;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACWV,QAAAA,UAAU,CAACR,QAAD,EAAmBgB,IAAnB,EAAuC;AACpD,cAAML,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAjB;;AAEA,cAAI,CAACW,QAAL,EAAe;AACXE,YAAAA,OAAO,CAACC,IAAR,sDAAuCd,QAAvC;AACA;AACH;;AAED,cAAM;AAAEO,YAAAA,IAAF;AAAQT,YAAAA;AAAR,cAAmBa,QAAzB;;AACA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;AAC3B,gBAAMN,IAAI,GAAG3B,WAAW,CAACU,MAAD,CAAxB;AACAiB,YAAAA,IAAI,CAACd,IAAL,GAAYH,MAAM,CAACI,IAAP,CAAYD,IAAxB;AACAM,YAAAA,IAAI,CAACY,GAAL,CAASJ,IAAT;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACWX,QAAAA,SAAS,CAACJ,QAAD,EAAyB;AACrC,cAAMW,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAjB;;AAEA,cAAIW,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACJ,IAAT,CAAce,KAAd;AACA,iBAAK7B,OAAL,CAAa8B,MAAb,CAAoBvB,QAApB;AACH;AACJ;AAED;AACJ;AACA;;;AACWwB,QAAAA,aAAa,GAAS;AACzB,eAAK/B,OAAL,CAAagC,OAAb,CAAqB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjCD,YAAAA,KAAK,CAACnB,IAAN,CAAWe,KAAX;AACH,WAFD;AAGA,eAAK7B,OAAL,CAAa6B,KAAb;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWM,QAAAA,WAAW,CAAC5B,QAAD,EAA2B;AACzC,cAAMW,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,GAAb,CAAiBZ,QAAjB,CAAjB;AACA,iBAAOW,QAAQ,GAAGA,QAAQ,CAACJ,IAAT,CAAcS,IAAd,EAAH,GAA0B,CAAzC;AACH;;AA5JwB,O,UACVpB,S,GAA6B,I","sourcesContent":["import { _decorator, Component, Node, instantiate, Prefab, NodePool } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * 节点池管理类 - 用于管理游戏中的节点池\r\n */\r\n@ccclass('NodePoolManager')\r\nexport class NodePoolManager {\r\n    private static _instance: NodePoolManager = null;\r\n    public static get Instance(): NodePoolManager {\r\n        if (!this._instance) {\r\n            this._instance = new NodePoolManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    // 存储节点池的映射表，键为预制体路径或名称，值为节点池和预制体的信息\r\n    private poolMap: Map<string, {\r\n        pool: NodePool,\r\n        prefab: Prefab\r\n    }> = new Map();\r\n\r\n    /**\r\n     * 初始化节点池\r\n     * @param prefab 预制体\r\n     * @param poolSize 初始池大小\r\n     * @param poolName 池名称，可选，默认为预制体名称\r\n     */\r\n    public initPool(prefab: Prefab, poolSize: number = 5, poolName?: string): void {\r\n        const name = poolName || prefab.data.name;\r\n        \r\n        // 如果已存在该名称的节点池，则先清理\r\n        if (this.poolMap.has(name)) {\r\n            this.clearPool(name);\r\n        }\r\n\r\n        // 创建新的节点池\r\n        const nodePool = new NodePool();\r\n        this.poolMap.set(name, { pool: nodePool, prefab: prefab });\r\n\r\n        // 预创建指定数量的节点\r\n        this.expandPool(name, poolSize);\r\n    }\r\n\r\n    /**\r\n     * 从节点池获取节点\r\n     * @param prefabOrName 预制体或池名称\r\n     * @returns 节点实例，如果池为空则返回null\r\n     */\r\n    public getNode(prefabOrName: Prefab | string): Node | null {\r\n        let poolInfo = null;\r\n        let poolName = '';\r\n\r\n        // 根据传入参数类型确定池名称\r\n        if (typeof prefabOrName === 'string') {\r\n            poolName = prefabOrName;\r\n            poolInfo = this.poolMap.get(poolName);\r\n        } else {\r\n            poolName = prefabOrName.data.name;\r\n            poolInfo = this.poolMap.get(poolName);\r\n            \r\n            // 如果节点池不存在，则初始化一个\r\n            if (!poolInfo) {\r\n                this.initPool(prefabOrName);\r\n                poolInfo = this.poolMap.get(poolName);\r\n            }\r\n        }\r\n\r\n        if (!poolInfo) {\r\n            console.warn(`NodePoolManager: 未找到名为 ${poolName} 的节点池`);\r\n            return null;\r\n        }\r\n\r\n        let node: Node = null;\r\n        const { pool, prefab } = poolInfo;\r\n\r\n        // 从节点池获取节点，如果没有则创建新节点\r\n        if (pool.size() > 0) {\r\n            node = pool.get();\r\n        } else {\r\n            node = instantiate(prefab);\r\n            node.name = prefab.data.name;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 将节点返回到节点池\r\n     * @param node 要返回的节点\r\n     * @param poolName 池名称，可选，默认为节点名称\r\n     */\r\n    public returnNode(node: Node, poolName?: string): void {\r\n        const name = poolName || node.name;\r\n        const poolInfo = this.poolMap.get(name);\r\n\r\n        if (!poolInfo) {\r\n            console.warn(`NodePoolManager: 未找到名为 ${name} 的节点池，节点 ${node.name} 无法返回`);\r\n            node.destroy();\r\n            return;\r\n        }\r\n\r\n        // 将节点放回节点池\r\n        try {\r\n            poolInfo.pool.put(node);\r\n        } catch (error) {\r\n            console.error(`NodePoolManager: 返回节点 ${node.name} 到池 ${name} 时出错:`, error);\r\n            node.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 扩展节点池大小\r\n     * @param poolName 池名称\r\n     * @param size 要扩展的数量\r\n     */\r\n    public expandPool(poolName: string, size: number): void {\r\n        const poolInfo = this.poolMap.get(poolName);\r\n\r\n        if (!poolInfo) {\r\n            console.warn(`NodePoolManager: 未找到名为 ${poolName} 的节点池`);\r\n            return;\r\n        }\r\n\r\n        const { pool, prefab } = poolInfo;\r\n        for (let i = 0; i < size; i++) {\r\n            const node = instantiate(prefab);\r\n            node.name = prefab.data.name;\r\n            pool.put(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理指定节点池\r\n     * @param poolName 池名称\r\n     */\r\n    public clearPool(poolName: string): void {\r\n        const poolInfo = this.poolMap.get(poolName);\r\n\r\n        if (poolInfo) {\r\n            poolInfo.pool.clear();\r\n            this.poolMap.delete(poolName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理所有节点池\r\n     */\r\n    public clearAllPools(): void {\r\n        this.poolMap.forEach((value, key) => {\r\n            value.pool.clear();\r\n        });\r\n        this.poolMap.clear();\r\n    }\r\n\r\n    /**\r\n     * 获取指定节点池的大小\r\n     * @param poolName 池名称\r\n     * @returns 节点池大小\r\n     */\r\n    public getPoolSize(poolName: string): number {\r\n        const poolInfo = this.poolMap.get(poolName);\r\n        return poolInfo ? poolInfo.pool.size() : 0;\r\n    }\r\n}    "]}