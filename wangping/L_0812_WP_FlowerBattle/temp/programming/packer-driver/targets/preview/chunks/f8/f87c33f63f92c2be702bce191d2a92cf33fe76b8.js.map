{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/Entitys/Entity.ts"],"names":["_decorator","Component","SkeletalAnimation","v3","StateMachine","IdleState","MoveState","CharacterType","CharacterStateType","ccclass","property","Entity","id","entityName","hp","maxHp","attack","defense","type","Player","moveSpeed","stateMachine","destForward","target","moveTargetWorldPos","onLoad","addState","Idle","Move","setupEventListeners","getMachineName","getStateName","setMoveSpeed","speed","getMoveSpeed","setData","name","getId","getEntityName","getType","entitySetPosition","pos","node","setPosition","entityGetPosition","position","takeDamage","damage","callback","finalDamage","Math","max","console","log","die","heal","amount","min","setState","move","moveAttack","idle","update","dt","useSkill"],"mappings":"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","sourcesContent":["import { _decorator, Component, SkeletalAnimation, v3, Vec3,Node } from \"cc\";\r\nimport { eventMgr } from \"../core/EventManager\";\r\nimport { EventType } from \"../core/EventType\";\r\nimport StateMachine from \"../core/SateMachine\";\r\nimport { IdleState } from \"../State/IdleState\";\r\nimport { MoveState } from \"../State/MoveState\";\r\nimport { App } from \"../App\";\r\n\r\n\r\n/**\r\n * 角色类型枚举\r\n */\r\nexport enum CharacterType {\r\n    Player = \"Player\",    // 玩家角色\r\n    StaticPlayer = \"StaticPlayer\",    // 静态玩家角色\r\n    AIPlayer = \"AIPlayer\",  //不需要操作有自己行为的角色\r\n    Enemy = \"Enemy\",    // 敌人角色\r\n    Parter = \"Parter\",  // 伙伴\r\n}\r\n/**\r\n *   角色状态机名字\r\n */\r\nexport enum CharacterStateType {\r\n    Idle = \"idle\",    // 玩家角色\r\n    Move = \"move\",    // 静态玩家角色\r\n    MoveAttack = \"moveAttack\",  //不需要操作有自己行为的角色\r\n    Attack = \"attack\",    // 敌人角色\r\n}\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Entity')\r\nexport default class Entity extends Component {\r\n\r\n\r\n    id: string;\r\n\r\n    entityName: string;\r\n\r\n    hp: number = 0;\r\n\r\n    maxHp: number = 0;\r\n\r\n    attack: number = 0;\r\n\r\n    defense: number = 0;\r\n\r\n    type: string = CharacterType.Player; \r\n    \r\n    protected moveSpeed: number = 0;\r\n\r\n    stateMachine: StateMachine = new StateMachine();\r\n\r\n    destForward: Vec3 = v3();\r\n\r\n    target: unknown = null;\r\n\r\n    moveTargetWorldPos:Vec3 = null; //移动到的目标位置\r\n\r\n    //不同的怪有不同的动画方式\r\n    @property(SkeletalAnimation)\r\n    characterSkeletalAnimation: SkeletalAnimation = null;\r\n\r\n    protected onLoad(): void {\r\n\r\n        // 初始化状态机\r\n         this.stateMachine.addState(CharacterStateType.Idle, new IdleState(this));\r\n         this.stateMachine.addState(CharacterStateType.Move, new MoveState(this));\r\n        // 监听事件\r\n        this.setupEventListeners();\r\n    }\r\n    getMachineName() {\r\n        return this.stateMachine.getStateName();\r\n    }\r\n\r\n\r\n    //设置移动速度\r\n    setMoveSpeed(speed: number) {\r\n        this.moveSpeed = speed;\r\n    }\r\n    //获取移动速度\r\n    getMoveSpeed() {\r\n        return this.moveSpeed;\r\n    }\r\n    //没有配置表手动默认\r\n    setData(id: string, name: string, hp: number, attack: number, type: string) {\r\n        this.id = id;\r\n        this.entityName = name;\r\n        this.hp = hp;\r\n        this.maxHp = hp;\r\n        this.attack = attack;\r\n        this.type = type;\r\n    }\r\n    //获取ID\r\n    getId() {\r\n        return this.id;\r\n\r\n    }\r\n    getEntityName() {\r\n        return this.entityName;\r\n    }\r\n    /**获取类型 */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n    entitySetPosition(pos: Vec3) {\r\n        this.node.setPosition(pos);\r\n    }\r\n    entityGetPosition() {\r\n        return this.node.position;\r\n    }\r\n    private setupEventListeners(): void {\r\n  \r\n    }\r\n    takeDamage(damage: number,callback?: (...agrs:unknown[]) => void): void {\r\n        const finalDamage = Math.max(damage - this.defense, 0);\r\n        console.log(\"damage damage \" + damage);\r\n        console.log(\"this.defense this.defense \" + this.defense);\r\n        this.hp -= finalDamage;\r\n        if(this.hp <= 0){\r\n            this.hp = 0;\r\n        }\r\n        //eventMgr.emit(EventType.ENTITY_TAKE_DAMAGE, this, finalDamage);\r\n        if (this.hp <= 0) {\r\n            this.die(callback);\r\n        } else {\r\n           // this.stateMachine.setState(\"hurt\");\r\n        }\r\n        if(callback){\r\n            callback(this.hp <= 0);\r\n        }\r\n    }\r\n\r\n\r\n    heal(amount: number): void {\r\n        this.hp = Math.min(this.hp + amount, this.maxHp);\r\n      \r\n    }\r\n\r\n    die(callback?: (...agrs:unknown[]) => void): void {\r\n\r\n        this.stateMachine.setState(\"die\",callback);\r\n    \r\n    }\r\n    move(callback?: (...agrs:unknown[]) => void): void {\r\n      \r\n        this.stateMachine.setState(\"move\",callback);\r\n    }\r\n    moveAttack(callback?: (...agrs:unknown[]) => void): void {\r\n        this.stateMachine.setState(\"moveAttack\",callback);\r\n    }\r\n    idle() {\r\n     \r\n        this.stateMachine.setState(\"idle\");\r\n    }\r\n\r\n    update(dt: number): void {\r\n\r\n        this.stateMachine.update(dt);\r\n    }\r\n\r\n    useSkill(callback?: (...agrs:unknown[]) => void): void {\r\n        this.stateMachine.setState(\"attack\",callback);\r\n    }\r\n\r\n    // /** 当前节点是否在城内 */\r\n    // public isInDoor(): boolean {\r\n    //     return this.posIsInDoor(this.node.worldPosition.clone());\r\n    // }\r\n\r\n    // /** 坐标是否在栅栏内 */\r\n    // public posIsInDoor(pos:Vec3):boolean{\r\n    //     let palings:Node[]=App.sceneNode.palingLevels;\r\n    //     if(palings[0].active === true){\r\n    //         //1级\r\n    //         return App.palingAttack.inPalingsByLevel(1,pos);\r\n    //     }else if(palings[1].active === true){\r\n    //         //2级\r\n    //         if(!App.palingAttack.inPalingsByLevel(2,pos)){\r\n    //             //3级\r\n    //             if(palings[2].active === true){\r\n    //                 return App.palingAttack.inPalingsByLevel(3,pos);\r\n    //             }else{\r\n    //                 return false;\r\n    //             }\r\n    //         }else{\r\n    //             return true;\r\n    //         }\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n}\r\n\r\n"]}