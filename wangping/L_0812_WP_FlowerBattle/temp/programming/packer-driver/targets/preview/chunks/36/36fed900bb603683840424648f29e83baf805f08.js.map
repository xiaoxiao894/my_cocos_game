{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/PalingAttack.ts"],"names":["_decorator","Vec3","App","ccclass","PalingAttack","attackPaling","_palingBoundings","_paling2State","Instance","_instance","setPaling","level","sceneNode","console","warn","attackPalingLevel_1","forEach","node","addOneAttack","attackPalingLevel_2","attackPalingLevel_3","attackPalingLevel_4","enemyController","resetEnemyAttackPaling","nodeId","uuid","curNum","maxNum","distance","getNearstPaling","pos","nearestGuardrail","minDistSqr","Infinity","key","hasOwnProperty","paling","disSqr","squaredDistance","getWorldPosition","getAllPaling","result","getPalingByUuid","updatePalingCurNum","newCurNum","inPalingsByLevel","length","updateBounding","updatePaling2Bounding","bounding","x","minX","maxX","z","minZ","maxZ","error","palings","palingLevels","palingNode","children","palingPos","worldPosition","Math","min","max","push","newState","active","i"],"mappings":";;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAkBC,MAAAA,I,OAAAA,I;;AAClBC,MAAAA,G,iBAAAA,G;;;;;;;;;OAEH;AAAEC,QAAAA;AAAF,O,GAAcH,U;AAEpB;;AAQA;;8BASaI,Y,WADZD,OAAO,CAAC,cAAD,C,2BAAR,MACaC,YADb,CAC0B;AAAA;AAWtB;AAXsB,eAYdC,YAZc,GAY6B,EAZ7B;;AActB;AAdsB,eAedC,gBAfc,GAeuB,EAfvB;;AAiBtB;AAjBsB,eAkBdC,aAlBc,GAkBU,CAlBV;AAAA;;AAGtB;AAC0B,mBAARC,QAAQ,GAAiB;AACvC,cAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,iBAAKA,SAAL,GAAiB,IAAIL,YAAJ,EAAjB;AACH;;AACD,iBAAO,KAAKK,SAAZ;AACH;;AAWD;AACJ;AACA;AACA;AACIC,QAAAA,SAAS,CAACC,KAAD,EAA0B;AAAA,cAAzBA,KAAyB;AAAzBA,YAAAA,KAAyB,GAAT,CAAS;AAAA;;AAC/B;AACA,cAAI;AAAA;AAAA,6BAAQ,CAAC;AAAA;AAAA,0BAAIC,SAAjB,EAA4B;AACxBC,YAAAA,OAAO,CAACC,IAAR,CAAa,mBAAb;AACA;AACH;;AAGD,eAAKT,YAAL,GAAoB,EAApB,CAR+B,CAQP;;AACxB,cAAIM,KAAK,IAAI,CAAb,EAAgB;AACZ,gBAAMI,mBAAmB,GAAG;AAAA;AAAA,4BAAIH,SAAJ,CAAcG,mBAAd,IAAqC,EAAjE;AACAA,YAAAA,mBAAmB,CAACC,OAApB,CAA6BC,IAAD,IAAU;AAClC,mBAAKC,YAAL,CAAkBD,IAAlB;AACH,aAFD;AAGH,WALD,MAKO,IAAIN,KAAK,IAAI,CAAb,EAAgB;AACnB,gBAAMQ,mBAAmB,GAAG;AAAA;AAAA,4BAAIP,SAAJ,CAAcO,mBAAd,IAAqC,EAAjE;AACAA,YAAAA,mBAAmB,CAACH,OAApB,CAA6BC,IAAD,IAAU;AAClC,mBAAKC,YAAL,CAAkBD,IAAlB;AACH,aAFD;AAGH,WALM,MAKA,IAAIN,KAAK,IAAI,CAAb,EAAgB;AACnB,gBAAMS,mBAAmB,GAAG;AAAA;AAAA,4BAAIR,SAAJ,CAAcQ,mBAAd,IAAqC,EAAjE;AACAA,YAAAA,mBAAmB,CAACJ,OAApB,CAA6BC,IAAD,IAAU;AAClC,mBAAKC,YAAL,CAAkBD,IAAlB;AACH,aAFD;AAGH,WALM,MAKA,IAAIN,KAAK,IAAI,CAAb,EAAgB;AACnB,aACI,IAAI;AAAA;AAAA,4BAAIC,SAAJ,CAAcQ,mBAAd,IAAqC,EAAzC,CADJ,EAEI,IAAI;AAAA;AAAA,4BAAIR,SAAJ,CAAcS,mBAAd,IAAqC,EAAzC,CAFJ,EAGEL,OAHF,CAGUC,IAAI,IAAI,KAAKC,YAAL,CAAkBD,IAAlB,CAHlB;AAIH,WA7B8B,CAiC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA,0BAAIK,eAAJ,CAAoBC,sBAApB;AACH;;AAEOL,QAAAA,YAAY,CAACD,IAAD,EAAa;AAC7B,cAAMO,MAAM,GAAGP,IAAI,CAACQ,IAApB;AACA,eAAKpB,YAAL,CAAkBmB,MAAlB,IAA4B;AACxBP,YAAAA,IADwB;AAExBS,YAAAA,MAAM,EAAE,CAFgB;AAGxBC,YAAAA,MAAM,EAAE,CAHgB;AAIxBC,YAAAA,QAAQ,EAAE;AAJc,WAA5B;AAMH;AAED;AACJ;AACA;AACA;;;AACIC,QAAAA,eAAe,CAACC,GAAD,EAA+B;AAE1C,cAAIC,gBAAgB,GAAG,IAAvB,CAF0C,CAEb;;AAC7B,cAAIC,UAAU,GAAGC,QAAjB,CAH0C,CAGb;;AAE7B,eAAK,IAAMC,GAAX,IAAkB,KAAK7B,YAAvB,EAAqC;AACjC,gBAAI,KAAKA,YAAL,CAAkB8B,cAAlB,CAAiCD,GAAjC,CAAJ,EAA2C;AACvC,kBAAME,MAAM,GAAG,KAAK/B,YAAL,CAAkB6B,GAAlB,CAAf;;AACA,kBAAIE,MAAM,CAACV,MAAP,GAAgBU,MAAM,CAACT,MAA3B,EAAmC;AAC/B,oBAAIU,MAAc,GAAGpC,IAAI,CAACqC,eAAL,CAAqBF,MAAM,CAACnB,IAAP,CAAYsB,gBAAZ,EAArB,EAAqDT,GAArD,CAArB;;AACA,oBAAIO,MAAM,GAAGL,UAAb,EAAyB;AACrBA,kBAAAA,UAAU,GAAGK,MAAb;AACAN,kBAAAA,gBAAgB,GAAGK,MAAnB;AACH;AACJ;AACJ;AACJ,WAhByC,CAkB1C;;;AACA,cAAI,CAACL,gBAAL,EAAuB;AACnB,mBAAO,IAAP;AACH,WArByC,CAuB1C;;;AACA,iBAAOA,gBAAP;AACH;AAED;AACJ;AACA;;;AACIS,QAAAA,YAAY,GAA+B;AACvC,cAAMC,MAAkC,GAAG,EAA3C;;AACA,eAAK,IAAMP,GAAX,IAAkB,KAAK7B,YAAvB,EAAqC;AACjC,gBAAI,KAAKA,YAAL,CAAkB8B,cAAlB,CAAiCD,GAAjC,CAAJ,EAA2C;AACvCO,cAAAA,MAAM,CAACP,GAAD,CAAN,gBAAmB,KAAK7B,YAAL,CAAkB6B,GAAlB,CAAnB;AACH;AACJ;;AACD,iBAAOO,MAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,QAAAA,eAAe,CAACjB,IAAD,EAAuC;AAClD,iBAAO,KAAKpB,YAAL,CAAkBoB,IAAlB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIkB,QAAAA,kBAAkB,CAAClB,IAAD,EAAemB,SAAf,EAA2C;AACzD,cAAMR,MAAM,GAAG,KAAK/B,YAAL,CAAkBoB,IAAlB,CAAf;;AACA,cAAIW,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACV,MAAP,GAAgBkB,SAAhB;AACA,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAP;AACH;AAED;;;AACOC,QAAAA,gBAAgB,CAAClC,KAAD,EAAgBmB,GAAhB,EAAoC;AACvD,cAAI,KAAKxB,gBAAL,CAAsBwC,MAAtB,KAAiC,CAArC,EAAwC;AACpC,iBAAKC,cAAL;AACH,WAFD,MAEO,IAAI,KAAKxC,aAAL,KAAuB,CAA3B,EAA8B;AACjC,iBAAKyC,qBAAL;AACH;;AACD,cAAMC,QAAQ,GAAG,KAAK3C,gBAAL,CAAsBK,KAAK,GAAG,CAA9B,CAAjB;;AACA,cAAIsC,QAAJ,EAAc;AACV,mBAAOnB,GAAG,CAACoB,CAAJ,IAASD,QAAQ,CAACE,IAAlB,IAA0BrB,GAAG,CAACoB,CAAJ,IAASD,QAAQ,CAACG,IAA5C,IAAoDtB,GAAG,CAACuB,CAAJ,IAASJ,QAAQ,CAACK,IAAtE,IAA8ExB,GAAG,CAACuB,CAAJ,IAASJ,QAAQ,CAACM,IAAvG;AACH;;AACD1C,UAAAA,OAAO,CAAC2C,KAAR,yEAA6B7C,KAA7B;AACA,iBAAO,KAAP;AACH;AAED;;;AACQoC,QAAAA,cAAc,GAAS;AAC3B,cAAIU,OAAe,GAAG;AAAA;AAAA,0BAAI7C,SAAJ,CAAc8C,YAApC;;AACA,eAAK,IAAMtB,MAAX,IAAqBqB,OAArB,EAA8B;AAC1B,gBAAIN,IAAI,GAAGlB,QAAX;AAAA,gBAAqBmB,IAAI,GAAG,CAACnB,QAA7B;AACA,gBAAIqB,IAAI,GAAGrB,QAAX;AAAA,gBAAqBsB,IAAI,GAAG,CAACtB,QAA7B;;AAEA,iBAAK,IAAM0B,UAAX,IAAyBvB,MAAM,CAACwB,QAAhC,EAA0C;AAEtC,kBAAMC,SAAS,GAAGF,UAAU,CAACG,aAA7B;AACAX,cAAAA,IAAI,GAAGY,IAAI,CAACC,GAAL,CAASb,IAAT,EAAeU,SAAS,CAACX,CAAzB,CAAP;AACAE,cAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAASb,IAAT,EAAeS,SAAS,CAACX,CAAzB,CAAP;AACAI,cAAAA,IAAI,GAAGS,IAAI,CAACC,GAAL,CAASV,IAAT,EAAeO,SAAS,CAACR,CAAzB,CAAP;AACAE,cAAAA,IAAI,GAAGQ,IAAI,CAACE,GAAL,CAASV,IAAT,EAAeM,SAAS,CAACR,CAAzB,CAAP;AACH;;AAED,iBAAK/C,gBAAL,CAAsB4D,IAAtB,CAA2B;AAAEf,cAAAA,IAAF;AAAQC,cAAAA,IAAR;AAAcE,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,aAA3B;AACH;AACJ;AAED;;;AACQP,QAAAA,qBAAqB,GAAS;AAClC,cAAImB,QAAgB,GAAG,CAAvB;AACA,cAAIV,OAAe,GAAG;AAAA;AAAA,0BAAI7C,SAAJ,CAAc8C,YAApC;;AACA,cAAID,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAX,IAAqBX,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAhC,IAA0CX,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAzD,EAAiE;AAC7DD,YAAAA,QAAQ,GAAG,CAAX;;AACA,gBAAIV,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAf,EAAuB;AACnBD,cAAAA,QAAQ,GAAG,CAAX;AACH;AACJ,WALD,MAKO,IAAIV,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAf,EAAuB;AAC1BD,YAAAA,QAAQ,GAAG,CAAX;AACH;;AACD,cAAIA,QAAQ,KAAK,KAAK5D,aAAtB,EAAqC;AACjC,gBAAI;AAAE4C,cAAAA,IAAF;AAAQC,cAAAA,IAAR;AAAcE,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,gBAA6B,KAAKjD,gBAAL,CAAsB,CAAtB,CAAjC;;AACA,gBAAI,CAAC6D,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,CAAhC,KAAsC,KAAK5D,aAAL,KAAuB,CAAjE,EAAoE;AAChE,mBAAK,IAAI8D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBlB,gBAAAA,IAAI,GAAGY,IAAI,CAACC,GAAL,CAASb,IAAT,EAAe,KAAK7C,gBAAL,CAAsB+D,CAAtB,EAAyBlB,IAAxC,CAAP;AACAC,gBAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAASb,IAAT,EAAe,KAAK9C,gBAAL,CAAsB+D,CAAtB,EAAyBjB,IAAxC,CAAP;AACAE,gBAAAA,IAAI,GAAGS,IAAI,CAACC,GAAL,CAASV,IAAT,EAAe,KAAKhD,gBAAL,CAAsB+D,CAAtB,EAAyBf,IAAxC,CAAP;AACAC,gBAAAA,IAAI,GAAGQ,IAAI,CAACE,GAAL,CAASV,IAAT,EAAe,KAAKjD,gBAAL,CAAsB+D,CAAtB,EAAyBd,IAAxC,CAAP;AACH;AACJ;;AACD,gBAAI,CAACY,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,CAAhC,KAAsC,KAAK5D,aAAL,KAAuB,CAAjE,EAAoE;AAChE4C,cAAAA,IAAI,GAAGY,IAAI,CAACC,GAAL,CAASb,IAAT,EAAe,KAAK7C,gBAAL,CAAsB,CAAtB,EAAyB6C,IAAxC,CAAP;AACAC,cAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAASb,IAAT,EAAe,KAAK9C,gBAAL,CAAsB,CAAtB,EAAyB8C,IAAxC,CAAP;AACAE,cAAAA,IAAI,GAAGS,IAAI,CAACC,GAAL,CAASV,IAAT,EAAe,KAAKhD,gBAAL,CAAsB,CAAtB,EAAyBgD,IAAxC,CAAP;AACAC,cAAAA,IAAI,GAAGQ,IAAI,CAACE,GAAL,CAASV,IAAT,EAAe,KAAKjD,gBAAL,CAAsB,CAAtB,EAAyBiD,IAAxC,CAAP;AACH;;AACD,iBAAKjD,gBAAL,CAAsB,CAAtB,IAA2B;AAAE6C,cAAAA,IAAF;AAAQC,cAAAA,IAAR;AAAcE,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,aAA3B;AACA,iBAAKhD,aAAL,GAAqB4D,QAArB;AACH;AAEJ;;AA7OqB,O,UACP1D,S,GAAiC,I","sourcesContent":["import { _decorator, Node, Vec3 } from 'cc';\r\nimport { App } from './App';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n/** 围栏数据接口定义 */\r\ninterface PalingData {\r\n    node: Node;\r\n    curNum: number;\r\n    maxNum: number;\r\n    distance: number;\r\n}\r\n\r\n/** 围栏边界 */\r\ninterface PalingBounding {\r\n    minX: number;\r\n    maxX: number;\r\n    minZ: number;\r\n    maxZ: number;\r\n}\r\n\r\n@ccclass('PalingAttack')\r\nexport class PalingAttack {\r\n    private static _instance: PalingAttack | null = null;\r\n\r\n    /** 获取单例实例 */\r\n    public static get Instance(): PalingAttack {\r\n        if (!this._instance) {\r\n            this._instance = new PalingAttack();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /** 围栏攻击数据映射表，key为节点uuid */\r\n    private attackPaling: Record<string, PalingData> = {};\r\n\r\n    /** 围栏边界 3个等级的节点对应的边界 */\r\n    private _palingBoundings: PalingBounding[] = [];\r\n\r\n    /** 围栏2状态  0 中间一块 1中间一块+右边一块 2中间一块+左边一块 3全部 */\r\n    private _paling2State: number = 0;\r\n\r\n    /**\r\n     * 设置可被攻击的围栏\r\n     * 从场景节点中获取围栏并初始化其攻击数据\r\n     */\r\n    setPaling(level: number = 1): void {\r\n        // 空值检查，避免访问undefined的属性\r\n        if (!App || !App.sceneNode) {\r\n            console.warn('App或sceneNode未初始化');\r\n            return;\r\n        }\r\n\r\n\r\n        this.attackPaling = {}; // 重置数据\r\n        if (level == 1) {\r\n            const attackPalingLevel_1 = App.sceneNode.attackPalingLevel_1 || [];\r\n            attackPalingLevel_1.forEach((node) => {\r\n                this.addOneAttack(node);\r\n            });\r\n        } else if (level == 2) {\r\n            const attackPalingLevel_2 = App.sceneNode.attackPalingLevel_2 || [];\r\n            attackPalingLevel_2.forEach((node) => {\r\n                this.addOneAttack(node);\r\n            });\r\n        } else if (level == 3) {\r\n            const attackPalingLevel_3 = App.sceneNode.attackPalingLevel_3 || [];\r\n            attackPalingLevel_3.forEach((node) => {\r\n                this.addOneAttack(node);\r\n            });\r\n        } else if (level == 4) {\r\n            [\r\n                ...(App.sceneNode.attackPalingLevel_3 || []),\r\n                ...(App.sceneNode.attackPalingLevel_4 || [])\r\n            ].forEach(node => this.addOneAttack(node));\r\n        }\r\n\r\n\r\n\r\n        // // 初始化围栏数据\r\n        // if(App.sceneNode.palingLevels[0].active){\r\n        //     const attackPalingLevel_1 = App.sceneNode.attackPalingLevel_1 || [];\r\n        //     attackPalingLevel_1.forEach((node) => {\r\n        //         this.addOneAttack(node);\r\n        //     });\r\n        // }\r\n        // if(App.sceneNode.palingLevels[1].active){\r\n        //     const attackPalingLevel_2 = App.sceneNode.attackPalingLevel_2 || [];\r\n        //     attackPalingLevel_2.forEach((node) => {\r\n        //         let showNode:boolean = false;\r\n        //         if(node.active &&node.parent.active){\r\n        //             if(!App.sceneNode.palingLevels[5].active){\r\n        //                 showNode = true;\r\n        //             // }else if(node.name ===\"erjichengmen\"||node.name ===\"erjichengqiang01\"||node.name ===\"erjichengqiang02\"){\r\n        //             //     showNode = false;\r\n        //             // }else{\r\n        //              //   showNode = true;\r\n        //             }\r\n\r\n        //         }\r\n        //         if(showNode){\r\n        //             this.addOneAttack(node);\r\n        //         }\r\n        //     });\r\n        // }\r\n        // if(App.sceneNode.palingLevels[2].active){\r\n        //     const attackPalingLevel_3 = App.sceneNode.attackPalingLevel_3 || [];\r\n        //     attackPalingLevel_3.forEach((node) => {\r\n        //         this.addOneAttack(node);\r\n        //     });\r\n        // }\r\n        App.enemyController.resetEnemyAttackPaling();\r\n    }\r\n\r\n    private addOneAttack(node: Node) {\r\n        const nodeId = node.uuid;\r\n        this.attackPaling[nodeId] = {\r\n            node,\r\n            curNum: 0,\r\n            maxNum: 2,\r\n            distance: 2\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 返回最近的围栏\r\n     * @returns 符合条件的围栏数据或null\r\n     */\r\n    getNearstPaling(pos: Vec3): PalingData | null {\r\n\r\n        let nearestGuardrail = null; //最近围栏\r\n        let minDistSqr = Infinity;   //最近距离\r\n\r\n        for (const key in this.attackPaling) {\r\n            if (this.attackPaling.hasOwnProperty(key)) {\r\n                const paling = this.attackPaling[key];\r\n                if (paling.curNum < paling.maxNum) {\r\n                    let disSqr: number = Vec3.squaredDistance(paling.node.getWorldPosition(), pos);\r\n                    if (disSqr < minDistSqr) {\r\n                        minDistSqr = disSqr;\r\n                        nearestGuardrail = paling;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 如果没有符合条件的围栏，返回null\r\n        if (!nearestGuardrail) {\r\n            return null;\r\n        }\r\n\r\n        // 返回最近的围栏\r\n        return nearestGuardrail;\r\n    }\r\n\r\n    /**\r\n     * 获取所有围栏的数据\r\n     */\r\n    getAllPaling(): Record<string, PalingData> {\r\n        const result: Record<string, PalingData> = {};\r\n        for (const key in this.attackPaling) {\r\n            if (this.attackPaling.hasOwnProperty(key)) {\r\n                result[key] = { ...this.attackPaling[key] };\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据节点UUID获取特定围栏数据\r\n     * @param uuid 节点UUID\r\n     * @returns 围栏数据或undefined\r\n     */\r\n    getPalingByUuid(uuid: string): PalingData | undefined {\r\n        return this.attackPaling[uuid];\r\n    }\r\n\r\n    /**\r\n     * 更新围栏的当前数值\r\n     * @param uuid 节点UUID\r\n     * @param newCurNum 新的当前数值\r\n     * @returns 是否更新成功\r\n     */\r\n    updatePalingCurNum(uuid: string, newCurNum: number): boolean {\r\n        const paling = this.attackPaling[uuid];\r\n        if (paling) {\r\n            paling.curNum = newCurNum;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** 判断是否在栅栏边界内 */\r\n    public inPalingsByLevel(level: number, pos: Vec3): boolean {\r\n        if (this._palingBoundings.length === 0) {\r\n            this.updateBounding();\r\n        } else if (this._paling2State !== 3) {\r\n            this.updatePaling2Bounding();\r\n        }\r\n        const bounding = this._palingBoundings[level - 1];\r\n        if (bounding) {\r\n            return pos.x >= bounding.minX && pos.x <= bounding.maxX && pos.z >= bounding.minZ && pos.z <= bounding.maxZ;\r\n        }\r\n        console.error(`没有找到对应栅栏的边界 ${level}`);\r\n        return false;\r\n    }\r\n\r\n    /** 更新栅栏边界 */\r\n    private updateBounding(): void {\r\n        let palings: Node[] = App.sceneNode.palingLevels;\r\n        for (const paling of palings) {\r\n            let minX = Infinity, maxX = -Infinity;\r\n            let minZ = Infinity, maxZ = -Infinity;\r\n\r\n            for (const palingNode of paling.children) {\r\n\r\n                const palingPos = palingNode.worldPosition;\r\n                minX = Math.min(minX, palingPos.x);\r\n                maxX = Math.max(maxX, palingPos.x);\r\n                minZ = Math.min(minZ, palingPos.z);\r\n                maxZ = Math.max(maxZ, palingPos.z);\r\n            }\r\n\r\n            this._palingBoundings.push({ minX, maxX, minZ, maxZ });\r\n        }\r\n    }\r\n\r\n    /** 单独更新2级围栏边界 */\r\n    private updatePaling2Bounding(): void {\r\n        let newState: number = 0;\r\n        let palings: Node[] = App.sceneNode.palingLevels;\r\n        if (palings[3].active && palings[4].active && palings[5].active) {\r\n            newState = 1;\r\n            if (palings[6].active) {\r\n                newState = 3;\r\n            }\r\n        } else if (palings[6].active) {\r\n            newState = 2;\r\n        }\r\n        if (newState !== this._paling2State) {\r\n            let { minX, maxX, minZ, maxZ } = this._palingBoundings[1];\r\n            if ((newState === 1 || newState === 3) && this._paling2State !== 1) {\r\n                for (let i = 3; i < 6; i++) {\r\n                    minX = Math.min(minX, this._palingBoundings[i].minX);\r\n                    maxX = Math.max(maxX, this._palingBoundings[i].maxX);\r\n                    minZ = Math.min(minZ, this._palingBoundings[i].minZ);\r\n                    maxZ = Math.max(maxZ, this._palingBoundings[i].maxZ);\r\n                }\r\n            }\r\n            if ((newState === 2 || newState === 3) && this._paling2State !== 2) {\r\n                minX = Math.min(minX, this._palingBoundings[6].minX);\r\n                maxX = Math.max(maxX, this._palingBoundings[6].maxX);\r\n                minZ = Math.min(minZ, this._palingBoundings[6].minZ);\r\n                maxZ = Math.max(maxZ, this._palingBoundings[6].maxZ);\r\n            }\r\n            this._palingBoundings[1] = { minX, maxX, minZ, maxZ };\r\n            this._paling2State = newState;\r\n        }\r\n\r\n    }\r\n}"]}