{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/core/SoundManager.ts"],"names":["SoundManager","AudioSource","Node","director","ResourceManager","Instance","_instance","constructor","_backgroundNode","_audioNode","_bgmAudioSource","_runSource","_miningSource","audioClips","Map","effectsPool","POOL_SIZE","getScene","addChild","addPersistRootNode","getComponent","addComponent","initRunSource","initMiningSoundSource","meraNode","miningNode","playRunBGM","clip","get","console","error","stop","loop","play","stopRunBGM","playMiningBGM","playing","stopMiningBGM","clearEffectsPool","stopAllEffects","forEach","source","isValid","destroy","effectsNode","getChildByName","getIdleEffectSource","length","oldSource","shift","volume","push","playBGM","name","stopBGM","pauseBGM","pause","resumeBGM","playAudio","playOneShot","preloadAudioClips","instance","loadAudio","then","log","set","loadLeftAudios","loadAudioDir","clips"],"mappings":"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","sourcesContent":["import { _decorator,  AudioClip, AudioSource, Node,  Vec3,director } from 'cc';\r\nimport { ResourceManager } from './ResourceManager';\r\n\r\nexport class SoundManager{\r\n\r\n    private _backgroundNode = null;\r\n    private _audioNode = null;\r\n    private _bgmAudioSource: AudioSource = null;\r\n\r\n    private _runSource:AudioSource = null;\r\n    private _miningSource:AudioSource = null;\r\n\r\n\r\n    // 音效缓存\r\n    private audioClips: Map<string, AudioClip> = new Map();\r\n\r\n    // 单例模式\r\n    private static _instance: SoundManager;\r\n    public static get Instance(): SoundManager {\r\n        if(!SoundManager._instance){\r\n            SoundManager._instance = new SoundManager();\r\n        }\r\n        return SoundManager._instance;\r\n    }\r\n\r\n    public constructor(){\r\n        this._backgroundNode=new Node();\r\n        this._audioNode=new Node();\r\n        director.getScene().addChild(this._backgroundNode);\r\n        director.getScene().addChild(this._audioNode);\r\n        // 设置为常驻节点\r\n        director.addPersistRootNode(this._backgroundNode);\r\n        director.addPersistRootNode(this._audioNode);\r\n        this._bgmAudioSource = this._backgroundNode.getComponent(AudioSource);\r\n        if (!this._bgmAudioSource) {\r\n            this._bgmAudioSource = this._backgroundNode.addComponent(AudioSource);\r\n        }\r\n        this.initRunSource();\r\n        this.initMiningSoundSource();\r\n    }\r\n\r\n    // 初始化人跑步背景音乐\r\n    public initRunSource(){\r\n        let meraNode:Node =new Node();\r\n        director.getScene().addChild(meraNode);\r\n        director.addPersistRootNode(meraNode);\r\n        this._runSource = meraNode.addComponent(AudioSource);\r\n\r\n    }\r\n\r\n    // 初始化金矿采集器背景音乐\r\n    public initMiningSoundSource(){\r\n        let miningNode:Node =new Node();\r\n        director.getScene().addChild(miningNode);\r\n        director.addPersistRootNode(miningNode);\r\n        this._miningSource = miningNode.addComponent(AudioSource);\r\n    }\r\n\r\n    // 播放人跑步背景音乐\r\n    public playRunBGM() {\r\n        const clip = this.audioClips.get(\"run\");\r\n        if (!clip) {\r\n            console.error(`run not found!`);\r\n            return;\r\n        }\r\n\r\n        this._runSource.stop();\r\n        this._runSource.clip = clip;\r\n        this._runSource.loop = true;\r\n        this._runSource.play();\r\n    }\r\n\r\n    // 停止跑步音乐\r\n    public stopRunBGM() {\r\n        this._runSource.stop();\r\n    }\r\n\r\n    // 播放金矿采集器背景音乐\r\n    public playMiningBGM() {\r\n        const clip = this.audioClips.get(\"YX_kuangshi\");\r\n        if (!clip) {\r\n            console.error(`mining not found!`);\r\n            return;\r\n        }\r\n        if(!this._miningSource.playing){\r\n            this._miningSource.clip = clip;\r\n            this._miningSource.loop = false;\r\n            this._miningSource.play();\r\n        }\r\n    }\r\n\r\n    // 停止金矿采集器背景音乐\r\n    public stopMiningBGM() {\r\n        this._miningSource.stop();\r\n    }\r\n\r\n    \r\n    \r\n    // 音效播放器对象池\r\n    private effectsPool: AudioSource[] = [];\r\n    private readonly POOL_SIZE = 8;  // 同时可播放的音效数量\r\n\r\n\r\n\r\n    // 清理音效池\r\n    public clearEffectsPool() {\r\n        // 停止所有音效\r\n        this.stopAllEffects();\r\n\r\n        // 销毁所有 AudioSource 组件\r\n        this.effectsPool.forEach(source => {\r\n            if (source.isValid) {\r\n                source.destroy();\r\n            }\r\n        });\r\n\r\n        // 清空数组\r\n        this.effectsPool = [];\r\n        if(!this._audioNode){\r\n            return;\r\n        }\r\n\r\n        // 找到并销毁 EffectsPool 节点\r\n        const effectsNode = this._audioNode.getChildByName('EffectsPool');\r\n        if (effectsNode && effectsNode.isValid) {\r\n            effectsNode.destroy();\r\n        }\r\n    }\r\n\r\n\r\n    // 获取可用的音效播放器\r\n    private getIdleEffectSource(): AudioSource | null {\r\n        //如果超过最大音效限制就去掉最早的那个\r\n        while(this.effectsPool.length >= this.POOL_SIZE){\r\n            let oldSource=this.effectsPool.shift();\r\n            oldSource.stop();\r\n            oldSource.destroy();\r\n        }\r\n        const source:AudioSource = this._audioNode.addComponent(AudioSource);\r\n        source.volume = 1;\r\n        this.effectsPool.push(source);\r\n        return source;\r\n    }\r\n\r\n    // 播放背景音乐\r\n    public playBGM(name: string) {\r\n        const clip = this.audioClips.get(name);\r\n        if (!clip) {\r\n            console.error(`BGM ${name} not found!`);\r\n            return;\r\n        }\r\n\r\n        this._bgmAudioSource.stop();\r\n        this._bgmAudioSource.clip = clip;\r\n        this._bgmAudioSource.loop = true;\r\n        this._bgmAudioSource.play();\r\n    }\r\n\r\n    // 停止背景音乐\r\n    public stopBGM() {\r\n        this._bgmAudioSource.stop();\r\n    }\r\n\r\n    // 暂停背景音乐\r\n    public pauseBGM() {\r\n        this._bgmAudioSource.pause();\r\n    }\r\n\r\n    // 恢复背景音乐\r\n    public resumeBGM() {\r\n        this._bgmAudioSource.play();\r\n    }\r\n\r\n    // 播放音效\r\n    public playAudio(name: string, volume: number = 1) {\r\n        const clip:AudioClip = this.audioClips.get(name);\r\n        if (!clip) {\r\n            console.error(`Audio ${name} not found!`);\r\n            return;\r\n        }\r\n\r\n        const source = this.getIdleEffectSource();\r\n        if (source) {\r\n\r\n            source.volume = volume;\r\n            source.playOneShot(clip);\r\n        }\r\n    }\r\n\r\n\r\n    // 停止所有音效\r\n    public stopAllEffects() {\r\n        for (const source of this.effectsPool) {\r\n            source.stop();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    // 预加载音效资源\r\n    public preloadAudioClips() {\r\n        //单独优先加载背景音乐\r\n        ResourceManager.instance.loadAudio(\"bgm/BGM\").then( ( clip) => {\r\n            console.log(\"audio load \" + clip.name);\r\n            this.audioClips.set(clip.name, clip);\r\n            //直接播放背景音乐\r\n            this.playBGM(\"BGM\");\r\n            this.loadLeftAudios();\r\n        });\r\n        \r\n    }\r\n\r\n    private loadLeftAudios(){\r\n        // 加载音效\r\n        ResourceManager.instance.loadAudioDir(\"sounds\").then( ( clips) => {\r\n            clips.forEach(clip => {\r\n                console.log(\"audio load \" + clip.name);\r\n                this.audioClips.set(clip.name, clip);\r\n            });\r\n        });\r\n    }\r\n    \r\n}"]}