{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/Entitys/PlayerTurret.ts"],"names":["_decorator","tween","Vec3","Quat","Animation","ParticleSystem","Entity","App","GlobeVariable","SoundManager","MathUtil","ccclass","property","PlayerTurret","type","attackRange","attackTargetList","bulletSpeed","explosionRangeSquared","hp","maxHp","attack","attackInterval","testInterval","_speed","bulletPos","enemyHitPos","currentTarget","audioPlayNum","onLoad","start","characterData","dataManager","getCharacterById","attackDamage","node","getChildByName","move","AttackAni","checkEnemy","flowerTx","poolManager","getNode","entifyName","TurretTx","parent","setPosition","position","active","particle","getComponent","play","scheduleOnce","stop","clear","removeFromParent","returnNode","FlowerTx","currentAttackTarget","hitPosNode","worldPosition","clone","isInAttackRange","checkRange","rotateTowards","Instance","playAudio","prefab","TurretBullet","setWorldPosition","baseRot","worldRotation","offsetRot","fromEuler","multiply","setWorldRotation","setWorldScale","worldScale","sceneNode","fireArrow","recordHp","distance","flightTime","Math","max","startPos","endPos","LIFT_HEIGHT","controlPoint","x","y","z","startRotation","eulerAngles","targetRotationX","to","easing","onUpdate","target","ratio","bezierCurve","currentRotationX","call","explodeAtPosition","turretHit","allEnemies","enemyController","getEnemyRvoList","getEnemyList","affectedEnemies","filter","enemy","isValidEnemy","getDistanceSquared","forEach","createExplosionEffect","TurretBombTx","bombEffectParent","pos1","pos2","dx","dy","dz","attack1","characterAnima","die","callback","update","deltaTime","rvoEnemyList","enemyList","i","length","push","minDis","Number","MAX_VALUE","minEnemy","targetWorldPos","dt","currentPos","dir","subtract","normalize","lengthSqr","targetQuat","fromViewUp","UP","currentQuat","resultQuat","slerp","min"],"mappings":"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","sourcesContent":["import { _decorator, Node, tween, Vec3, Quat, Animation, ParticleSystem, BoxCollider } from 'cc';\r\n\r\nimport Entity from './Entity';\r\nimport { App } from '../App';\r\nimport { GlobeVariable } from '../core/GlobeVariable';\r\nimport { SoundManager } from '../core/SoundManager';\r\nimport { EnemySpider } from './EnemySpider';\r\nimport { MathUtil } from '../core/MathUtils';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerTurret')\r\nexport class PlayerTurret extends Entity {\r\n   // @property\r\n    attackRange: number = 30; // 攻击范围，可在编辑器中调整\r\n\r\n    @property({ type: Animation })\r\n    characterAnima: Animation = null; // 骨骼动画组件\r\n\r\n    private attackTargetList: EnemySpider[] = []; // 攻击目标列表\r\n\r\n    private bulletSpeed: number = 90;\r\n\r\n    private explosionRangeSquared: number = 120; // 爆炸范围的平方（用于优化距离判断）\r\n\r\n    // 血量属性\r\n    hp = 2;\r\n    maxHp = 2;\r\n    attack: number = 1;\r\n\r\n\r\n\r\n    // 攻击间隔\r\n    private attackInterval: number = 1.75;\r\n    private testInterval = 1.75;\r\n\r\n    private _speed: number = 10;\r\n    // 塔发射子弹的位置\r\n    private bulletPos: Node = null;\r\n\r\n    // 敌人受击位置\r\n    private enemyHitPos: Vec3 = null;\r\n    // 当前攻击目标\r\n    private currentTarget: EnemySpider = null;\r\n\r\n    private audioPlayNum: number = 0;\r\n\r\n    onLoad() {\r\n        \r\n    }\r\n\r\n    start() {\r\n        let characterData = App.dataManager.getCharacterById(3);\r\n        if (characterData) {\r\n            this.attackRange = characterData.attackRange;\r\n            this.attack = characterData.attackDamage;\r\n            this.maxHp = characterData.maxHp;\r\n            this.hp = characterData.hp;\r\n            this.attackInterval = characterData.attackInterval;\r\n            this.testInterval = characterData.attackInterval;\r\n        }\r\n        this.bulletPos = this.node.getChildByName(\"attackPos\");\r\n        \r\n    }\r\n    move() {\r\n        // 塔防无需移动逻辑\r\n    }\r\n    AttackAni() {\r\n        // 检查敌人列表（更新范围内敌人）\r\n        this.checkEnemy();\r\n\r\n        let flowerTx = App.poolManager.getNode(GlobeVariable.entifyName.TurretTx);\r\n        flowerTx.parent = this.bulletPos.parent\r\n        flowerTx.setPosition(this.bulletPos.position);\r\n        flowerTx.active = true;\r\n        let particle = flowerTx.getChildByName(\"blank\").getComponent(ParticleSystem);\r\n\r\n        particle.play()\r\n\r\n        this.scheduleOnce(() => {\r\n            // 1. 停止粒子播放\r\n            particle.stop();\r\n            // 3. 可选：手动清除所有粒子（根据引擎特性）\r\n            particle.clear();\r\n            flowerTx.active = false;\r\n            flowerTx.removeFromParent()\r\n            App.poolManager.returnNode(flowerTx, GlobeVariable.entifyName.FlowerTx);\r\n\r\n        }, 1.5)\r\n\r\n        // 仅使用attack1中已确定的currentTarget，不重复计算\r\n        // if (this.currentTarget) {\r\n        //     // 二次校验目标有效性（避免攻击准备阶段目标死亡）\r\n        //     if (this.currentTarget.hp <= 0 || this.currentTarget.recordHp <= 0) {\r\n        //         return;\r\n        //     }\r\n        // }\r\n\r\n        // 保存当前攻击目标快照，防止回调时目标变化\r\n        const currentAttackTarget = this.currentTarget;\r\n        if (!currentAttackTarget || !currentAttackTarget.hitPosNode) {\r\n            return;\r\n        }\r\n        this.enemyHitPos = currentAttackTarget.hitPosNode.worldPosition.clone();\r\n\r\n        // 旋转到目标方向\r\n        if (!this.isInAttackRange(currentAttackTarget.node)) {\r\n            this.checkEnemy();\r\n           this.checkRange()\r\n           const currentAttackTarget = this.currentTarget;\r\n           if (!currentAttackTarget || !currentAttackTarget.hitPosNode) {\r\n            return;\r\n        }\r\n           this.enemyHitPos = currentAttackTarget.hitPosNode.worldPosition.clone();\r\n           // return;\r\n        }\r\n        this.rotateTowards(this.enemyHitPos, 1);\r\n\r\n        // 播放攻击音效（限制次数）\r\n        //if (++this.audioPlayNum < 4) {\r\n        SoundManager.Instance.playAudio(\"paotafashe\");\r\n        //  }\r\n\r\n        // 创建并发射子弹\r\n        const prefab = App.poolManager.getNode(GlobeVariable.entifyName.TurretBullet);\r\n        prefab.setWorldPosition(this.bulletPos.worldPosition);\r\n        // prefab.setWorldRotation(this.bulletPos.worldRotation);\r\n        // prefab.setWorldScale(this.bulletPos.worldScale);\r\n        // prefab.parent = App.sceneNode.fireArrow;\r\n        // 核心修改：修正炮弹旋转方向（根据模型实际朝向调整偏移角度）\r\n        const baseRot = this.bulletPos.worldRotation.clone(); // 获取发射点的基础旋转\r\n        const offsetRot = Quat.fromEuler(new Quat(), 0, 0, 0); // 旋转偏移（示例：绕Y轴转90度，需根据模型调整）\r\n        Quat.multiply(baseRot, baseRot, offsetRot); // 合并基础旋转和偏移旋转\r\n        prefab.setWorldRotation(baseRot);\r\n\r\n        prefab.setWorldScale(this.bulletPos.worldScale);\r\n        prefab.parent = App.sceneNode.fireArrow;\r\n\r\n        currentAttackTarget.recordHp -= this.attack;\r\n\r\n        const distance = Vec3.distance(this.bulletPos.worldPosition, this.enemyHitPos);\r\n        const flightTime = Math.max(0.1, distance / this.bulletSpeed);\r\n\r\n        // // 子弹飞行动画\r\n        // tween(prefab)\r\n        //     .to(flightTime, { worldPosition: this.enemyHitPos })\r\n        //     .call(() => {\r\n        //         // 使用快照目标执行攻击，避免currentTarget已被重置\r\n        //         if (currentAttackTarget && currentAttackTarget.hp > 0) {\r\n        //             currentAttackTarget.turretHit(this.attack);\r\n        //         }\r\n        //         this.explodeAtPosition(this.enemyHitPos);\r\n\r\n        //         prefab.removeFromParent();\r\n        //         App.poolManager.returnNode(prefab);\r\n        //     })\r\n        //     .start();\r\n\r\n        // 原代码：tween(prefab).to(flightTime, { worldPosition: this.enemyHitPos })...\r\n\r\n        // 计算贝塞尔曲线控制点（基于子弹起点、目标点和提升高度）\r\n        const startPos = this.bulletPos.worldPosition.clone();\r\n        const endPos = this.enemyHitPos.clone();\r\n        const LIFT_HEIGHT = 25; // 炮弹飞行轨迹高度（可调整）\r\n\r\n        // 控制点：起点和终点的中间上方\r\n        const controlPoint = new Vec3(\r\n            (startPos.x + endPos.x) / 2,\r\n            Math.max(startPos.y, endPos.y) + LIFT_HEIGHT, // 取较高点上方\r\n            (startPos.z + endPos.z) / 2\r\n        );\r\n\r\n        // // 使用贝塞尔曲线动画替代线性运动\r\n        // tween(prefab)\r\n        //     .to(flightTime, {}, {\r\n        //         easing: 'cubicInOut',\r\n        //         onUpdate: (target: Node, ratio: number) => {\r\n        //             // 调用MathUtil的贝塞尔曲线计算方法\r\n        //             const position = MathUtil.bezierCurve(\r\n        //                 startPos,\r\n        //                 controlPoint,\r\n        //                 endPos,\r\n        //                 ratio\r\n        //             );\r\n        //             target.worldPosition = position;\r\n        //         }\r\n        //     })\r\n        //     .call(() => {\r\n        //         // 子弹命中逻辑（保持不变）\r\n        //         if (currentAttackTarget && currentAttackTarget.hp > 0) {\r\n        //             currentAttackTarget.turretHit(this.attack);\r\n        //         }\r\n        //         this.explodeAtPosition(this.enemyHitPos);\r\n\r\n        //         prefab.removeFromParent();\r\n        //         App.poolManager.returnNode(prefab, GlobeVariable.entifyName.TurretBullet);\r\n\r\n        //     })\r\n        //     .start();\r\n        // }\r\n        // 记录初始旋转（假设初始X轴旋转为0）\r\n        const startRotation = prefab.eulerAngles.clone();\r\n        const targetRotationX = 270; // 目标X轴旋转角度\r\n\r\n        // 使用贝塞尔曲线动画，同时添加X轴旋转\r\n        tween(prefab)\r\n            .to(flightTime, {}, {\r\n                easing: 'cubicInOut',\r\n                onUpdate: (target: Node, ratio: number) => {\r\n                    // 1. 计算贝塞尔曲线位置\r\n                    const position = MathUtil.bezierCurve(\r\n                        startPos,\r\n                        controlPoint,\r\n                        endPos,\r\n                        ratio\r\n                    );\r\n                    target.worldPosition = position;\r\n\r\n                    // 2. 计算X轴旋转（从0度过渡到180度）\r\n                    const currentRotationX = startRotation.x + ratio * targetRotationX;\r\n                    target.eulerAngles = new Vec3(\r\n                        currentRotationX,\r\n                        startRotation.y, // 保持Y轴旋转不变\r\n                        startRotation.z  // 保持Z轴旋转不变\r\n                    );\r\n                }\r\n            })\r\n            .call(() => {\r\n                // 子弹命中逻辑（保持不变）\r\n                if (currentAttackTarget && currentAttackTarget.hp > 0) {\r\n                    if (!this.isInAttackRange(currentAttackTarget.node)) {\r\n                        this.explodeAtPosition(this.enemyHitPos);\r\n\r\n                        prefab.removeFromParent();\r\n                        App.poolManager.returnNode(prefab, GlobeVariable.entifyName.TurretBullet);\r\n                        return\r\n                    }\r\n                    currentAttackTarget.turretHit(this.attack, this.bulletPos.worldPosition);\r\n                }\r\n                this.explodeAtPosition(this.enemyHitPos);\r\n\r\n                prefab.removeFromParent();\r\n                App.poolManager.returnNode(prefab, GlobeVariable.entifyName.TurretBullet);\r\n\r\n            })\r\n            .start();\r\n    }\r\n\r\n\r\n    /** 子弹到达位置后爆炸，对范围内敌人造成伤害 */\r\n    private explodeAtPosition(position: Vec3) {\r\n        // 播放爆炸音效\r\n        // SoundManager.inst.playAudio(\"YX_baozha\"); // 假设存在爆炸音效\r\n\r\n        // 获取所有敌人列表\r\n        const allEnemies = [...App.enemyController.getEnemyRvoList(), ...App.enemyController.getEnemyList()];\r\n\r\n        // 查找爆炸范围内的所有有效敌人（使用平方距离优化）\r\n        const affectedEnemies = allEnemies.filter(enemy =>\r\n            this.isValidEnemy(enemy) &&\r\n            this.getDistanceSquared(enemy.node.worldPosition, position) <= this.explosionRangeSquared\r\n        );\r\n\r\n        // 对所有受影响的敌人造成伤害\r\n        affectedEnemies.forEach(enemy => {\r\n            enemy.recordHp -= this.attack;\r\n            enemy.turretHit(this.attack, this.bulletPos.worldPosition);\r\n\r\n        });\r\n\r\n        // 可以在这里添加爆炸特效\r\n        this.createExplosionEffect(position)\r\n    }\r\n\r\n    private createExplosionEffect(position: Vec3) {\r\n        let flowerTx = App.poolManager.getNode(GlobeVariable.entifyName.TurretBombTx);\r\n\r\n        flowerTx.parent = App.sceneNode.bombEffectParent;\r\n        flowerTx.setPosition(position);\r\n        flowerTx.active = true;\r\n        let particle = flowerTx.getChildByName(\"jizhong\").getComponent(ParticleSystem);\r\n\r\n        particle.play()\r\n\r\n        this.scheduleOnce(() => {\r\n            // 1. 停止粒子播放\r\n            particle.stop();\r\n            // 3. 可选：手动清除所有粒子（根据引擎特性）\r\n            particle.clear();\r\n            flowerTx.active = false;\r\n            flowerTx.removeFromParent()\r\n            App.poolManager.returnNode(flowerTx, GlobeVariable.entifyName.TurretBombTx);\r\n\r\n        }, 1.5)\r\n    }\r\n    /** 辅助方法：计算两点之间的平方距离（避免开方运算，提高性能） */\r\n\r\n    /** 辅助方法：计算两点之间的平方距离（避免开方运算，提高性能） */\r\n    private getDistanceSquared(pos1: Vec3, pos2: Vec3): number {\r\n        const dx = pos1.x - pos2.x;\r\n        const dy = pos1.y - pos2.y;\r\n        const dz = pos1.z - pos2.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    attack1() {\r\n        // 1. 先更新敌人列表\r\n        this.checkEnemy();\r\n\r\n        // 2. 统一在这里检查并更新目标（攻击前确认）\r\n        this.checkRange();\r\n\r\n        // 3. 检查是否有有效目标\r\n        if (!this.currentTarget) {\r\n            return;\r\n        }\r\n\r\n        // 5. 执行攻击动画\r\n        this.characterAnima.play(\"attack_paota\");\r\n    }\r\n\r\n    die(callback?: (...agrs: unknown[]) => void): void {\r\n        // 死亡逻辑可在此实现\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this.testInterval += deltaTime;\r\n        if (this.testInterval > this.attackInterval) {\r\n            this.testInterval -= this.attackInterval;\r\n            this.attack1();\r\n        }\r\n    }\r\n\r\n    /** 查找可攻击的敌人（更新攻击目标列表） */\r\n    checkEnemy() {\r\n        this.attackTargetList = []; // 清空列表\r\n        const rvoEnemyList = App.enemyController.getEnemyRvoList();\r\n        const enemyList = App.enemyController.getEnemyList();\r\n\r\n        // 先检查RVO敌人列表\r\n        for (let i = 0; i < rvoEnemyList.length; i++) {\r\n            const enemy = rvoEnemyList[i];\r\n            if (!this.isValidEnemy(enemy)) continue;\r\n\r\n            if (this.isInAttackRange(enemy.node)) {\r\n                this.attackTargetList.push(enemy);\r\n            }\r\n        }\r\n\r\n        // RVO列表无目标时检查普通敌人列表\r\n        if (this.attackTargetList.length === 0) {\r\n            for (let i = 0; i < enemyList.length; i++) {\r\n                const enemy = enemyList[i];\r\n                if (!this.isValidEnemy(enemy)) continue;\r\n\r\n                if (this.isInAttackRange(enemy.node)) {\r\n                    this.attackTargetList.push(enemy);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 检查并更新最近的敌人目标 */\r\n    checkRange() {\r\n        // 当前目标有效且在范围内则直接返回\r\n        if (this.currentTarget && this.isValidEnemy(this.currentTarget) && this.isInAttackRange(this.currentTarget.node)) {\r\n            return this.currentTarget;\r\n        }\r\n\r\n        // 查找最近的敌人\r\n        let minDis = Number.MAX_VALUE;\r\n        let minEnemy: EnemySpider = null;\r\n        for (let i = 0; i < this.attackTargetList.length; i++) {\r\n            const enemy = this.attackTargetList[i];\r\n            const distance = Vec3.distance(enemy.node.worldPosition, this.node.worldPosition);\r\n            if (distance < minDis) {\r\n                minDis = distance;\r\n                minEnemy = enemy;\r\n            }\r\n        }\r\n\r\n        this.currentTarget = minEnemy;\r\n        return minEnemy;\r\n    }\r\n\r\n    /** 辅助判断：敌人是否有效（存活） */\r\n    private isValidEnemy(enemy: EnemySpider): boolean {\r\n        return enemy && enemy.hp > 0 && enemy.recordHp > 0;\r\n    }\r\n\r\n    /** 辅助判断：目标是否在攻击范围内 */\r\n    private isInAttackRange(target: Node): boolean {\r\n        if(target && target.worldPosition){\r\n            return Vec3.distance(target.worldPosition, this.node.worldPosition) < this.attackRange;\r\n        }\r\n       return false;\r\n    }\r\n\r\n    /** 旋转到目标方向 */\r\n    private rotateTowards(targetWorldPos: Vec3, dt: number) {\r\n        const currentPos = this.node.worldPosition.clone();\r\n        const dir = new Vec3();\r\n        Vec3.subtract(dir, targetWorldPos, currentPos); // 计算从当前位置到目标位置的方向\r\n        dir.y = 0; // 保持水平旋转\r\n        dir.normalize();\r\n\r\n        if (dir.lengthSqr() < 0.0001) return; // 距离过近时不旋转\r\n\r\n        // 直接使用指向目标的方向作为视图方向，无需取反\r\n        const targetQuat = new Quat();\r\n        Quat.fromViewUp(targetQuat, dir, Vec3.UP); // 使用dir而非反方向\r\n\r\n        const currentQuat = this.node.worldRotation.clone();\r\n        const resultQuat = new Quat();\r\n        // 平滑插值旋转\r\n        Quat.slerp(resultQuat, currentQuat, targetQuat, Math.min(1, dt * 40));\r\n        this.node.worldRotation = resultQuat;\r\n    }\r\n}"]}