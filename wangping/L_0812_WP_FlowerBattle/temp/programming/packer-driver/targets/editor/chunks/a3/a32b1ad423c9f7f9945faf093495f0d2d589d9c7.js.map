{"version":3,"sources":["file:///D:/Cocos/PlayAble/L_0812_WP_FlowerBattle/assets/JavaScript/data/DataManager.ts"],"names":["_decorator","resources","ccclass","DataManager","dataCache","monsters","Map","characters","Instance","_instance","init","Promise","all","loadMonsterData","loadCharacterData","console","log","error","resolve","reject","load","err","asset","jsonData","Object","json","ss","Array","isArray","forEach","data","set","id","size","Error","getMonsterById","get","getAllMonsters","from","values","getCharacterById","getAllCharacters"],"mappings":"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","sourcesContent":["import { _decorator, resources } from 'cc';\r\nimport { Singleton } from './Singleton';\r\nimport { CharacterDataJson } from './CharacterDataJson';\r\nimport { MonsterData } from './MonsterData'; // 注意这里修正了导入路径的拼写错误\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n// 数据缓存接口\r\ninterface DataCache {\r\n    monsters: Map<number, MonsterData>;\r\n    characters: Map<number, CharacterDataJson>;\r\n}\r\n\r\n@ccclass('DataManager')\r\nexport class DataManager {\r\n    private static _instance: DataManager = null;\r\n    public static get Instance(): DataManager {\r\n        if (!this._instance) {\r\n            this._instance = new DataManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    // 数据缓存\r\n    private dataCache: DataCache = {\r\n        monsters: new Map(),\r\n        characters: new Map()\r\n    };\r\n\r\n    // 初始化所有数据\r\n    async init() {\r\n        try {\r\n            await Promise.all([\r\n                this.loadMonsterData(),\r\n                this.loadCharacterData()\r\n            ]);\r\n            console.log('所有数据加载完成');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('数据加载失败:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // 加载怪物数据\r\n    private async loadMonsterData() {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.load('config/monsters', (err, asset) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                const jsonData = asset instanceof Object && 'json' in asset ? asset.json : asset;\r\n                let ss = asset;\r\n                console.log(jsonData);\r\n                if (jsonData && Array.isArray(jsonData)) {\r\n                    jsonData.forEach((data: MonsterData) => {\r\n                        this.dataCache.monsters.set(data.id, data);\r\n                    });\r\n                    console.log(`已加载怪物数据: ${this.dataCache.monsters.size} 条`);\r\n                    resolve();\r\n                } else {\r\n                    reject(new Error('怪物数据格式不正确'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // 加载人物数据\r\n    private async loadCharacterData() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.load('config/characters', (err, asset) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                const jsonData = asset instanceof Object && 'json' in asset ? asset.json : asset;\r\n                let ss = asset;\r\n                console.log(jsonData);\r\n                if (jsonData && Array.isArray(jsonData)) {\r\n                    jsonData.forEach((data: CharacterDataJson) => {\r\n                        this.dataCache.characters.set(data.id, data);\r\n                    });\r\n                    console.log(`已加载人物数据: ${this.dataCache.characters.size} 条`);\r\n                    resolve();\r\n                } else {\r\n                    reject(new Error('人物数据格式不正确'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // 获取怪物数据\r\n    public getMonsterById(id: number): MonsterData | null {\r\n        return this.dataCache.monsters.get(id) || null;\r\n    }\r\n\r\n    // 获取所有怪物数据\r\n    public getAllMonsters(): MonsterData[] {\r\n        return Array.from(this.dataCache.monsters.values());\r\n    }\r\n\r\n    // 获取人物数据\r\n    public getCharacterById(id: number): CharacterDataJson | null {\r\n        return this.dataCache.characters.get(id) || null;\r\n    }\r\n\r\n    // 获取所有人物数据\r\n    public getAllCharacters(): CharacterDataJson[] {\r\n        return Array.from(this.dataCache.characters.values());\r\n    }\r\n}\r\n"]}